From alainb at mail.berlios.de  Sat Jan 23 17:46:48 2010
From: alainb at mail.berlios.de (alainb at BerliOS)
Date: Sat, 23 Jan 2010 17:46:48 +0100
Subject: [Lincity-ng-commit] r1560 - trunk/src/lincity
Message-ID: <201001231646.o0NGkmen003933@sheep.berlios.de>

Author: alainb
Date: 2010-01-23 17:46:46 +0100 (Sat, 23 Jan 2010)
New Revision: 1560

Modified:
   trunk/src/lincity/init_game.cpp
   trunk/src/lincity/simulate.cpp
   trunk/src/lincity/simulate.h
Log:
code cleanup : move do_rand_ecology in init_game.ccp

Modified: trunk/src/lincity/init_game.cpp
===================================================================
--- trunk/src/lincity/init_game.cpp	2009-11-22 20:46:57 UTC (rev 1559)
+++ trunk/src/lincity/init_game.cpp	2010-01-23 16:46:46 UTC (rev 1560)
@@ -51,7 +51,9 @@
 static void sort_by_altitude(int n, int *tabx, int *taby);
 static void new_setup_one_river(int num_river, int c, int *colx, int *coly, int t, int *topx, int *topy, int l, int *lakx, int *laky);
 static void set_river_tile( int i, int j);
+static void do_rand_ecology(int x, int y);
 
+
 /* ---------------------------------------------------------------------- *
  * Public Functions
  * ---------------------------------------------------------------------- */
@@ -1038,3 +1040,114 @@
     set_mappoint(xx + 16, yy + 17, CST_COMMUNE_1);
 }
 
+void do_rand_ecology(int x, int y)
+{
+    int r = ground[x][y].ecotable;
+    if ( (MP_INFO(x, y).flags | FLAG_HAS_UNDERGROUND_WATER) == 0 ) {
+        /*true desert*/
+        return;
+    }
+
+    if (r >= 300) {
+        /* very dry land */
+        int r2 = rand() % 10;
+        if (r2 <= 6)
+            set_mappoint(x, y, CST_DESERT);
+        else if (r2 <= 8)
+            set_mappoint(x, y, CST_GREEN);
+        else
+            set_mappoint(x, y, CST_TREE);
+    } else if (r >= 160) {
+        int r2 = rand() % 10;
+        if (r2 <= 2)
+            set_mappoint(x, y, CST_DESERT);
+        else if (r2 <= 6)
+            set_mappoint(x, y, CST_GREEN);
+        else
+            set_mappoint(x, y, CST_TREE);
+    } else if (r >= 80) {
+        int r2 = rand() % 10;
+        if (r2 <= 1)
+            set_mappoint(x, y, CST_DESERT);
+        else if (r2 <= 4)
+            set_mappoint(x, y, CST_GREEN);
+        else if (r2 <= 6)
+            set_mappoint(x, y, CST_TREE);
+        else
+            set_mappoint(x, y, CST_TREE2);
+    } else if (r >= 40) {
+        int r2 = rand() % 40;
+        if (r2 == 0)
+            set_mappoint(x, y, CST_DESERT);
+        else if (r2 <= 12)
+            set_mappoint(x, y, CST_GREEN);
+        else if (r2 <= 24)
+            set_mappoint(x, y, CST_TREE);
+        else if (r2 <= 36)
+            set_mappoint(x, y, CST_TREE2);
+        else
+            set_mappoint(x, y, CST_TREE3);
+    } else if (r >= 0) {
+        /* normal land */
+        int r2 = rand() % 40;
+        if (r2 <= 10)
+            set_mappoint(x, y, CST_GREEN);
+        else if (r2 <= 20)
+            set_mappoint(x, y, CST_TREE);
+        else if (r2 <= 30)
+            set_mappoint(x, y, CST_TREE2);
+        else
+            set_mappoint(x, y, CST_TREE3);
+    } else if (r >= -40) {
+        /* forest */
+        int r2 = rand() % 40;
+        if (r2 <= 5)
+            set_mappoint(x, y, CST_GREEN);
+        else if (r2 <= 10)
+            set_mappoint(x, y, CST_TREE);
+        else if (r2 <= 25)
+            set_mappoint(x, y, CST_TREE2);
+        else
+            set_mappoint(x, y, CST_TREE3);
+    } else if (r >= -80) {
+        int r2 = rand() % 40;
+        if (r2 <= 0)
+            MP_TYPE(x, y) = CST_WATER;
+        else if (r2 <= 6)
+            set_mappoint(x, y, CST_GREEN);
+        else if (r2 <= 15)
+            set_mappoint(x, y, CST_TREE);
+        else if (r2 <= 28)
+            set_mappoint(x, y, CST_TREE2);
+        else
+            set_mappoint(x, y, CST_TREE3);
+    } else if (r >= -120) {
+        int r2 = rand() % 40;
+        if (r2 <= 1)
+            MP_TYPE(x, y) = CST_WATER;
+        else if (r2 <= 6)
+            set_mappoint(x, y, CST_GREEN);
+        else if (r2 <= 16)
+            set_mappoint(x, y, CST_TREE);
+        else if (r2 <= 30)
+            set_mappoint(x, y, CST_TREE2);
+        else
+            set_mappoint(x, y, CST_TREE3);
+    } else {
+        /* wetland */
+        int r2 = rand() % 40;
+        if (r2 <= 3)
+            MP_TYPE(x, y) = CST_WATER;
+        else if (r2 <= 8)
+            set_mappoint(x, y, CST_GREEN);
+        else if (r2 <= 20)
+            set_mappoint(x, y, CST_TREE);
+        else if (r2 <= 35)
+            set_mappoint(x, y, CST_TREE2);
+        else
+            set_mappoint(x, y, CST_TREE3);
+    }
+
+}
+
+

Modified: trunk/src/lincity/simulate.cpp
===================================================================
--- trunk/src/lincity/simulate.cpp	2009-11-22 20:46:57 UTC (rev 1559)
+++ trunk/src/lincity/simulate.cpp	2010-01-23 16:46:46 UTC (rev 1560)
@@ -279,7 +279,7 @@
     total_money += goods_tax;
 
     /* The price of exports on the world market drops as you export more.
-       The exporters have to discount there wares, therefore the 
+       The exporters have to discount there wares, therefore the
        tax take is less.
      */
     if (export_tax > ex_tax_dis[0]) {
@@ -467,116 +467,6 @@
     }
 }
 
-void do_rand_ecology(int x, int y)
-{
-    int r = ground[x][y].ecotable;
-    if ( (MP_INFO(x, y).flags | FLAG_HAS_UNDERGROUND_WATER) == 0 ) {
-        /*true desert*/
-        return;
-    }
-
-    if (r >= 300) {
-        /* very dry land */
-        int r2 = rand() % 10;
-        if (r2 <= 6)
-            set_mappoint(x, y, CST_DESERT);
-        else if (r2 <= 8)
-            set_mappoint(x, y, CST_GREEN);
-        else
-            set_mappoint(x, y, CST_TREE);
-    } else if (r >= 160) {
-        int r2 = rand() % 10;
-        if (r2 <= 2)
-            set_mappoint(x, y, CST_DESERT);
-        else if (r2 <= 6)
-            set_mappoint(x, y, CST_GREEN);
-        else
-            set_mappoint(x, y, CST_TREE);
-    } else if (r >= 80) {
-        int r2 = rand() % 10;
-        if (r2 <= 1)
-            set_mappoint(x, y, CST_DESERT);
-        else if (r2 <= 4)
-            set_mappoint(x, y, CST_GREEN);
-        else if (r2 <= 6)
-            set_mappoint(x, y, CST_TREE);
-        else
-            set_mappoint(x, y, CST_TREE2);
-    } else if (r >= 40) {
-        int r2 = rand() % 40;
-        if (r2 == 0)
-            set_mappoint(x, y, CST_DESERT);
-        else if (r2 <= 12)
-            set_mappoint(x, y, CST_GREEN);
-        else if (r2 <= 24)
-            set_mappoint(x, y, CST_TREE);
-        else if (r2 <= 36)
-            set_mappoint(x, y, CST_TREE2);
-        else
-            set_mappoint(x, y, CST_TREE3);
-    } else if (r >= 0) {
-        /* normal land */
-        int r2 = rand() % 40;
-        if (r2 <= 10)
-            set_mappoint(x, y, CST_GREEN);
-        else if (r2 <= 20)
-            set_mappoint(x, y, CST_TREE);
-        else if (r2 <= 30)
-            set_mappoint(x, y, CST_TREE2);
-        else
-            set_mappoint(x, y, CST_TREE3);
-    } else if (r >= -40) {
-        /* forest */
-        int r2 = rand() % 40;
-        if (r2 <= 5)
-            set_mappoint(x, y, CST_GREEN);
-        else if (r2 <= 10)
-            set_mappoint(x, y, CST_TREE);
-        else if (r2 <= 25)
-            set_mappoint(x, y, CST_TREE2);
-        else
-            set_mappoint(x, y, CST_TREE3);
-    } else if (r >= -80) {
-        int r2 = rand() % 40;
-        if (r2 <= 0)
-            MP_TYPE(x, y) = CST_WATER;
-        else if (r2 <= 6)
-            set_mappoint(x, y, CST_GREEN);
-        else if (r2 <= 15)
-            set_mappoint(x, y, CST_TREE);
-        else if (r2 <= 28)
-            set_mappoint(x, y, CST_TREE2);
-        else
-            set_mappoint(x, y, CST_TREE3);
-    } else if (r >= -120) {
-        int r2 = rand() % 40;
-        if (r2 <= 1)
-            MP_TYPE(x, y) = CST_WATER;
-        else if (r2 <= 6)
-            set_mappoint(x, y, CST_GREEN);
-        else if (r2 <= 16)
-            set_mappoint(x, y, CST_TREE);
-        else if (r2 <= 30)
-            set_mappoint(x, y, CST_TREE2);
-        else
-            set_mappoint(x, y, CST_TREE3);
-    } else {
-        /* wetland */
-        int r2 = rand() % 40;
-        if (r2 <= 3)
-            MP_TYPE(x, y) = CST_WATER;
-        else if (r2 <= 8)
-            set_mappoint(x, y, CST_GREEN);
-        else if (r2 <= 20)
-            set_mappoint(x, y, CST_TREE);
-        else if (r2 <= 35)
-            set_mappoint(x, y, CST_TREE2);
-        else
-            set_mappoint(x, y, CST_TREE3);
-    }
-
-}
-
 static void sustainability_test(void)
 {
     int i;

Modified: trunk/src/lincity/simulate.h
===================================================================
--- trunk/src/lincity/simulate.h	2009-11-22 20:46:57 UTC (rev 1559)
+++ trunk/src/lincity/simulate.h	2010-01-23 16:46:46 UTC (rev 1560)
@@ -10,7 +10,6 @@
 int count_groups(int gr);
 void count_all_groups(int *group_count);
 void set_mappoint(int x, int y, short selected_type);
-void do_rand_ecology(int x, int y);
 
 extern void connect_rivers(void);
 



From alainb at mail.berlios.de  Sun Jan 24 21:26:45 2010
From: alainb at mail.berlios.de (alainb at BerliOS)
Date: Sun, 24 Jan 2010 21:26:45 +0100
Subject: [Lincity-ng-commit] r1561 - trunk/src/lincity
Message-ID: <201001242026.o0OKQjr4015237@sheep.berlios.de>

Author: alainb
Date: 2010-01-24 21:26:45 +0100 (Sun, 24 Jan 2010)
New Revision: 1561

Modified:
   trunk/src/lincity/init_game.cpp
Log:
experimental lake filling in progress (not high enought)

Modified: trunk/src/lincity/init_game.cpp
===================================================================
--- trunk/src/lincity/init_game.cpp	2010-01-23 16:46:46 UTC (rev 1560)
+++ trunk/src/lincity/init_game.cpp	2010-01-24 20:26:45 UTC (rev 1561)
@@ -31,6 +31,13 @@
 
 #define IS_RIVER(x,y) (MP_INFO(x,y).flags & FLAG_IS_RIVER)
 
+struct Shoreline {
+        int x;
+        int y;
+        int altitude;
+        struct Shoreline *next;
+};
+
 /* Vector for visiting neigbours = ( di(k) , dj(k) )  ; ordered so that diagonal moves are the last 4 */
 static const int di[8] = { -1, 0, 1, 0, 1, 1, -1, -1};
 static const int dj[8] = { 0, -1, 0, 1, 1, -1, 1, -1};
@@ -49,9 +56,11 @@
 static void new_setup_river_ground(void);
 static void new_setup_river(void);
 static void sort_by_altitude(int n, int *tabx, int *taby);
-static void new_setup_one_river(int num_river, int c, int *colx, int *coly, int t, int *topx, int *topy, int l, int *lakx, int *laky);
+static void new_setup_one_river(int x, int y);
 static void set_river_tile( int i, int j);
 static void do_rand_ecology(int x, int y);
+void init_list(Shoreline * list);
+void overfill_lake(int xl, int yl, Shoreline *shore);
 
 
 /* ---------------------------------------------------------------------- *
@@ -168,7 +177,8 @@
     clear_game();
     coal_reserve_setup();
 
-    global_mountainity= 100 + rand () % 300; // roughly water slope = 25m / 1km (=from N to S)
+    //global_mountainity= 100 + rand () % 300; // roughly water slope = 25m / 1km (=from N to S)
+    global_mountainity = 200; //  nearly useless to have a random one (only impacts do_rand_ecology through ALT(x,y))
     if (old_setup_ground) {
         setup_river();
         setup_ground();
@@ -380,8 +390,10 @@
     norm = 1. / norm;
 
    // intialisation
-#ifdef DEBUG
-    fprintf(stderr," mountainity = %i \n", global_mountainity);
+#define DEBUG_EXPERIMENTAL
+#ifdef DEBUG_EXPERIMENTAL
+    // Fix random seed for easier debug
+    srand(1234);
 #endif
     h = ( rand() % Keco + rand() % Keco ) * global_mountainity ;
     for (i = 0; i < SZ; i++) {
@@ -503,14 +515,22 @@
     int lakx[WORLD_SIDE_LEN * WORLD_SIDE_LEN], laky[WORLD_SIDE_LEN * WORLD_SIDE_LEN];
     int parax[WORLD_SIDE_LEN * WORLD_SIDE_LEN], paray[WORLD_SIDE_LEN * WORLD_SIDE_LEN];
 
+    Shoreline *shore;
     int i, j, c, t, l, p;
 
+    shore = (Shoreline *) malloc(sizeof(struct Shoreline));
+    shore->x = (int) malloc(sizeof(int));
+    shore->y = (int) malloc(sizeof(int));
+    shore->altitude = (int) malloc(sizeof(int));
+    shore->next = (Shoreline *) malloc(sizeof(struct Shoreline));
 
+/*
     // Put lakes/seas in the lowest part of the map
     for ( i = 0; i < WORLD_SIDE_LEN; i++)
         for ( j = 0; j < WORLD_SIDE_LEN; j++)
             if (ALT(i,j) < 2 * alt_step)
                 set_river_tile(i,j);
+*/
 
     // Put the gray border (not visible) at alt_min, for easier rivers handling.
     for ( i = 0; i < WORLD_SIDE_LEN; i++) {
@@ -624,12 +644,131 @@
     fprintf(stderr," #para p = %i\n\n", p);
 #endif
 
+    sort_by_altitude(t, topx, topy);
+    sort_by_altitude(c, colx, coly);
+    sort_by_altitude(l, lakx, laky);
+
     // put one river from each top.
-    sort_by_altitude(t, topx, topy);
-    for (i = 0; i < t; i++)
-        new_setup_one_river(i, c, colx, coly, t, topx, topy, l, lakx, laky);
+    //for (i = 0; i < t; i++)
+    //    new_setup_one_river_from_top(i, t, topx, topy);
+
+    // fill lake until it overfills and creates a river
+    for (i = l-1 ; i >= 0; i--) {
+        fprintf(stdout, "\nLAKE %i\n", i);
+        init_list(shore);
+        set_river_tile(lakx[i], laky[i]);
+        overfill_lake(lakx[i], laky[i], shore);
+	//free_list(shore);
+    }
 }
 
+void init_list(Shoreline * list)
+{
+	list->x = -1;
+	list->y = -1;
+	list->altitude = -1;
+	list->next = NULL;
+}
+
+void add_shore_point(Shoreline * current, int x, int y, int altitude)
+{
+  Shoreline *newp;
+  newp = (Shoreline *) malloc(sizeof(struct Shoreline));
+            newp->x = (int) malloc(sizeof(int));
+            newp->y = (int) malloc(sizeof(int));
+            newp->altitude = (int) malloc(sizeof(int));
+            newp->next = (Shoreline *) malloc(sizeof(struct Shoreline));
+            newp->x = x;
+            newp->y = y;
+            newp->altitude = altitude;
+            newp->next = current->next;
+            current->next = newp;
+}
+
+void free_first_elem_list(Shoreline * list)
+{
+}
+
+void insert_shore_point(int x, int y, Shoreline *shore)
+{
+    Shoreline *current, *newp;
+    int a;
+    current = shore;
+    a = ALT(x,y);
+
+    while (current->next != NULL) {
+        if (a < current->next->altitude) {
+            // insert in beginning of the list
+            //fprintf(stderr, " beginning point\n");
+            add_shore_point(current, x, y, a);
+            return;
+        } else if (a == current->altitude) {
+            while (current->altitude == a) {
+                if ((current->x == x) && (current->y == y)) {
+                    // do not insert the same shore point several times at different places in the list !
+                    return;
+                };
+                if (current->next == NULL)
+                    break;
+                else
+                    current = current->next;
+            };
+            //insert the shore point in the list
+            //fprintf(stderr, " same alt point shore = %i\n", shore);
+            add_shore_point(current, x, y, a);
+            return;
+        };
+        current = current->next;
+    };
+    // we reached end of list, just add the point.
+    //fprintf(stderr, " append point shore = %i\n", shore);
+    add_shore_point(current, x, y, a);
+}
+
+static int in_map(int x, int y) {
+    return ( (x >= 0) && (x < WORLD_SIDE_LEN) && (y>=0) && (y< WORLD_SIDE_LEN) );
+}
+
+void overfill_lake(int xl, int yl, Shoreline *shore)
+{
+    // Starting point is a local minimum
+    // Lake growth is done iteratively by flooding the lowest shore point and rising water level
+    // shore point = neighbour without water (at this point we have no water in the map, except other lakes and rivers)
+    //
+    // We have a list of shore points sorted by altitude
+
+    int x, y, i, level;
+
+    x = xl;
+    y = yl;
+    level = ALT(x,y);
+    fprintf(stdout,"    x = %i, y = %i; level = %i\n", xl, yl, level);
+
+    // find neighbours
+    for (i = 0; i < 8; i++) {
+        //fprintf(stdout, " x+dx = %i; y + dy = %i, IS_WATER = %i\n", x + di[i], y + dj[i], XY_IS_WATER(x + di[i], y + dj[i]) );
+        if ( in_map(x + di[i], y + dj[i]) && !XY_IS_WATER(x + di[i], y + dj[i]) )
+            insert_shore_point(x + di[i], y + dj[i], shore);
+    }
+
+    if ( (shore->next != NULL) && (ALT(shore->next->x, shore->next->y) < level) ) {
+        // we found a pass
+        fprintf(stdout, "found a pass x %i, y %i, alt %i \n", x, y, ALT(x,y));
+        new_setup_one_river(shore->x, shore->y);
+        //TODO free_shore()
+        return;
+    }
+    // we did not found a pass, so flood the point and go to net lowest;
+    // TODO free first point
+    shore = shore->next;
+    x = shore->x;
+    y = shore->y;
+    set_river_tile(x,y);
+    overfill_lake(x, y, shore);
+
+
+}
+
 static void set_river_tile( int i, int j)
 {
     MP_TYPE(i, j) = CST_WATER;
@@ -639,6 +778,7 @@
 
 static void sort_by_altitude(int n, int *tabx, int *taby)
 {
+    // sort ascending
     int tmp_x, tmp_y;
     bool sorted = false;
 
@@ -661,9 +801,9 @@
     }
 }
 
-static void new_setup_one_river(int num_river, int c, int *colx, int *coly, int t, int *topx, int *topy, int l, int *lakx, int *laky)
+static void new_setup_one_river_from_top(int num_river, int t, int *topx, int *topy)
 {
-    int x, y, xx, yy, alt, alt_max;
+    int xx, yy;
 
     /* find a place in altitude near top */
     xx = topx[t - num_river] + (1 + rand() % 2) * di[rand() % 8];
@@ -674,6 +814,14 @@
     if ( yy < 0 || yy >= WORLD_SIDE_LEN)
         yy =  topy[t - num_river];
 
+    new_setup_one_river(xx, yy);
+    return;
+}
+
+static void new_setup_one_river( int xx, int yy)
+{
+    int alt_max, x, y, alt;
+    // start a river from point (xx, yy)
     set_river_tile(xx,yy);
     alt_max = ALT(xx, yy);
 
@@ -699,19 +847,10 @@
             else
                 set_river_tile(x + di[m], y);
         }
-    } while ( (xx != x) || (yy != y) );
-    // We are in a local minimum
+    } while ( ((xx != x) || (yy != y)) && (xx != 0) && (xx != (WORLD_SIDE_LEN - 1)) && (yy != 0) && (yy == WORLD_SIDE_LEN - 1) );
+    // We are in a local minimum or at the borders of the map (strictly the lowest points)
+    return;
 
-    if ( x == 0 || x == WORLD_SIDE_LEN - 1 || y == 0 || y == WORLD_SIDE_LEN - 1) {
-        // borders of the map are strictly the lowest points
-        return;
-    }
-
-    // TODO connect lakes to outside of the map
-    // make a small lake
-    sort_by_altitude(c, colx, coly);
-    sort_by_altitude(l, lakx, laky);
-
 }
 
 static void setup_river(void)



From alainb at mail.berlios.de  Mon Jan 25 00:13:42 2010
From: alainb at mail.berlios.de (alainb at BerliOS)
Date: Mon, 25 Jan 2010 00:13:42 +0100
Subject: [Lincity-ng-commit] r1562 - trunk/src/lincity
Message-ID: <201001242313.o0ONDgGx031827@sheep.berlios.de>

Author: alainb
Date: 2010-01-25 00:13:42 +0100 (Mon, 25 Jan 2010)
New Revision: 1562

Modified:
   trunk/src/lincity/init_game.cpp
Log:
experimental land: fix stupid mistake, and simplify lake initialisation
  Still not complete

Modified: trunk/src/lincity/init_game.cpp
===================================================================
--- trunk/src/lincity/init_game.cpp	2010-01-24 20:26:45 UTC (rev 1561)
+++ trunk/src/lincity/init_game.cpp	2010-01-24 23:13:42 UTC (rev 1562)
@@ -13,6 +13,8 @@
 //  - start a random village (or a  void map)
 //
 
+//#define DEBUG_EXPERIMENTAL
+
 #include <math.h>
 #include <cstdlib>
 #include "init_game.h"
@@ -56,11 +58,11 @@
 static void new_setup_river_ground(void);
 static void new_setup_river(void);
 static void sort_by_altitude(int n, int *tabx, int *taby);
-static void new_setup_one_river(int x, int y);
+static int new_setup_one_river(int x, int y, int lake_id);
 static void set_river_tile( int i, int j);
 static void do_rand_ecology(int x, int y);
 void init_list(Shoreline * list);
-void overfill_lake(int xl, int yl, Shoreline *shore);
+void overfill_lake(int xl, int yl, Shoreline *shore, int lake_id);
 
 
 /* ---------------------------------------------------------------------- *
@@ -390,7 +392,6 @@
     norm = 1. / norm;
 
    // intialisation
-#define DEBUG_EXPERIMENTAL
 #ifdef DEBUG_EXPERIMENTAL
     // Fix random seed for easier debug
     srand(1234);
@@ -505,18 +506,11 @@
 
 void new_setup_river(void)
 {
+    // brute search of local minimum
 
-#ifdef DEBUG
-    #define DEBUG_LAND
-#endif
-
-    int colx[WORLD_SIDE_LEN * WORLD_SIDE_LEN], coly[WORLD_SIDE_LEN * WORLD_SIDE_LEN];
-    int topx[WORLD_SIDE_LEN * WORLD_SIDE_LEN], topy[WORLD_SIDE_LEN * WORLD_SIDE_LEN];
     int lakx[WORLD_SIDE_LEN * WORLD_SIDE_LEN], laky[WORLD_SIDE_LEN * WORLD_SIDE_LEN];
-    int parax[WORLD_SIDE_LEN * WORLD_SIDE_LEN], paray[WORLD_SIDE_LEN * WORLD_SIDE_LEN];
-
     Shoreline *shore;
-    int i, j, c, t, l, p;
+    int i, j, l, m , alt;
 
     shore = (Shoreline *) malloc(sizeof(struct Shoreline));
     shore->x = (int) malloc(sizeof(int));
@@ -524,140 +518,37 @@
     shore->altitude = (int) malloc(sizeof(int));
     shore->next = (Shoreline *) malloc(sizeof(struct Shoreline));
 
-/*
-    // Put lakes/seas in the lowest part of the map
-    for ( i = 0; i < WORLD_SIDE_LEN; i++)
-        for ( j = 0; j < WORLD_SIDE_LEN; j++)
-            if (ALT(i,j) < 2 * alt_step)
-                set_river_tile(i,j);
-*/
-
-    // Put the gray border (not visible) at alt_min, for easier rivers handling.
+    // Put the gray border (not visible) at alt_min - 1, for easier rivers handling.
     for ( i = 0; i < WORLD_SIDE_LEN; i++) {
-        ALT(i, 0) = alt_min;
-        ALT(i, WORLD_SIDE_LEN - 1) = alt_min;
-        ALT(0, i) = alt_min;
-        ALT(WORLD_SIDE_LEN - 1, i) = alt_min;
+        ALT(i, 0) = alt_min - 1;
+        ALT(i, WORLD_SIDE_LEN - 1) = alt_min - 1;
+        ALT(0, i) = alt_min - 1;
+        ALT(WORLD_SIDE_LEN - 1, i) = alt_min - 1;
     }
 
-    // Hessian = second order derivatives in visible map
-    // => know curvature, local max, min, saddle points and find col (mountain pass)
-    c = 0;
     l = 0;
-    t = 0;
-    p = 0;
-    for ( i = 1; i < WORLD_SIDE_LEN - 1 ; i++)
+    for ( i = 1; i < WORLD_SIDE_LEN - 1 ; i++) {
         for ( j = 1; j < WORLD_SIDE_LEN - 1 ; j++) {
-            float e1, e2;
-            float dx2, dy2, dxy, dyx, delta;
-
-            /* with a centered discrete scheme we have :
-             *      d f     f(x + dx) - f(x - dx)
-             *     ----- = ----------------------
-             *       dx           2 . dx
-             *
-             * notation	dx2 = d?( ALT(x,y) )/ dx?  ;  second partial derivative of ALT wrt x and x (twice :)
-             *  		dxy = d?( ALT(x,y) )/dx.dy ;  second partial derivative of ALT wrt x and y
-             *
-             * On our grid we have dx = 1, dy = 1;
-             */
-
-            dx2 = float (ALT(i + 2, j) + ALT(i - 2, j) - 2 * ALT(i,j)) * 0.25;
-            dy2 = float (ALT(i, j + 2) + ALT(i, j - 2) - 2 * ALT(i,j)) * 0.25;
-            dxy = float ( (ALT(i + 1, j + 1) + ALT(i - 1, j - 1) - ALT(i + 1, j - 1) - ALT(i - 1, j + 1)) ) * 0.25;
-            dyx = dxy;
-
-            // e1 e2 are the eigenvalues of Hessian, ie solutions of:
-            // X^2 - (dx2 + dy2).X + dx2.dy2 - dxy.dyx = 0     (wrt X)
-            delta =  (dx2 + dy2)*(dx2 + dy2) - 4 * (dx2 * dy2 - dxy * dyx);
-            e1 = (dx2 + dy2) + sqrt(delta);
-            e2 = (dx2 + dy2) - sqrt(delta);
-
-            if (e1 * e2 < 0) {
-                // saddle point = mountain pass  _IF_ tangent plane is _nearly_ horizontal !
-                //  ie    d ALT / dx = 0 and  d ALT / dy = 0
-                //  as we have discrete scheme, we cannot reach = 0, but instead norm_of_gradient < epsilon
-                float norm = float ( (ALT(i+1, j) - ALT(i-1, j)) * (ALT(i+1, j) - ALT(i-1, j))
-                                    + (ALT(i, j+1) - ALT(i, j-1)) * (ALT(i, j+1) - ALT(i, j-1)) ) * 0.25;
-                if ( norm < (float( alt_step) / 10.)) {
-                    colx[c] = i;
-                    coly[c] = j;
-                   c++;
-#ifdef DEBUG_LAND
-                    fprintf(stderr,"alt_step %i mountain pass : x %i, y %i, norm %f\n", alt_step, i, j, norm);
-                    if (GROUP_IS_BARE(MP_GROUP(i,j)))
-                        set_mappoint(i,j, CST_ROAD_LR);  //XXX AL1: why is there a segfault if we use CST_POWERL_H_D ?
-#endif
+            alt = ALT(i,j);
+            m = -1;
+            for (int n = 0; n < 8; n++) {
+                if (ALT(i + di[n], j + dj[n]) < alt) {
+                    m = n;
                 }
-
-
-            } else if (e1 * e2 != 0) {
-                if ( e1 < 0) {
-                    // local top
-                    if (  ALT(i + 1,j) < ALT(i,j) && ALT(i - 1,j) < ALT(i,j) &&
-                            ALT(i,j + 1) < ALT(i,j) && ALT(i,j - 1) < ALT(i,j)  )  {
-
-                        topx[t] = i;
-                        topy[t] = j;
-                        t++;
-#ifdef DEBUG_LAND
-                        if (GROUP_IS_BARE(MP_GROUP(i,j)))
-                            set_mappoint(i,j, CST_FIRE_1);
-#endif
-                    }
-                } else {
-                    // local min = potential lake => has water.
-                    if (  ALT(i + 1,j) > ALT(i,j) && ALT(i - 1,j) > ALT(i,j) &&
-                            ALT(i,j + 1) > ALT(i,j) && ALT(i,j - 1) > ALT(i,j)  )  {
-
-                        lakx[l] = i;
-                        laky[l] = j;
-                        l++;
-                        MP_INFO(i,j).flags |= (FLAG_HAS_UNDERGROUND_WATER);
-                        if (GROUP_IS_BARE(MP_GROUP(i,j))) {
-                            MP_INFO(i,j).flags |= (FLAG_HAS_UNDERGROUND_WATER + FLAG_IS_RIVER);
-#ifdef DEBUG_LAND
-                            fprintf(stderr,"local minimum : x %i, y %i\n", i, j);
-                            set_mappoint(i,j, CST_PARKLAND_LAKE);
-#endif
-                        }
-                    }
-                }
-            } else {
-                // parabolic point
-#ifdef DEBUG_LAND
-                parax[p] = i;
-                paray[p] = j;
-                p++;
-                if (GROUP_IS_BARE(MP_GROUP(i,j)))
-                    set_mappoint(i,j, CST_RAIL_LR);
-#endif
             }
-
-
+            if (m == -1) {
+                lakx[l] = i;
+                laky[l] = j;
+                l++;
+            }
         }
-
-#ifdef DEBUG_LAND
-    fprintf(stderr,"\n #pass c = %i\n", c);
-    fprintf(stderr," #top t = %i\n", t);
-    fprintf(stderr," #lak l = %i\n", l);
-    fprintf(stderr," #para p = %i\n\n", p);
-#endif
-
-    sort_by_altitude(t, topx, topy);
-    sort_by_altitude(c, colx, coly);
-    sort_by_altitude(l, lakx, laky);
-
-    // put one river from each top.
-    //for (i = 0; i < t; i++)
-    //    new_setup_one_river_from_top(i, t, topx, topy);
-
+    }
     // fill lake until it overfills and creates a river
     for (i = l-1 ; i >= 0; i--) {
         fprintf(stdout, "\nLAKE %i\n", i);
         init_list(shore);
         set_river_tile(lakx[i], laky[i]);
-        overfill_lake(lakx[i], laky[i], shore);
+        overfill_lake(lakx[i], laky[i], shore, WORLD_SIDE_LEN * lakx[i] + laky[i] );
 	//free_list(shore);
     }
 }
@@ -691,7 +582,7 @@
 
 void insert_shore_point(int x, int y, Shoreline *shore)
 {
-    Shoreline *current, *newp;
+    Shoreline *current;
     int a;
     current = shore;
     a = ALT(x,y);
@@ -729,7 +620,7 @@
     return ( (x >= 0) && (x < WORLD_SIDE_LEN) && (y>=0) && (y< WORLD_SIDE_LEN) );
 }
 
-void overfill_lake(int xl, int yl, Shoreline *shore)
+void overfill_lake(int xl, int yl, Shoreline *shore, int lake_id)
 {
     // Starting point is a local minimum
     // Lake growth is done iteratively by flooding the lowest shore point and rising water level
@@ -737,7 +628,7 @@
     //
     // We have a list of shore points sorted by altitude
 
-    int x, y, i, level;
+    int x, y, i, level, really_new;
 
     x = xl;
     y = yl;
@@ -752,21 +643,29 @@
     }
 
     if ( (shore->next != NULL) && (ALT(shore->next->x, shore->next->y) < level) ) {
-        // we found a pass
-        fprintf(stdout, "found a pass x %i, y %i, alt %i \n", x, y, ALT(x,y));
-        new_setup_one_river(shore->x, shore->y);
-        //TODO free_shore()
-        return;
+        really_new = new_setup_one_river(shore->x, shore->y, lake_id);
+        if (really_new == 1) {
+            //TODO free_shore()
+            fprintf(stdout, "We found a pass x %i, y %i, alt %i \n", x, y, ALT(x,y));
+            return;
+        }
+        // else the river brougth us back in our lake, so we need to fill it more
     }
     // we did not found a pass, so flood the point and go to net lowest;
-    // TODO free first point
-    shore = shore->next;
-    x = shore->x;
-    y = shore->y;
-    set_river_tile(x,y);
-    overfill_lake(x, y, shore);
 
+    if (shore->next != NULL) {
+        // TODO free first point
+        shore = shore->next;
+        x = shore->x;
+        y = shore->y;
+        set_river_tile(x,y);
+        overfill_lake(x, y, shore, lake_id);
+    } else {
+        fprintf(stderr,"we have a problem the shoreline list is empty\n");
+        //exit(0);
+    }
 
+
 }
 
 static void set_river_tile( int i, int j)
@@ -814,17 +713,19 @@
     if ( yy < 0 || yy >= WORLD_SIDE_LEN)
         yy =  topy[t - num_river];
 
-    new_setup_one_river(xx, yy);
+    new_setup_one_river(xx, yy, 0);
     return;
 }
 
-static void new_setup_one_river( int xx, int yy)
+static int new_setup_one_river( int xx, int yy, int lake_id)
 {
-    int alt_max, x, y, alt;
+    int alt_max, x, y, alt, x0, y0;
     // start a river from point (xx, yy)
     set_river_tile(xx,yy);
     alt_max = ALT(xx, yy);
 
+    x0=xx;
+    y0 = yy;
     /* follow most important slope and go downward */
     do {
         int m = 0;
@@ -847,10 +748,20 @@
             else
                 set_river_tile(x + di[m], y);
         }
-    } while ( ((xx != x) || (yy != y)) && (xx != 0) && (xx != (WORLD_SIDE_LEN - 1)) && (yy != 0) && (yy == WORLD_SIDE_LEN - 1) );
+    } while ( ((xx != x) || (yy != y)) && (xx != 0) && (xx != (WORLD_SIDE_LEN - 1)) && (yy != 0) && (yy != WORLD_SIDE_LEN - 1) );
     // We are in a local minimum or at the borders of the map (strictly the lowest points)
-    return;
 
+    // Check if we are lower than the bottom of the lake we are trying to overfill
+    x = lake_id / WORLD_SIDE_LEN;
+    y = lake_id % WORLD_SIDE_LEN;
+
+    fprintf(stdout, "lake_id %i, here %i, started from %i %i\n", lake_id,  WORLD_SIDE_LEN * xx + yy, x0, y0);
+    //if ( alt < ALT(x,y))
+    if (lake_id == WORLD_SIDE_LEN * xx + yy)
+        return 0;
+    else
+        return 1;
+
 }
 
 static void setup_river(void)



From alainb at mail.berlios.de  Mon Jan 25 19:58:43 2010
From: alainb at mail.berlios.de (alainb at BerliOS)
Date: Mon, 25 Jan 2010 19:58:43 +0100
Subject: [Lincity-ng-commit] r1563 - trunk/src/lincity
Message-ID: <201001251858.o0PIwhxT020736@sheep.berlios.de>

Author: alainb
Date: 2010-01-25 19:58:43 +0100 (Mon, 25 Jan 2010)
New Revision: 1563

Modified:
   trunk/src/lincity/init_game.cpp
Log:
new land: first running version (may be buggy)

Modified: trunk/src/lincity/init_game.cpp
===================================================================
--- trunk/src/lincity/init_game.cpp	2010-01-24 23:13:42 UTC (rev 1562)
+++ trunk/src/lincity/init_game.cpp	2010-01-25 18:58:43 UTC (rev 1563)
@@ -58,10 +58,10 @@
 static void new_setup_river_ground(void);
 static void new_setup_river(void);
 static void sort_by_altitude(int n, int *tabx, int *taby);
-static int new_setup_one_river(int x, int y, int lake_id);
+static int new_setup_one_river(int x, int y, int lake_id, Shoreline *shore);
 static void set_river_tile( int i, int j);
 static void do_rand_ecology(int x, int y);
-void init_list(Shoreline * list);
+void init_shore(Shoreline * list);
 void overfill_lake(int xl, int yl, Shoreline *shore, int lake_id);
 
 
@@ -546,14 +546,14 @@
     // fill lake until it overfills and creates a river
     for (i = l-1 ; i >= 0; i--) {
         fprintf(stdout, "\nLAKE %i\n", i);
-        init_list(shore);
+        init_shore(shore);
         set_river_tile(lakx[i], laky[i]);
         overfill_lake(lakx[i], laky[i], shore, WORLD_SIDE_LEN * lakx[i] + laky[i] );
 	//free_list(shore);
     }
 }
 
-void init_list(Shoreline * list)
+void init_shore(Shoreline * list)
 {
 	list->x = -1;
 	list->y = -1;
@@ -580,7 +580,7 @@
 {
 }
 
-void insert_shore_point(int x, int y, Shoreline *shore)
+void try_shore_point(int x, int y, Shoreline *shore)
 {
     Shoreline *current;
     int a;
@@ -590,82 +590,87 @@
     while (current->next != NULL) {
         if (a < current->next->altitude) {
             // insert in beginning of the list
-            //fprintf(stderr, " beginning point\n");
+            fprintf(stderr, " beginning point shore = %i, x %i, y %i, a %i\n", shore, x, y, a);
             add_shore_point(current, x, y, a);
             return;
-        } else if (a == current->altitude) {
-            while (current->altitude == a) {
+        } else if (a == current->next->altitude) {
+            int count = 0;
+            while ((current->next != NULL) && (current->next->altitude == a)) {
                 if ((current->x == x) && (current->y == y)) {
                     // do not insert the same shore point several times at different places in the list !
                     return;
                 };
-                if (current->next == NULL)
-                    break;
-                else
-                    current = current->next;
+                current = current->next;
             };
             //insert the shore point in the list
-            //fprintf(stderr, " same alt point shore = %i\n", shore);
+            fprintf(stderr, " same alt point shore = %i, x %i, y %i\n", shore, x, y, a);
             add_shore_point(current, x, y, a);
             return;
         };
         current = current->next;
     };
-    // we reached end of list, just add the point.
-    //fprintf(stderr, " append point shore = %i\n", shore);
-    add_shore_point(current, x, y, a);
+    // we reached end of list
+    // altitude of the point is strict maximum of the list
+    fprintf(stderr, " append point shore = %i, x %i, y %i, a %i\n", shore, x, y, a);
+    if ((current->x != x) && (current->y != y))
+        add_shore_point(current, x, y, a);
 }
 
 static int in_map(int x, int y) {
     return ( (x >= 0) && (x < WORLD_SIDE_LEN) && (y>=0) && (y< WORLD_SIDE_LEN) );
 }
 
-void overfill_lake(int xl, int yl, Shoreline *shore, int lake_id)
+static int is_border( int x, int y)
 {
+    if ( (x == 0) || (x == (WORLD_SIDE_LEN - 1)) || (y == 0) || (y == (WORLD_SIDE_LEN -1)))
+        return 1;
+    else
+        return 0;
+}
+
+void overfill_lake(int x, int y, Shoreline *shore, int lake_id)
+{
     // Starting point is a local minimum
     // Lake growth is done iteratively by flooding the lowest shore point and rising water level
     // shore point = neighbour without water (at this point we have no water in the map, except other lakes and rivers)
     //
     // We have a list of shore points sorted by altitude
 
-    int x, y, i, level, really_new;
+    int i, level;
 
-    x = xl;
-    y = yl;
+    if ( is_border(x,y) )
+        return;
+
+    set_river_tile(x,y);
     level = ALT(x,y);
-    fprintf(stdout,"    x = %i, y = %i; level = %i\n", xl, yl, level);
+    fprintf(stdout,"    x = %i, y = %i; level = %i\n", x, y, level);
 
     // find neighbours
     for (i = 0; i < 8; i++) {
-        //fprintf(stdout, " x+dx = %i; y + dy = %i, IS_WATER = %i\n", x + di[i], y + dj[i], XY_IS_WATER(x + di[i], y + dj[i]) );
         if ( in_map(x + di[i], y + dj[i]) && !XY_IS_WATER(x + di[i], y + dj[i]) )
-            insert_shore_point(x + di[i], y + dj[i], shore);
+            try_shore_point(x + di[i], y + dj[i], shore);
     }
 
-    if ( (shore->next != NULL) && (ALT(shore->next->x, shore->next->y) < level) ) {
-        really_new = new_setup_one_river(shore->x, shore->y, lake_id);
-        if (really_new == 1) {
-            //TODO free_shore()
-            fprintf(stdout, "We found a pass x %i, y %i, alt %i \n", x, y, ALT(x,y));
-            return;
-        }
-        // else the river brougth us back in our lake, so we need to fill it more
-    }
-    // we did not found a pass, so flood the point and go to net lowest;
-
     if (shore->next != NULL) {
-        // TODO free first point
         shore = shore->next;
         x = shore->x;
         y = shore->y;
-        set_river_tile(x,y);
+
+        if ( (ALT(x, y) < level) ) {
+            set_river_tile(x,y);
+            // create river and continue to build shoreline
+            // we will continue to overfill (from a lower point) until we reach border of the map
+            fprintf(stdout, "We found a pass x %i, y %i, alt %i \n", x, y, ALT(x,y));
+            new_setup_one_river(x, y, lake_id, shore);
+        }
         overfill_lake(x, y, shore, lake_id);
     } else {
-        fprintf(stderr,"we have a problem the shoreline list is empty\n");
+        // Q: ? Should this happen ?
+        // A: yes if we are in a lake that was previously filled by a higher one which overfilled here
+        //    else ? it should not happen ?
+        fprintf(stderr,"we have a problem the shoreline list is empty, x = %i, y = %i\n", x, y);
         //exit(0);
     }
-
-
 }
 
 static void set_river_tile( int i, int j)
@@ -703,7 +708,16 @@
 static void new_setup_one_river_from_top(int num_river, int t, int *topx, int *topy)
 {
     int xx, yy;
+    Shoreline *shore;
 
+    shore = (Shoreline *) malloc(sizeof(struct Shoreline));
+    shore->x = (int) malloc(sizeof(int));
+    shore->y = (int) malloc(sizeof(int));
+    shore->altitude = (int) malloc(sizeof(int));
+    shore->next = (Shoreline *) malloc(sizeof(struct Shoreline));
+
+    init_shore(shore);
+
     /* find a place in altitude near top */
     xx = topx[t - num_river] + (1 + rand() % 2) * di[rand() % 8];
     yy = topy[t - num_river] + (1 + rand() % 2) * dj[rand() % 8];
@@ -713,11 +727,11 @@
     if ( yy < 0 || yy >= WORLD_SIDE_LEN)
         yy =  topy[t - num_river];
 
-    new_setup_one_river(xx, yy, 0);
+    new_setup_one_river(xx, yy, 0, shore);
     return;
 }
 
-static int new_setup_one_river( int xx, int yy, int lake_id)
+static int new_setup_one_river( int xx, int yy, int lake_id, Shoreline *shore)
 {
     int alt_max, x, y, alt, x0, y0;
     // start a river from point (xx, yy)
@@ -733,13 +747,20 @@
         y = yy;
         alt = ALT(x,y);
         for (int n = 0; n < 8; n++) {
-            if (ALT(x + di[n], y + dj[n]) < alt) {
-                xx = x + di[n];
-                yy = y + dj[n];
-                alt = ALT(xx, yy);
-                m = n;
+            if ( in_map(x + di[n], y + dj[n]) ) {
+                if (ALT(x + di[n], y + dj[n]) < alt) {
+                    xx = x + di[n];
+                    yy = y + dj[n];
+                    alt = ALT(xx, yy);
+                    m = n;
+                }
+                // find neighbours and update shore line if needed
+                // may mark as shoreline a point which will be set as river later. We don't care
+                if ( !XY_IS_WATER(x + di[n], y + dj[n]) )
+                    try_shore_point(x + di[n], y + dj[n], shore);
             }
         }
+
         set_river_tile(xx,yy);
         if (m>3) {
             // we did diagonal move, so we need to connect river



From alainb at mail.berlios.de  Mon Jan 25 21:52:56 2010
From: alainb at mail.berlios.de (alainb at BerliOS)
Date: Mon, 25 Jan 2010 21:52:56 +0100
Subject: [Lincity-ng-commit] r1564 - trunk/src/lincity
Message-ID: <201001252052.o0PKquqO031489@sheep.berlios.de>

Author: alainb
Date: 2010-01-25 21:52:55 +0100 (Mon, 25 Jan 2010)
New Revision: 1564

Modified:
   trunk/src/lincity/init_game.cpp
Log:
experimental land: code cleanup

Modified: trunk/src/lincity/init_game.cpp
===================================================================
--- trunk/src/lincity/init_game.cpp	2010-01-25 18:58:43 UTC (rev 1563)
+++ trunk/src/lincity/init_game.cpp	2010-01-25 20:52:55 UTC (rev 1564)
@@ -61,7 +61,8 @@
 static int new_setup_one_river(int x, int y, int lake_id, Shoreline *shore);
 static void set_river_tile( int i, int j);
 static void do_rand_ecology(int x, int y);
-void init_shore(Shoreline * list);
+Shoreline * init_shore(void);
+void free_shore(Shoreline *shore);
 void overfill_lake(int xl, int yl, Shoreline *shore, int lake_id);
 
 
@@ -179,8 +180,8 @@
     clear_game();
     coal_reserve_setup();
 
-    //global_mountainity= 100 + rand () % 300; // roughly water slope = 25m / 1km (=from N to S)
-    global_mountainity = 200; //  nearly useless to have a random one (only impacts do_rand_ecology through ALT(x,y))
+    global_mountainity= 100 + rand () % 300; // roughly water slope = 25m / 1km (=from N to S)
+    //global_mountainity = 200; //  nearly useless to have a random one (only impacts do_rand_ecology through ALT(x,y))
     if (old_setup_ground) {
         setup_river();
         setup_ground();
@@ -216,6 +217,10 @@
 
     global_aridity = aridity;
 
+    if( alt_step == 0 ){
+        printf("alt_step = 0\n");
+        alt_step = 400; // TODO: Why can alt_step be zero here? Quick hack to prevent crash WolfgangB 2008-09-13
+    }
 
     for (y = 0; y < WORLD_SIDE_LEN; y++) {
         for (x = 0; x < WORLD_SIDE_LEN; x++) {
@@ -250,12 +255,8 @@
                     arid = (aridity * 2) / 3;
             }
             /* Altitude has same effect as distance */
-            if( alt_step == 0 ){
-                printf("alt_step = 0\n");
-                 alt_step = 400; // TODO: Why can alt_step be zero here? Quick hack to prevent crash WolfgangB 2008-09-13
-            }
             r = rand() % (d2w_min / 3 + 1) + arid +
-                abs((ALT(x,y) - alt0) * 19 / alt_step) + 3 * (ALT(x,y) * ALT(x,y)) /1000000 ;
+                    abs((ALT(x,y) - alt0) * 19 / alt_step) + 3 * (ALT(x,y) * ALT(x,y)) /1000000 ;
             ground[x][y].ecotable=r;
             /* needed to setup quasi randome land. The flag is set below */
             MP_INFO(x, y).flags |= FLAG_HAS_UNDERGROUND_WATER;
@@ -512,12 +513,6 @@
     Shoreline *shore;
     int i, j, l, m , alt;
 
-    shore = (Shoreline *) malloc(sizeof(struct Shoreline));
-    shore->x = (int) malloc(sizeof(int));
-    shore->y = (int) malloc(sizeof(int));
-    shore->altitude = (int) malloc(sizeof(int));
-    shore->next = (Shoreline *) malloc(sizeof(struct Shoreline));
-
     // Put the gray border (not visible) at alt_min - 1, for easier rivers handling.
     for ( i = 0; i < WORLD_SIDE_LEN; i++) {
         ALT(i, 0) = alt_min - 1;
@@ -546,21 +541,42 @@
     // fill lake until it overfills and creates a river
     for (i = l-1 ; i >= 0; i--) {
         fprintf(stdout, "\nLAKE %i\n", i);
-        init_shore(shore);
+        shore = init_shore();
         set_river_tile(lakx[i], laky[i]);
         overfill_lake(lakx[i], laky[i], shore, WORLD_SIDE_LEN * lakx[i] + laky[i] );
-	//free_list(shore);
+	    free_shore(shore);
     }
 }
 
-void init_shore(Shoreline * list)
+void free_shore(Shoreline *shore)
 {
-	list->x = -1;
-	list->y = -1;
-	list->altitude = -1;
-	list->next = NULL;
+    Shoreline * tmp;
+    while (shore->next != NULL) {
+        tmp = shore;
+        shore = shore->next;
+        free(tmp);
+    }
+    free(shore);
 }
 
+Shoreline * init_shore(void)
+{
+    Shoreline *shore;
+
+    shore = (Shoreline *) malloc(sizeof(struct Shoreline));
+    //shore->x = (int) malloc(sizeof(int));
+    //shore->y = (int) malloc(sizeof(int));
+    //shore->altitude = (int) malloc(sizeof(int));
+    shore->next = (Shoreline *) malloc(sizeof(struct Shoreline));
+
+	shore->x = -1;
+	shore->y = -1;
+	shore->altitude = -1;
+	shore->next = NULL;
+
+    return shore;
+}
+
 void add_shore_point(Shoreline * current, int x, int y, int altitude)
 {
   Shoreline *newp;
@@ -576,10 +592,6 @@
             current->next = newp;
 }
 
-void free_first_elem_list(Shoreline * list)
-{
-}
-
 void try_shore_point(int x, int y, Shoreline *shore)
 {
     Shoreline *current;
@@ -590,11 +602,10 @@
     while (current->next != NULL) {
         if (a < current->next->altitude) {
             // insert in beginning of the list
-            fprintf(stderr, " beginning point shore = %i, x %i, y %i, a %i\n", shore, x, y, a);
+            fprintf(stderr, " beginning point shore = %i, x %i, y %i, a %i\n", (int) shore, x, y, a);
             add_shore_point(current, x, y, a);
             return;
         } else if (a == current->next->altitude) {
-            int count = 0;
             while ((current->next != NULL) && (current->next->altitude == a)) {
                 if ((current->x == x) && (current->y == y)) {
                     // do not insert the same shore point several times at different places in the list !
@@ -603,7 +614,7 @@
                 current = current->next;
             };
             //insert the shore point in the list
-            fprintf(stderr, " same alt point shore = %i, x %i, y %i\n", shore, x, y, a);
+            fprintf(stderr, " same alt point shore = %i, x %i, y %i, a %i\n", (int) shore, x, y, a);
             add_shore_point(current, x, y, a);
             return;
         };
@@ -611,7 +622,7 @@
     };
     // we reached end of list
     // altitude of the point is strict maximum of the list
-    fprintf(stderr, " append point shore = %i, x %i, y %i, a %i\n", shore, x, y, a);
+    fprintf(stderr, " append point shore = %i, x %i, y %i, a %i\n", (int) shore, x, y, a);
     if ((current->x != x) && (current->y != y))
         add_shore_point(current, x, y, a);
 }
@@ -705,32 +716,6 @@
     }
 }
 
-static void new_setup_one_river_from_top(int num_river, int t, int *topx, int *topy)
-{
-    int xx, yy;
-    Shoreline *shore;
-
-    shore = (Shoreline *) malloc(sizeof(struct Shoreline));
-    shore->x = (int) malloc(sizeof(int));
-    shore->y = (int) malloc(sizeof(int));
-    shore->altitude = (int) malloc(sizeof(int));
-    shore->next = (Shoreline *) malloc(sizeof(struct Shoreline));
-
-    init_shore(shore);
-
-    /* find a place in altitude near top */
-    xx = topx[t - num_river] + (1 + rand() % 2) * di[rand() % 8];
-    yy = topy[t - num_river] + (1 + rand() % 2) * dj[rand() % 8];
-    if ( xx < 0 || xx >= WORLD_SIDE_LEN)
-        xx =  topx[t - num_river];
-
-    if ( yy < 0 || yy >= WORLD_SIDE_LEN)
-        yy =  topy[t - num_river];
-
-    new_setup_one_river(xx, yy, 0, shore);
-    return;
-}
-
 static int new_setup_one_river( int xx, int yy, int lake_id, Shoreline *shore)
 {
     int alt_max, x, y, alt, x0, y0;
@@ -777,7 +762,6 @@
     y = lake_id % WORLD_SIDE_LEN;
 
     fprintf(stdout, "lake_id %i, here %i, started from %i %i\n", lake_id,  WORLD_SIDE_LEN * xx + yy, x0, y0);
-    //if ( alt < ALT(x,y))
     if (lake_id == WORLD_SIDE_LEN * xx + yy)
         return 0;
     else



From alainb at mail.berlios.de  Tue Jan 26 15:16:54 2010
From: alainb at mail.berlios.de (alainb at BerliOS)
Date: Tue, 26 Jan 2010 15:16:54 +0100
Subject: [Lincity-ng-commit] r1565 - trunk/src/lincity-ng
Message-ID: <201001261416.o0QEGsqO023556@sheep.berlios.de>

Author: alainb
Date: 2010-01-26 15:16:54 +0100 (Tue, 26 Jan 2010)
New Revision: 1565

Modified:
   trunk/src/lincity-ng/main.cpp
Log:
Display main menu before initilising city (try to suppress initial blac screen

Modified: trunk/src/lincity-ng/main.cpp
===================================================================
--- trunk/src/lincity-ng/main.cpp	2010-01-25 20:52:55 UTC (rev 1564)
+++ trunk/src/lincity-ng/main.cpp	2010-01-26 14:16:54 UTC (rev 1565)
@@ -108,7 +108,7 @@
 
         if(!PHYSFS_setWriteDir(writedir)) {
             std::ostringstream msg;
-            msg << "Failed to use configuration directory '" <<            
+            msg << "Failed to use configuration directory '" <<
                 writedir << "': " << PHYSFS_getLastError();
             delete[] writedir;
             throw std::runtime_error(msg.str());
@@ -127,7 +127,7 @@
     char** rc = PHYSFS_enumerateFiles("/");
     size_t extlen = strlen(archiveExt);
 //TODO sort .zip files! so we are sure which patch is first.
-//and change all file access to physfs. what does PHYSFS_getRealDir 
+//and change all file access to physfs. what does PHYSFS_getRealDir
 //do when file in in archive?
     for(char** i = rc; *i != 0; ++i) {
         size_t l = strlen(*i);
@@ -144,7 +144,7 @@
     }
 
     PHYSFS_freeList(rc);
-            
+
     // when started from source dir...
     std::string dir = PHYSFS_getBaseDir();
     dir += "/data";
@@ -156,7 +156,7 @@
         fclose(f);
         if(!PHYSFS_addToSearchPath(dir.c_str(), 1)) {
 #ifdef DEBUG
-            std::cout << "Warning: Couldn't add '" << dir << 
+            std::cout << "Warning: Couldn't add '" << dir <<
                 "' to physfs searchpath: " << PHYSFS_getLastError() << "\n";
 #endif
         }
@@ -171,7 +171,7 @@
                 error);
         printf ("Will fallback to hardcoded default path.\n");
     }
-    
+
     char* brdatadir = br_find_data_dir("/usr/local/share");
     datadir = brdatadir;
     datadir += "/" PACKAGE_NAME;
@@ -179,7 +179,7 @@
 #else
     datadir = APPDATADIR;
 #endif
-    
+
     if(!PHYSFS_addToSearchPath(datadir.c_str(), 1)) {
         std::cout << "Couldn't add '" << datadir
             << "' to physfs searchpath: " << PHYSFS_getLastError() << "\n";
@@ -189,7 +189,7 @@
     // allow symbolic links
     PHYSFS_permitSymbolicLinks(1);
 
-    //show search Path 
+    //show search Path
     for(char** i = PHYSFS_getSearchPath(); *i != NULL; i++){
         printf("[%s] is in the search path.\n", *i);
     }
@@ -257,9 +257,9 @@
         glOrtho(0, screen->w, screen->h, 0, -1, 1);
 
         glClear(GL_COLOR_BUFFER_BIT);
-    
+
         painter = new PainterGL();
-        std::cout << "OpenGL Mode " << getConfig()->videoX; 
+        std::cout << "OpenGL Mode " << getConfig()->videoX;
         std::cout << "x" << getConfig()->videoY << "\n";
     } else {
         painter = new PainterSDL(screen);
@@ -302,13 +302,13 @@
             case GL_STACK_OVERFLOW:
                 std::cerr << "GL_STACK_OVERFLOW";
                 break;
-            case GL_STACK_UNDERFLOW: 
+            case GL_STACK_UNDERFLOW:
                 std::cerr << "GL_STACK_UNDERFLOW";
                 break;
-            case GL_TABLE_TOO_LARGE:           
+            case GL_TABLE_TOO_LARGE:
                 std::cerr << "GL_TABLE_TOO_LARGE";
                 break;
-            case GL_OUT_OF_MEMORY:           
+            case GL_OUT_OF_MEMORY:
                 std::cerr << "GL_OUT_OF_MEMORY";
                 break;
             default:
@@ -336,15 +336,6 @@
     std::auto_ptr<Game> game;
     MainState state = MAINMENU;
     MainState nextstate;
-    
-    //we need the game-gui to set all states while loading a savegame
-    if(game.get() == 0)
-        game.reset(new Game());
-    while(!LCPBarInstance){//wait until PBars exist so they can be initalized
-        printf(".");
-        SDL_Delay(100);
-    }
-    initLincity();
 
     while(state != QUIT) {
         switch(state) {
@@ -357,8 +348,14 @@
                 break;
             case INGAME:
                 {
-                    if(game.get() == 0)
+                    if(game.get() == 0) {
                         game.reset(new Game());
+                        while(!LCPBarInstance){//wait until PBars exist so they can be initalized
+                            printf(".");
+                            SDL_Delay(100);
+                        }
+                        initLincity();
+                    }
                     nextstate = game->run();
                     if(menu.get() == 0)
                         menu.reset(new MainMenu());
@@ -372,7 +369,7 @@
             default:
                 assert(false);
         }
-        
+
         state = nextstate;
     }
 }
@@ -381,7 +378,7 @@
 {
     for(int currentArgument = 1; currentArgument < argc; ++currentArgument) {
         std::string argStr = argv[currentArgument];
-        
+
         if(argStr == "-v" || argStr == "--version") {
             std::cout << PACKAGE_NAME << " version " << PACKAGE_VERSION << "\n";
             exit(0);
@@ -407,7 +404,7 @@
         } else if(argStr == "-g" || argStr == "--gl") {
             getConfig()->useOpenGL = true;
         } else if(argStr == "-s" || argStr == "--sdl") {
-            getConfig()->useOpenGL = false; 
+            getConfig()->useOpenGL = false;
         } else if(argStr == "-S" || argStr == "--size") {
             currentArgument++;
             if(currentArgument >= argc) {
@@ -428,9 +425,9 @@
             getConfig()->videoX = newX;
             getConfig()->videoY = newY;
         } else if(argStr == "-f" || argStr == "--fullscreen") {
-            getConfig()->useFullScreen = true; 
+            getConfig()->useFullScreen = true;
         } else if(argStr == "-w" || argStr == "--window") {
-            getConfig()->useFullScreen = false; 
+            getConfig()->useFullScreen = false;
         } else if(argStr == "-m" || argStr == "--mute") {
             getConfig()->soundEnabled = false;
             getConfig()->musicEnabled = false;
@@ -467,34 +464,34 @@
         std::cout << "Starting " << PACKAGE_NAME << " (version " << PACKAGE_VERSION << ")...\n";
 #else
         std::cout << "Starting " << PACKAGE_NAME << " (version " << PACKAGE_VERSION << ") in Debug Mode...\n";
-#endif                                                     
+#endif
         initPhysfs(argv[0]);
         dictionaryManager = new TinyGetText::DictionaryManager();
         dictionaryManager->set_charset("UTF-8");
         dictionaryManager->add_directory("locale");
         std::cout << "Language is \"" << dictionaryManager->get_language() << "\".\n";
-        
+
 #ifndef DEBUG
     } catch(std::exception& e) {
-        std::cerr << "Unexpected exception: " << e.what() << "\n";        
+        std::cerr << "Unexpected exception: " << e.what() << "\n";
         return 1;
     } catch(...) {
         std::cerr << "Unexpected exception.\n";
         return 1;
-    }                                                                     
+    }
 #endif
     parseCommandLine(argc, argv); // Do not use getConfig() before parseCommandLine.
-    
+
     fast_time_for_year = getConfig()->quickness;
     fprintf(stderr," fast = %i\n", fast_time_for_year);
-   
+
 // in debug mode we want a backtrace of the exceptions so we don't catch them
 #ifndef DEBUG
     try {
 #endif
         xmlInitParser ();
-        std::auto_ptr<Sound> sound; 
-        sound.reset(new Sound()); 
+        std::auto_ptr<Sound> sound;
+        sound.reset(new Sound());
         initSDL();
         initTTF();
         initVideo(getConfig()->videoX, getConfig()->videoY);



From alainb at mail.berlios.de  Tue Jan 26 18:05:37 2010
From: alainb at mail.berlios.de (alainb at BerliOS)
Date: Tue, 26 Jan 2010 18:05:37 +0100
Subject: [Lincity-ng-commit] r1566 - in trunk/src: lincity lincity-ng
Message-ID: <201001261705.o0QH5bkY006507@sheep.berlios.de>

Author: alainb
Date: 2010-01-26 18:05:36 +0100 (Tue, 26 Jan 2010)
New Revision: 1566

Modified:
   trunk/src/lincity-ng/Dialog.cpp
   trunk/src/lincity-ng/MainMenu.cpp
   trunk/src/lincity/fileutil.cpp
   trunk/src/lincity/init_game.cpp
Log:
fix compilation warning for gcc4.4.1

Modified: trunk/src/lincity/fileutil.cpp
===================================================================
--- trunk/src/lincity/fileutil.cpp	2010-01-26 14:16:54 UTC (rev 1565)
+++ trunk/src/lincity/fileutil.cpp	2010-01-26 17:05:36 UTC (rev 1566)
@@ -324,7 +324,7 @@
 #endif
 }
 
-/* GCS:  This function is modified from gettext.  It finds the language 
+/* GCS:  This function is modified from gettext.  It finds the language
    portion of the locale. */
 static void lincity_nl_find_language(char *name)
 {
@@ -498,7 +498,7 @@
 
 void malloc_failure(void)
 {
-    printf(_("Out of memory: malloc failure\n"));
+    printf("%s",_("Out of memory: malloc failure\n"));
     exit(1);
 }
 
@@ -565,7 +565,7 @@
     vfprintf(fp, fmt, argptr);
 #endif
 
-    /* FIXME: maybe uncomment this 
+    /* FIXME: maybe uncomment this
        if (command_line_debug) {
        #if (!DEBUG_PRINTF_TO_FILE)
        va_start (argptr, fmt);

Modified: trunk/src/lincity/init_game.cpp
===================================================================
--- trunk/src/lincity/init_game.cpp	2010-01-26 14:16:54 UTC (rev 1565)
+++ trunk/src/lincity/init_game.cpp	2010-01-26 17:05:36 UTC (rev 1566)
@@ -57,7 +57,7 @@
 static void setup_ground(void);
 static void new_setup_river_ground(void);
 static void new_setup_river(void);
-static void sort_by_altitude(int n, int *tabx, int *taby);
+//static void sort_by_altitude(int n, int *tabx, int *taby);
 static int new_setup_one_river(int x, int y, int lake_id, Shoreline *shore);
 static void set_river_tile( int i, int j);
 static void do_rand_ecology(int x, int y);
@@ -691,6 +691,8 @@
     MP_INFO(i, j).flags |= FLAG_IS_RIVER;
 }
 
+/*  AL1: commented out, because unused currently
+
 static void sort_by_altitude(int n, int *tabx, int *taby)
 {
     // sort ascending
@@ -710,11 +712,9 @@
                 taby[j] = tmp_y;
                 sorted = false;
             }
-        /*fprintf(stderr," sorted = %i, n - i -1 = %i, ALT() = %i\n",
-         *       sorted, n - i -1, ALT(tabx[n-i-1], taby[n -i -1]));
-         */
     }
 }
+*/
 
 static int new_setup_one_river( int xx, int yy, int lake_id, Shoreline *shore)
 {

Modified: trunk/src/lincity-ng/Dialog.cpp
===================================================================
--- trunk/src/lincity-ng/Dialog.cpp	2010-01-26 14:16:54 UTC (rev 1565)
+++ trunk/src/lincity-ng/Dialog.cpp	2010-01-26 17:05:36 UTC (rev 1566)
@@ -56,7 +56,7 @@
 }
 
 Dialog::Dialog( int type ){
-    initDialog();   
+    initDialog();
     switch( type ){
         case ASK_COAL_SURVEY:
             coalSurvey();
@@ -70,9 +70,9 @@
             throw std::runtime_error(msg.str());
     }
 }
-   
+
 Dialog::Dialog( int type, std::string message, std::string extraString){
-    initDialog();   
+    initDialog();
     switch( type ){
         case MSG_DIALOG:
             msgDialog( message, extraString );
@@ -123,7 +123,7 @@
         while( root->getParent() )
             root = root->getParent();
         desktop = dynamic_cast<Desktop*> (root);
-        if(!desktop) 
+        if(!desktop)
             std::cerr << "Root not a desktop!?!\n";
     } else {
         std::cerr << "Dialog: Root not found.\n";
@@ -139,8 +139,8 @@
 }
 
 void Dialog::unRegisterDialog(){
-    std::vector<Dialog*>::iterator iter = dialogVector.begin(); 
-    std::vector<Dialog*>::iterator del; 
+    std::vector<Dialog*>::iterator iter = dialogVector.begin();
+    std::vector<Dialog*>::iterator del;
     while( iter <= dialogVector.end() ){
         if ( *iter == this ){
             del = iter;
@@ -328,11 +328,11 @@
     }
 }
 
-/* 
+/*
  * Show game statistics in dialog and write them to RESULTS_FILENAME.
  *
- * gamestats.xml has 11 lines 
- * statistic_text1 
+ * gamestats.xml has 11 lines
+ * statistic_text1
  * [...]
  * statistic_text11
  * and 15 lines in a Table with 6 columns
@@ -361,7 +361,7 @@
     } else {
         useExisting = true;
     }
-    
+
     // Fill in Fields.
     int line = 1;
     int maxlength = 567;
@@ -378,7 +378,7 @@
         setParagraphN( "statistic_text", line++, outf );
     }
     if (sustain_flag){
-	    snprintf (outf, maxlength, _("Economy is sustainable"));
+	    snprintf (outf, maxlength, "%s", _("Economy is sustainable"));
         setParagraphN( "statistic_text", line++, outf );
     }
     snprintf (outf, maxlength, _("Population  %d  of which  %d  are not housed.")
@@ -415,15 +415,15 @@
     free( outf );
 
     setTableRC("statistic", 1, 1, _("Residences"),
-	     group_count[GROUP_RESIDENCE_LL] + 
-	     group_count[GROUP_RESIDENCE_ML] + 
-	     group_count[GROUP_RESIDENCE_HL] + 
-	     group_count[GROUP_RESIDENCE_LH] + 
-	     group_count[GROUP_RESIDENCE_MH] + 
+	     group_count[GROUP_RESIDENCE_LL] +
+	     group_count[GROUP_RESIDENCE_ML] +
+	     group_count[GROUP_RESIDENCE_HL] +
+	     group_count[GROUP_RESIDENCE_LH] +
+	     group_count[GROUP_RESIDENCE_MH] +
 	     group_count[GROUP_RESIDENCE_HH]);
     setTableRC("statistic", 1, 2, _("Markets"), group_count[GROUP_MARKET] );
     setTableRC("statistic", 1, 3, _("Farms"), group_count[GROUP_ORGANIC_FARM]);
-    
+
     setTableRC("statistic", 2, 1, _("Water wells"), group_count[GROUP_WATERWELL]);
     setTableRC("statistic", 2, 2, "", "");
     setTableRC("statistic", 2, 3, "", "");
@@ -432,7 +432,7 @@
     setTableRC("statistic", 3, 2, "", "");
     setTableRC("statistic", 3, 3, "", "");
 
-    setTableRC("statistic", 4, 1, _("Monuments"), group_count[GROUP_MONUMENT]); 
+    setTableRC("statistic", 4, 1, _("Monuments"), group_count[GROUP_MONUMENT]);
     setTableRC("statistic", 4, 2, _("Schools"),  group_count[GROUP_SCHOOL]);
     setTableRC("statistic", 4, 3, _("Universities"), group_count[GROUP_UNIVERSITY]);
 
@@ -479,7 +479,7 @@
     setTableRC("statistic", 15, 1, "", "");
     setTableRC("statistic", 15, 2, "", "");
     setTableRC("statistic", 15, 3, "", "");
-   
+
     if( !useExisting ){
         // connect signals
         Button* noButton = getButton( *myDialogComponent, "Okay" );
@@ -487,7 +487,7 @@
     }
 }
 
-/* 
+/*
  * Save game statistics to RESULTS_FILENAME. Do NOT translate text here!
  * That way the files can be used for highscores.
  */
@@ -501,7 +501,7 @@
 
     std::ofstream results( s );
     free( s );
-    
+
     // Fill in Fields.
     int maxlength = 567;
     char* outf = (char *) malloc ( maxlength );
@@ -550,11 +550,11 @@
     results << "" << std::endl;
 
     snprintf (outf, maxlength, "    Residences %4d         Markets %4d            Farms %4d",
-	     group_count[GROUP_RESIDENCE_LL] + 
-	     group_count[GROUP_RESIDENCE_ML] + 
-	     group_count[GROUP_RESIDENCE_HL] + 
-	     group_count[GROUP_RESIDENCE_LH] + 
-	     group_count[GROUP_RESIDENCE_MH] + 
+	     group_count[GROUP_RESIDENCE_LL] +
+	     group_count[GROUP_RESIDENCE_ML] +
+	     group_count[GROUP_RESIDENCE_HL] +
+	     group_count[GROUP_RESIDENCE_LH] +
+	     group_count[GROUP_RESIDENCE_MH] +
 	     group_count[GROUP_RESIDENCE_HH],
 	     group_count[GROUP_MARKET],
 	     group_count[GROUP_ORGANIC_FARM]);
@@ -603,10 +603,10 @@
 	     ,group_count[GROUP_COMMUNE]);
     results << outf << std::endl;
     results << "" << std::endl;
-    
+
     //close File
     results.close();
-        
+
     free( outf );
 }
 
@@ -717,81 +717,81 @@
 void Dialog::applyMarketButtonClicked( Button* b ){
     CheckButton* cb;
     cb = getCheckButton( *myDialogComponent, "BuyJobs" );
-    if( cb->state == CheckButton::STATE_CHECKED ){  
-        MP_INFO( pointX,pointY ).flags |= FLAG_MB_JOBS; 
+    if( cb->state == CheckButton::STATE_CHECKED ){
+        MP_INFO( pointX,pointY ).flags |= FLAG_MB_JOBS;
     } else {
-        MP_INFO( pointX,pointY ).flags &= ~FLAG_MB_JOBS; 
+        MP_INFO( pointX,pointY ).flags &= ~FLAG_MB_JOBS;
     }
     cb = getCheckButton( *myDialogComponent, "SellJobs" );
-    if( cb->state == CheckButton::STATE_CHECKED ){  
-        MP_INFO( pointX,pointY ).flags |= FLAG_MS_JOBS; 
+    if( cb->state == CheckButton::STATE_CHECKED ){
+        MP_INFO( pointX,pointY ).flags |= FLAG_MS_JOBS;
     } else {
-        MP_INFO( pointX,pointY ).flags &= ~FLAG_MS_JOBS; 
+        MP_INFO( pointX,pointY ).flags &= ~FLAG_MS_JOBS;
     }
     applyPortButtonClicked( b );
 }
-    
+
 void Dialog::applyPortButtonClicked( Button* ){
     CheckButton* cb;
     cb = getCheckButton( *myDialogComponent, "BuyFood" );
-    if( cb->state == CheckButton::STATE_CHECKED ){  
-        MP_INFO( pointX,pointY ).flags |= FLAG_MB_FOOD; 
+    if( cb->state == CheckButton::STATE_CHECKED ){
+        MP_INFO( pointX,pointY ).flags |= FLAG_MB_FOOD;
     } else {
-        MP_INFO( pointX,pointY ).flags &= ~FLAG_MB_FOOD; 
+        MP_INFO( pointX,pointY ).flags &= ~FLAG_MB_FOOD;
     }
     cb = getCheckButton( *myDialogComponent, "SellFood" );
-    if( cb->state == CheckButton::STATE_CHECKED ){  
-        MP_INFO( pointX,pointY ).flags |= FLAG_MS_FOOD; 
+    if( cb->state == CheckButton::STATE_CHECKED ){
+        MP_INFO( pointX,pointY ).flags |= FLAG_MS_FOOD;
     } else {
-        MP_INFO( pointX,pointY ).flags &= ~FLAG_MS_FOOD; 
+        MP_INFO( pointX,pointY ).flags &= ~FLAG_MS_FOOD;
     }
     cb = getCheckButton( *myDialogComponent, "BuyCoal" );
-    if( cb->state == CheckButton::STATE_CHECKED ){  
-        MP_INFO( pointX,pointY ).flags |= FLAG_MB_COAL; 
+    if( cb->state == CheckButton::STATE_CHECKED ){
+        MP_INFO( pointX,pointY ).flags |= FLAG_MB_COAL;
     } else {
-        MP_INFO( pointX,pointY ).flags &= ~FLAG_MB_COAL; 
+        MP_INFO( pointX,pointY ).flags &= ~FLAG_MB_COAL;
     }
     cb = getCheckButton( *myDialogComponent, "SellCoal" );
-    if( cb->state == CheckButton::STATE_CHECKED ){  
-        MP_INFO( pointX,pointY ).flags |= FLAG_MS_COAL; 
+    if( cb->state == CheckButton::STATE_CHECKED ){
+        MP_INFO( pointX,pointY ).flags |= FLAG_MS_COAL;
     } else {
-        MP_INFO( pointX,pointY ).flags &= ~FLAG_MS_COAL; 
+        MP_INFO( pointX,pointY ).flags &= ~FLAG_MS_COAL;
     }
     cb = getCheckButton( *myDialogComponent, "BuyOre" );
-    if( cb->state == CheckButton::STATE_CHECKED ){  
-        MP_INFO( pointX,pointY ).flags |= FLAG_MB_ORE; 
+    if( cb->state == CheckButton::STATE_CHECKED ){
+        MP_INFO( pointX,pointY ).flags |= FLAG_MB_ORE;
     } else {
-        MP_INFO( pointX,pointY ).flags &= ~FLAG_MB_ORE; 
+        MP_INFO( pointX,pointY ).flags &= ~FLAG_MB_ORE;
     }
     cb = getCheckButton( *myDialogComponent, "SellOre" );
-    if( cb->state == CheckButton::STATE_CHECKED ){  
-        MP_INFO( pointX,pointY ).flags |= FLAG_MS_ORE; 
+    if( cb->state == CheckButton::STATE_CHECKED ){
+        MP_INFO( pointX,pointY ).flags |= FLAG_MS_ORE;
     } else {
-        MP_INFO( pointX,pointY ).flags &= ~FLAG_MS_ORE; 
+        MP_INFO( pointX,pointY ).flags &= ~FLAG_MS_ORE;
     }
     cb = getCheckButton( *myDialogComponent, "BuyGoods" );
-    if( cb->state == CheckButton::STATE_CHECKED ){  
-        MP_INFO( pointX,pointY ).flags |= FLAG_MB_GOODS; 
+    if( cb->state == CheckButton::STATE_CHECKED ){
+        MP_INFO( pointX,pointY ).flags |= FLAG_MB_GOODS;
     } else {
-        MP_INFO( pointX,pointY ).flags &= ~FLAG_MB_GOODS; 
+        MP_INFO( pointX,pointY ).flags &= ~FLAG_MB_GOODS;
     }
     cb = getCheckButton( *myDialogComponent, "SellGoods" );
-    if( cb->state == CheckButton::STATE_CHECKED ){  
-        MP_INFO( pointX,pointY ).flags |= FLAG_MS_GOODS; 
+    if( cb->state == CheckButton::STATE_CHECKED ){
+        MP_INFO( pointX,pointY ).flags |= FLAG_MS_GOODS;
     } else {
-        MP_INFO( pointX,pointY ).flags &= ~FLAG_MS_GOODS; 
+        MP_INFO( pointX,pointY ).flags &= ~FLAG_MS_GOODS;
     }
     cb = getCheckButton( *myDialogComponent, "BuySteel" );
-    if( cb->state == CheckButton::STATE_CHECKED ){  
-        MP_INFO( pointX,pointY ).flags |= FLAG_MB_STEEL; 
+    if( cb->state == CheckButton::STATE_CHECKED ){
+        MP_INFO( pointX,pointY ).flags |= FLAG_MB_STEEL;
     } else {
-        MP_INFO( pointX,pointY ).flags &= ~FLAG_MB_STEEL; 
+        MP_INFO( pointX,pointY ).flags &= ~FLAG_MB_STEEL;
     }
     cb = getCheckButton( *myDialogComponent, "SellSteel" );
-    if( cb->state == CheckButton::STATE_CHECKED ){  
-        MP_INFO( pointX,pointY ).flags |= FLAG_MS_STEEL; 
+    if( cb->state == CheckButton::STATE_CHECKED ){
+        MP_INFO( pointX,pointY ).flags |= FLAG_MS_STEEL;
     } else {
-        MP_INFO( pointX,pointY ).flags &= ~FLAG_MS_STEEL; 
+        MP_INFO( pointX,pointY ).flags &= ~FLAG_MS_STEEL;
     }
     desktop->remove( myDialogComponent );
     blockingDialogIsOpen = false;
@@ -807,7 +807,7 @@
 
 
 void Dialog::okayCoalSurveyButtonClicked( Button* ){
-    do_coal_survey();    
+    do_coal_survey();
     desktop->remove( myDialogComponent );
     blockingDialogIsOpen = false;
     unRegisterDialog();

Modified: trunk/src/lincity-ng/MainMenu.cpp
===================================================================
--- trunk/src/lincity-ng/MainMenu.cpp	2010-01-26 14:16:54 UTC (rev 1565)
+++ trunk/src/lincity-ng/MainMenu.cpp	2010-01-26 17:05:36 UTC (rev 1566)
@@ -75,7 +75,7 @@
         Button* quitButton = getButton(*mainMenu, "QuitButton");
         quitButton->clicked.connect(
                 makeCallback(*this, &MainMenu::quitButtonClicked));
-        Button* continueButton = getButton(*mainMenu, "ContinueButton"); 
+        Button* continueButton = getButton(*mainMenu, "ContinueButton");
         continueButton->clicked.connect(
                 makeCallback(*this, &MainMenu::continueButtonClicked));
         Button* newGameButton = getButton(*mainMenu, "NewGameButton");
@@ -93,7 +93,7 @@
         Button* optionsButton = getButton(*mainMenu, "OptionsButton");
         optionsButton->clicked.connect(
                 makeCallback(*this, &MainMenu::optionsButtonClicked));
- 
+
     }
 
     mainMenu->resize(SDL_GetVideoSurface()->w, SDL_GetVideoSurface()->h);
@@ -102,17 +102,17 @@
 void MainMenu::fillNewGameMenu()
 {
   const std::string buttonNames[]={"File0","File1","File2","File3","File4","File5"};
-  
+
   char **files= PHYSFS_enumerateFiles("opening");
-  
+
   char **fptr=files;
 
-  fileMap.clear(); 
- 
+  fileMap.clear();
+
   for(int i=0;i<6;i++)
   {
     CheckButton *button=getCheckButton(*newGameMenu.get(),buttonNames[i]);
-    
+
     button->clicked.connect(makeCallback(*this,&MainMenu::selectLoadGameButtonClicked));
     while(*fptr)
     {
@@ -128,7 +128,7 @@
       }
       // save real name
       fileMap.insert(std::pair<std::string, std::string>(buttonNames[i], f ));
-      // use translated name for caption 
+      // use translated name for caption
       button->setCaptionText(_(f.c_str()));
       fptr++;
     }
@@ -148,7 +148,7 @@
 void MainMenu::fillLoadMenu( bool save /*= false*/ )
 {
     const std::string buttonNames[]={"File0","File1","File2","File3","File4","File5"};
-  
+
     char** rc = PHYSFS_enumerateFiles("/");
 
     char* curfile;
@@ -165,8 +165,8 @@
         } else {
             button = getCheckButton(*loadGameMenu.get(),buttonNames[i]);
         }
-        //make sure Button is connected only once 
-        button->clicked.clear(); 
+        //make sure Button is connected only once
+        button->clicked.clear();
         if( save )
             button->clicked.connect(makeCallback(*this,&MainMenu::selectSaveGameButtonClicked));
         else {
@@ -271,7 +271,7 @@
         currentCheckButton->clicked.connect( makeCallback(*this, &MainMenu::optionsMenuButtonClicked));
         currentCheckButton = getCheckButton(*optionsMenu, "ResolutionNext");
         currentCheckButton->clicked.connect( makeCallback(*this, &MainMenu::optionsMenuButtonClicked));
-        
+
         Button* currentButton = getButton(*optionsMenu, "BackButton");
         currentButton->clicked.connect( makeCallback(*this, &MainMenu::optionsBackButtonClicked));
     }
@@ -348,12 +348,12 @@
     selectLoadSaveGameButtonClicked( button , i,  false );
 }
 
-void 
+void
 MainMenu::selectSaveGameButtonClicked(CheckButton* button, int i){
     selectLoadSaveGameButtonClicked( button , i, true );
 }
 
-void 
+void
 MainMenu::selectLoadSaveGameButtonClicked(CheckButton* button , int, bool save )
 {
     std::string fc=button->getCaptionText();
@@ -364,18 +364,18 @@
             fc = iter->second;
         }
     }
-  
+
     std::string file="";
-    
+
     /* I guess this should be the proper way of selecting in the menu.
        Everytime we check a new button the last one gets unchecked.
-       If the button checked is an empty one, nothing should be opened 
+       If the button checked is an empty one, nothing should be opened
        Could be done the other way around: the first time an existing item
        is selected in the menu, an empty one could never be checked again.
        Anyway I don't think both should be checked, when an empty is checked
        after an existing one.
     */
-       
+
     const std::string bs[]={"File0","File1","File2","File3","File4","File5",""};
     for(int i=0;std::string(bs[i]).length();i++) {
         CheckButton *b=getCheckButton(*currentMenu,bs[i]);
@@ -390,24 +390,24 @@
         mFilename = "";
         return;
     }
-    
+
     baseName = fc;
     if(newGameMenu.get()==currentMenu ) {
         file=std::string("opening/")+fc+".scn";
     } else {
         file=fc;
     }
-    
+
     mFilename="";
     if(newGameMenu.get()!=currentMenu) {
-        slotNr = 1 + atoi( 
+        slotNr = 1 + atoi(
                 const_cast<char*>(button->getName().substr(4).c_str()) );
         if( file.length() == 0){
             mFilename = "";
             return;
         }
     }
-    
+
     mFilename+=file;
     Uint32 now = SDL_GetTicks();
 
@@ -418,7 +418,7 @@
         lastClickTick = 0;
         doubleClickButtonName = "";
         if( newGameMenu.get() == currentMenu ) {
-            //load scenario 
+            //load scenario
             newGameStartButtonClicked( 0 );
         } else {
             //load game
@@ -438,19 +438,19 @@
     } else if( buttonName == "MusicVolumePlus"){
         int newVolume = getConfig()->musicVolume + 5;
         if( newVolume > 100 ){
-           newVolume = 100; 
+           newVolume = 100;
         }
         if( getConfig()->musicVolume != newVolume ){
-            getSound()->setMusicVolume( newVolume ); 
+            getSound()->setMusicVolume( newVolume );
             getSound()->playSound("Click");
         }
     } else if( buttonName == "MusicVolumeMinus"){
         int newVolume = getConfig()->musicVolume -5;
         if( newVolume < 0 ){
-           newVolume = 0; 
+           newVolume = 0;
         }
         if( getConfig()->musicVolume != newVolume ){
-            getSound()->setMusicVolume( newVolume ); 
+            getSound()->setMusicVolume( newVolume );
             getSound()->playSound("Click");
         }
     } else if( buttonName == "SoundFX"){
@@ -459,19 +459,19 @@
     } else if( buttonName == "FXVolumePlus"){
         int newVolume = getConfig()->soundVolume + 5;
         if( newVolume > 100 ){
-           newVolume = 100; 
+           newVolume = 100;
         }
         if( getConfig()->soundVolume != newVolume ){
-            getSound()->setSoundVolume( newVolume ); 
+            getSound()->setSoundVolume( newVolume );
             getSound()->playSound("Click");
         }
     } else if( buttonName == "FXVolumeMinus"){
         int newVolume = getConfig()->soundVolume - 5;
         if( newVolume < 0 ){
-           newVolume = 0; 
+           newVolume = 0;
         }
         if( getConfig()->soundVolume != newVolume ){
-            getSound()->setSoundVolume( newVolume ); 
+            getSound()->setSoundVolume( newVolume );
             getSound()->playSound("Click");
         }
     } else if( buttonName == "ResolutionPrev"){
@@ -480,7 +480,7 @@
         changeResolution(true);
     } else if( buttonName == "Fullscreen"){
         getSound()->playSound("Click");
-        getConfig()->useFullScreen = !getConfig()->useFullScreen; 
+        getConfig()->useFullScreen = !getConfig()->useFullScreen;
         if( getConfig()->restartOnChangeScreen ){
             quitState = RESTART;
             running = false;
@@ -494,7 +494,7 @@
         changeTrack(true);
     } else {
         std::cerr << "MainMenu::optionsMenuButtonClicked " << buttonName << " unknown Button!\n";
-    }    
+    }
 }
 
 /** Changes the displayed resolution in the options menu.
@@ -518,19 +518,19 @@
         modes = SDL_ListModes(NULL,  flags);
 
     }
-    
+
     if(modes == NULL) {
         std::cerr << "Error: SDL reports that no video modes are available!\n";
         return;
-    } else if (modes == (SDL_Rect**)-1) {    
+    } else if (modes == (SDL_Rect**)-1) {
         /* FIXME: SDL docs say that this means that "Any dimension is okay for the given
-         format". I'm not sure what to do in this case. For now I will just report an error. 
+         format". I'm not sure what to do in this case. For now I will just report an error.
         It may be an option to just show some default modes.
             Jaky */
         std::cerr << "FIXME: SDL reports that any video mode is possible. Please report to the lincity-ng bugtracker if you get this error. Please use the --size switch or edit userconfig.xml to set your resolution.\n";
         return;
     }
-    
+
     /* Go through the video modes to find the currently selected one */
     std::string currentMode = getParagraph( *optionsMenu, "resolutionParagraph")->getText();
     int new_mode = 0;
@@ -578,12 +578,12 @@
         fullname = directory;
         fullname.append( *fptr );
         filename.assign( *fptr );
-        
+
         if(!PHYSFS_isDirectory(fullname.c_str())){
             if( filename == currentname ){
                 hit = true;
             } else if ( !hit ){
-                prevname = filename; 
+                prevname = filename;
             } else {
                 nextname = filename;
                 break;
@@ -703,7 +703,7 @@
         quitState = INGAME;
         running = false;
     }
-    mFilename = "empty"; //don't erase scenarios later 
+    mFilename = "empty"; //don't erase scenarios later
 }
 
 void
@@ -741,7 +741,7 @@
 {
     getSound()->playSound( "Click" );
     loadMainMenu();
-    switchMenu(mainMenu.get());   
+    switchMenu(mainMenu.get());
 }
 
 void
@@ -749,7 +749,7 @@
 {
     getSound()->playSound( "Click" );
     loadMainMenu();
-    switchMenu(mainMenu.get());   
+    switchMenu(mainMenu.get());
 }
 
 void
@@ -787,18 +787,18 @@
     newStart << std::setfill('0') << std::setw(3);
     int money = abs(total_money);
     if (money > 1000000000)
-        newStart << money/1000000000 << "G";  
+        newStart << money/1000000000 << "G";
     else if (money > 1000000)
-        newStart << money/1000000 << "M";  
+        newStart << money/1000000 << "M";
     else  if(money > 1000)
-        newStart << money/1000 << "K"; 
+        newStart << money/1000 << "K";
     else
         newStart << money/1 << "_";
- 
+
     newStart << "_P";
     newStart << std::setfill('0') << std::setw(5);
     newStart << housed_population + people_pool;
-    std::string newFilename( newStart.str() ); 
+    std::string newFilename( newStart.str() );
     saveCityNG( newFilename );
     fillLoadMenu( true );
 }
@@ -811,7 +811,7 @@
     running = true;
     quitState = QUIT;
     Uint32 ticks = SDL_GetTicks();
-    
+
     int frame = 0;
     while(running) {
         while(SDL_PollEvent(&event)) {
@@ -863,12 +863,12 @@
         if(currentMenu->needsRedraw()) {
             currentMenu->draw(*painter);
             flipScreenBuffer();
-        } 
+        }
 
         frame++;
         if(SDL_GetTicks() - ticks > 1000) {
 #ifdef DEBUG_FPS
-            printf("FPS: %d.\n", frame);
+            printf("MainMenu FPS: %d.\n", frame);
 #endif
             frame = 0;
             ticks = SDL_GetTicks();



From alainb at mail.berlios.de  Sat Jan 30 18:38:08 2010
From: alainb at mail.berlios.de (alainb at BerliOS)
Date: Sat, 30 Jan 2010 18:38:08 +0100
Subject: [Lincity-ng-commit] r1567 - in trunk: data/gui data/images/mainmenu
	src/lincity src/lincity-ng
Message-ID: <201001301738.o0UHc8LO009767@sheep.berlios.de>

Author: alainb
Date: 2010-01-30 18:37:48 +0100 (Sat, 30 Jan 2010)
New Revision: 1567

Added:
   trunk/data/images/mainmenu/loadsave_back.png
   trunk/data/images/mainmenu/loadsave_back.svg
Modified:
   trunk/data/gui/loadgame.xml
   trunk/data/gui/newgame.xml
   trunk/data/gui/savegame.xml
   trunk/data/images/mainmenu/newgame_back.png
   trunk/data/images/mainmenu/newgame_back.svg
   trunk/src/lincity-ng/GameView.hpp
   trunk/src/lincity-ng/MainMenu.cpp
   trunk/src/lincity-ng/MainMenu.hpp
   trunk/src/lincity/init_game.cpp
Log:
start menu: add new random land

Modified: trunk/data/gui/loadgame.xml
===================================================================
--- trunk/data/gui/loadgame.xml	2010-01-26 17:05:36 UTC (rev 1566)
+++ trunk/data/gui/loadgame.xml	2010-01-30 17:37:48 UTC (rev 1567)
@@ -1,12 +1,12 @@
 <?xml version="1.0" encoding="UTF-8"?>
 <gui>
-	<Image src="images/mainmenu/newgame_back.png" resizable="yes"/>
+	<Image src="images/mainmenu/loadsave_back.png" resizable="yes"/>
 	<!-- Split window into title/top - contents and bottom/buttons area -->
 	<TableLayout rows="3" cols="1" >
 		<rowsize row="1" relative="3"/>
 		<rowsize row="2" relative="5"/>
 		<rowsize row="3" relative="2.5"/>
-		
+
 		<cell row="1" col="1">
 		<Paragraph style="menutitle" translatable="yes">Load Game</Paragraph>
 		</cell>
@@ -83,7 +83,7 @@
 			<rowsize row="3" relative="1"/>
 			<colsize col="1" fixed="75"/>
 			<colsize col="4" fixed="75"/>
-		
+
 			<cell row="2" col="2" halign="left">
 			<Button name="BackButton">
 				<text style="button" translatable="yes">Back</text>

Modified: trunk/data/gui/newgame.xml
===================================================================
--- trunk/data/gui/newgame.xml	2010-01-26 17:05:36 UTC (rev 1566)
+++ trunk/data/gui/newgame.xml	2010-01-30 17:37:48 UTC (rev 1567)
@@ -4,38 +4,38 @@
 	<!-- Split window into title/top - contents and bottom/buttons area -->
 	<TableLayout rows="4" cols="1">
 		<rowsize row="1" relative="3"/>
-		<rowsize row="2" relative="5"/>
-		<rowsize row="3" relative="1.5"/>
-		<rowsize row="4" relative="1"/>
-		
+		<rowsize row="2" relative="8"/>
+		<rowsize row="3" relative="5"/>
+		<rowsize row="4" relative="2"/>
+
 		<cell row="1" col="1">
 		<TableLayout rows="2" cols="1">
 			<rowsize row="1" relative="2"/>
 			<rowsize row="2" relative="1"/>
-			
+
 			<cell row="1" col="1">
 			<Paragraph style="menutitle" translatable="yes">New Game</Paragraph>
 			</cell>
-			
+
 			<cell row="2" col="1">
 			<Paragraph style="listtitle" translatable="yes">
 			Choose Scenario</Paragraph>
 			</cell>
-		</TableLayout>	
+		</TableLayout>
 		</cell>
-		
+
 		<cell row="2" col="1">
-		<TableLayout rows="8" cols="3">
+		<TableLayout rows="6" cols="3">
 			<colsize col="1" relative="4"/>
 			<colsize col="2" relative="10"/>
 			<colsize col="3" relative="15"/>
-		
+
 			<!-- put scenario list in here
 			<cell row="N" col="2">
-			
+
 			</cell>
 			-->
-			<cell row="2" col="2">
+			<cell row="1" col="2">
 			<CheckButton name="File0">
 			<text-caption style="button">Savegame 1234567890</text-caption>
 			<image src="images/gui/buttons/savebutton.png"/>
@@ -44,7 +44,7 @@
 			<image-checked src="images/gui/buttons/savebutton-checked.png"/>
 			</CheckButton>
 			</cell>
-			<cell row="3" col="2">
+			<cell row="2" col="2">
 			<CheckButton name="File1">
 			<text-caption style="button">Savegame 1234567890</text-caption>
 			<image src="images/gui/buttons/savebutton.png"/>
@@ -53,7 +53,7 @@
 			<image-checked src="images/gui/buttons/savebutton-checked.png"/>
 			</CheckButton>
 			</cell>
-			<cell row="4" col="2">
+			<cell row="3" col="2">
 			<CheckButton name="File2">
 			<text-caption style="button">Savegame 1234567890</text-caption>
 			<image src="images/gui/buttons/savebutton.png"/>
@@ -62,7 +62,7 @@
 			<image-checked src="images/gui/buttons/savebutton-checked.png"/>
 			</CheckButton>
 			</cell>
-			<cell row="5" col="2">
+			<cell row="4" col="2">
 			<CheckButton name="File3">
 			<text-caption style="button">Savegame 1234567890</text-caption>
 			<image src="images/gui/buttons/savebutton.png"/>
@@ -71,7 +71,7 @@
 			<image-checked src="images/gui/buttons/savebutton-checked.png"/>
 			</CheckButton>
 			</cell>
-			<cell row="6" col="2">
+			<cell row="5" col="2">
 			<CheckButton name="File4">
 			<text-caption style="button">Savegame 1234567890</text-caption>
 			<image src="images/gui/buttons/savebutton.png"/>
@@ -80,7 +80,7 @@
 			<image-checked src="images/gui/buttons/savebutton-checked.png"/>
 			</CheckButton>
 			</cell>
-			<cell row="7" col="2">
+			<cell row="6" col="2">
 			<CheckButton name="File5">
 			<text-caption style="button">Savegame 1234567890</text-caption>
 			<image src="images/gui/buttons/savebutton.png"/>
@@ -89,30 +89,62 @@
 			<image-checked src="images/gui/buttons/savebutton-checked.png"/>
 			</CheckButton>
 			</cell>
-	
+
 		</TableLayout>
 		</cell>
-		<cell row="3" col="1">
-		<TableLayout rows="4" cols="2">
-			<rowsize row="1" relative="1"/>
-			<rowsize row="2" relative="3"/>
-			<rowsize row="3" relative="3"/>
-			<rowsize row="4" relative="1"/>
-			<cell row="2" col="1" halign="left">
-			<Button name="StartBareButton">
-				<text style="button" translatable="yes">Start with empty board.</text>
-				<text-hover style="button-hover" translatable="yes">Start with empty board.</text-hover>
-				<text-clicked style="button-clicked" translatable="yes">Start with empty board.</text-clicked>
-			</Button>
-			</cell>
-			<cell row="3" col="1" halign="left">
-			<Button name="StartVillageButton">
-				<text style="button" translatable="yes">Start with random village.</text>
-				<text-hover style="button-hover" translatable="yes">Start with random village.</text-hover>
-				<text-clicked style="button-clicked" translatable="yes">Start with random village.</text-clicked>
-			</Button>
-			</cell>
-		</TableLayout>
+        <cell row="3" col="1">
+            <TableLayout rows="6" cols="3">
+                <colsize col="1" relative="4"/>
+                <colsize col="2" relative="10"/>
+                <colsize col="3" relative="15"/>
+
+                <!-- <cell row="1" col="2">
+                    <TableLayout rows="6" cols="1"> -->
+                        <rowsize row="1" relative="3"/>
+                        <rowsize row="2" relative="3"/>
+                        <rowsize row="3" relative="1"/>
+                        <rowsize row="4" relative="3"/>
+                        <rowsize row="5" relative="3"/>
+                        <rowsize row="6" relative="3"/>
+
+                        <cell row="1" col="2" halign="center">
+                            <Button name="StartBareButton">
+                                <text style="button" translatable="yes">Start with empty board.</text>
+                                <text-hover style="button-hover" translatable="yes">Start with empty board.</text-hover>
+                                <text-clicked style="button-clicked" translatable="yes">Start with empty board.</text-clicked>
+                            </Button>
+                        </cell>
+                        <cell row="2" col="2" halign="center">
+                            <Button name="StartVillageButton">
+                                <text style="button" translatable="yes">Start with random village.</text>
+                                <text-hover style="button-hover" translatable="yes">Start with random village.</text-hover>
+                                <text-clicked style="button-clicked" translatable="yes">Start with random village.</text-clicked>
+                            </Button>
+                        </cell>
+                        <cell row="4" col="2" halign="center">
+                            <Button name="StartRandomDesertButton">
+                                <text style="button" translatable="yes">New random land : semi desert</text>
+                                <text-hover style="button-hover" translatable="yes">New random land : semi desert</text-hover>
+                                <text-clicked style="button-clicked" translatable="yes">New random land : semi desert</text-clicked>
+                            </Button>
+                        </cell>
+                        <cell row="5" col="2" halign="center">
+                            <Button name="StartRandomTemperateButton">
+                                <text style="button" translatable="yes">New random land : temperate</text>
+                                <text-hover style="button-hover" translatable="yes">New random land : temperate</text-hover>
+                                <text-clicked style="button-clicked" translatable="yes">New random land : temperate</text-clicked>
+                            </Button>
+                        </cell>
+                        <cell row="6" col="2" halign="center">
+                            <Button name="StartRandomSwampButton">
+                                <text style="button" translatable="yes">New random land : swamp</text>
+                                <text-hover style="button-hover" translatable="yes">New random land : swamp</text-hover>
+                                <text-clicked style="button-clicked" translatable="yes">New random land : swamp</text-clicked>
+                            </Button>
+                        </cell>
+                        <!-- </TableLayout>
+                </cell> -->
+            </TableLayout>
 		</cell>
 		<cell row="4" col="1">
 		<TableLayout rows="2" cols="2">

Modified: trunk/data/gui/savegame.xml
===================================================================
--- trunk/data/gui/savegame.xml	2010-01-26 17:05:36 UTC (rev 1566)
+++ trunk/data/gui/savegame.xml	2010-01-30 17:37:48 UTC (rev 1567)
@@ -1,12 +1,12 @@
 <?xml version="1.0" encoding="UTF-8"?>
 <gui>
-	<Image src="images/mainmenu/newgame_back.png" resizable="yes"/>
+	<Image src="images/mainmenu/loadsave_back.png" resizable="yes"/>
 	<!-- Split window into title/top - contents and bottom/buttons area -->
 	<TableLayout rows="3" cols="1" >
 		<rowsize row="1" relative="3"/>
 		<rowsize row="2" relative="5"/>
 		<rowsize row="3" relative="2.5"/>
-		
+
 		<cell row="1" col="1">
 		<Paragraph style="menutitle" translatable="yes">Save Game</Paragraph>
 		</cell>

Added: trunk/data/images/mainmenu/loadsave_back.png
===================================================================
(Binary files differ)


Property changes on: trunk/data/images/mainmenu/loadsave_back.png
___________________________________________________________________
Name: svn:mime-type
   + application/octet-stream

Added: trunk/data/images/mainmenu/loadsave_back.svg
===================================================================
--- trunk/data/images/mainmenu/loadsave_back.svg	2010-01-26 17:05:36 UTC (rev 1566)
+++ trunk/data/images/mainmenu/loadsave_back.svg	2010-01-30 17:37:48 UTC (rev 1567)
@@ -0,0 +1,2643 @@
+<?xml version="1.0" encoding="UTF-8" standalone="no"?>
+<!-- Created with Inkscape (http://www.inkscape.org/) -->
+<svg
+   xmlns:dc="http://purl.org/dc/elements/1.1/"
+   xmlns:cc="http://web.resource.org/cc/"
+   xmlns:rdf="http://www.w3.org/1999/02/22-rdf-syntax-ns#"
+   xmlns:svg="http://www.w3.org/2000/svg"
+   xmlns="http://www.w3.org/2000/svg"
+   xmlns:xlink="http://www.w3.org/1999/xlink"
+   xmlns:sodipodi="http://inkscape.sourceforge.net/DTD/sodipodi-0.dtd"
+   xmlns:inkscape="http://www.inkscape.org/namespaces/inkscape"
+   width="1024.0000px"
+   height="768.00000px"
+   id="svg2"
+   sodipodi:version="0.32"
+   inkscape:version="0.41"
+   sodipodi:docbase="/home/egore/source/lincity-ng/data/images/mainmenu"
+   sodipodi:docname="newgame_back.svg"
+   inkscape:export-filename="/home/egore/source/lincity-ng/data/images/mainmenu/newgame_back.png"
+   inkscape:export-xdpi="90.000000"
+   inkscape:export-ydpi="90.000000">
+  <defs
+     id="defs3">
+    <linearGradient
+       id="linearGradient2542">
+      <stop
+         id="stop2544"
+         offset="0.0000000"
+         style="stop-color:#ffffff;stop-opacity:1.0000000;" />
+      <stop
+         id="stop2546"
+         offset="1.0000000"
+         style="stop-color:#e2ecff;stop-opacity:1.0000000;" />
+    </linearGradient>
+    <radialGradient
+       gradientUnits="userSpaceOnUse"
+       r="787.10168"
+       fy="473.20316"
+       fx="823.91541"
+       cy="473.20316"
+       cx="823.91541"
+       gradientTransform="matrix(1.162983,0.000000,0.000000,0.859900,8.931699e-3,1.615128e-2)"
+       id="radialGradient2550"
+       xlink:href="#linearGradient2542"
+       inkscape:collect="always" />
+    <linearGradient
+       y2="251.97037"
+       x2="951.85889"
+       y1="252.73389"
+       x1="980.05762"
+       gradientTransform="matrix(0.528968,0.000000,0.000000,1.665511,59.29371,150.9788)"
+       gradientUnits="userSpaceOnUse"
+       id="linearGradient3164"
+       xlink:href="#linearGradient12007"
+       inkscape:collect="always" />
+    <linearGradient
+       y2="561.56354"
+       x2="433.36017"
+       y1="572.72632"
+       x1="444.73392"
+       gradientTransform="matrix(1.122877,0.000000,0.000000,0.784593,59.29371,150.9788)"
+       gradientUnits="userSpaceOnUse"
+       id="linearGradient3162"
+       xlink:href="#linearGradient12007"
+       inkscape:collect="always" />
+    <linearGradient
+       y2="337.93430"
+       x2="687.44537"
+       y1="357.65839"
+       x1="712.84912"
+       spreadMethod="pad"
+       gradientTransform="matrix(0.716700,0.000000,0.000000,1.229248,59.29371,150.9788)"
+       gradientUnits="userSpaceOnUse"
+       id="linearGradient3160"
+       xlink:href="#linearGradient14361"
+       inkscape:collect="always" />
+    <linearGradient
+       y2="251.97037"
+       x2="951.85889"
+       y1="252.73389"
+       x1="980.05762"
+       gradientTransform="matrix(0.563561,0.000000,0.000000,1.774431,-19.24287,143.8764)"
+       gradientUnits="userSpaceOnUse"
+       id="linearGradient3158"
+       xlink:href="#linearGradient12007"
+       inkscape:collect="always" />
+    <linearGradient
+       y2="561.56354"
+       x2="433.36017"
+       y1="572.72632"
+       x1="444.73392"
+       gradientTransform="matrix(1.196310,0.000000,0.000000,0.835903,-19.24287,143.8764)"
+       gradientUnits="userSpaceOnUse"
+       id="linearGradient3156"
+       xlink:href="#linearGradient12007"
+       inkscape:collect="always" />
+    <linearGradient
+       y2="337.93430"
+       x2="687.44537"
+       y1="357.65839"
+       x1="712.84912"
+       spreadMethod="pad"
+       gradientTransform="matrix(0.763570,0.000000,0.000000,1.309637,-19.24287,143.8764)"
+       gradientUnits="userSpaceOnUse"
+       id="linearGradient3154"
+       xlink:href="#linearGradient14361"
+       inkscape:collect="always" />
+    <linearGradient
+       y2="251.97037"
+       x2="951.85889"
+       y1="252.73389"
+       x1="980.05762"
+       gradientTransform="matrix(0.528968,0.000000,0.000000,1.665511,67.09219,78.66556)"
+       gradientUnits="userSpaceOnUse"
+       id="linearGradient3152"
+       xlink:href="#linearGradient12007"
+       inkscape:collect="always" />
+    <linearGradient
+       y2="561.56354"
+       x2="433.36017"
+       y1="572.72632"
+       x1="444.73392"
+       gradientTransform="matrix(1.122877,0.000000,0.000000,0.784593,67.09219,78.66556)"
+       gradientUnits="userSpaceOnUse"
+       id="linearGradient3150"
+       xlink:href="#linearGradient12007"
+       inkscape:collect="always" />
+    <linearGradient
+       y2="337.93430"
+       x2="687.44537"
+       y1="357.65839"
+       x1="712.84912"
+       spreadMethod="pad"
+       gradientTransform="matrix(0.716700,0.000000,0.000000,1.229248,67.09219,78.66556)"
+       gradientUnits="userSpaceOnUse"
+       id="linearGradient3148"
+       xlink:href="#linearGradient14361"
+       inkscape:collect="always" />
+    <linearGradient
+       y2="251.97037"
+       x2="951.85889"
+       y1="252.73389"
+       x1="980.05762"
+       gradientTransform="matrix(0.563561,0.000000,0.000000,1.774431,-11.44439,71.56316)"
+       gradientUnits="userSpaceOnUse"
+       id="linearGradient3146"
+       xlink:href="#linearGradient12007"
+       inkscape:collect="always" />
+    <linearGradient
+       y2="561.56354"
+       x2="433.36017"
+       y1="572.72632"
+       x1="444.73392"
+       gradientTransform="matrix(1.196310,0.000000,0.000000,0.835903,-11.44439,71.56316)"
+       gradientUnits="userSpaceOnUse"
+       id="linearGradient3144"
+       xlink:href="#linearGradient12007"
+       inkscape:collect="always" />
+    <linearGradient
+       y2="337.93430"
+       x2="687.44537"
+       y1="357.65839"
+       x1="712.84912"
+       spreadMethod="pad"
+       gradientTransform="matrix(0.763570,0.000000,0.000000,1.309637,-11.44439,71.56316)"
+       gradientUnits="userSpaceOnUse"
+       id="linearGradient3142"
+       xlink:href="#linearGradient14361"
+       inkscape:collect="always" />
+    <linearGradient
+       y2="251.97037"
+       x2="951.85889"
+       y1="252.73389"
+       x1="980.05762"
+       gradientTransform="matrix(0.528968,0.000000,0.000000,1.665511,81.37239,4.266576)"
+       gradientUnits="userSpaceOnUse"
+       id="linearGradient3140"
+       xlink:href="#linearGradient12007"
+       inkscape:collect="always" />
+    <linearGradient
+       y2="561.56354"
+       x2="433.36017"
+       y1="572.72632"
+       x1="444.73392"
+       gradientTransform="matrix(1.122877,0.000000,0.000000,0.784593,81.37239,4.266576)"
+       gradientUnits="userSpaceOnUse"
+       id="linearGradient3138"
+       xlink:href="#linearGradient12007"
+       inkscape:collect="always" />
+    <linearGradient
+       y2="337.93430"
+       x2="687.44537"
+       y1="357.65839"
+       x1="712.84912"
+       spreadMethod="pad"
+       gradientTransform="matrix(0.716700,0.000000,0.000000,1.229248,81.37239,4.266576)"
+       gradientUnits="userSpaceOnUse"
+       id="linearGradient3136"
+       xlink:href="#linearGradient14361"
+       inkscape:collect="always" />
+    <linearGradient
+       y2="251.97037"
+       x2="951.85889"
+       y1="252.73389"
+       x1="980.05762"
+       gradientTransform="matrix(0.563561,0.000000,0.000000,1.774431,2.835812,-2.835812)"
+       gradientUnits="userSpaceOnUse"
+       id="linearGradient3134"
+       xlink:href="#linearGradient12007"
+       inkscape:collect="always" />
+    <linearGradient
+       y2="561.56354"
+       x2="433.36017"
+       y1="572.72632"
+       x1="444.73392"
+       gradientTransform="matrix(1.196310,0.000000,0.000000,0.835903,2.835812,-2.835812)"
+       gradientUnits="userSpaceOnUse"
+       id="linearGradient3132"
+       xlink:href="#linearGradient12007"
+       inkscape:collect="always" />
+    <linearGradient
+       y2="337.93430"
+       x2="687.44537"
+       y1="357.65839"
+       x1="712.84912"
+       spreadMethod="pad"
+       gradientTransform="matrix(0.763570,0.000000,0.000000,1.309637,2.835812,-2.835812)"
+       gradientUnits="userSpaceOnUse"
+       id="linearGradient3130"
+       xlink:href="#linearGradient14361"
+       inkscape:collect="always" />
+    <radialGradient
+       r="40.587261"
+       fy="450.40305"
+       fx="333.19595"
+       cy="450.40305"
+       cx="333.19595"
+       gradientTransform="matrix(1.106581,0.000000,0.000000,1.440952,26.43917,-29.74596)"
+       gradientUnits="userSpaceOnUse"
+       id="radialGradient3128"
+       xlink:href="#linearGradient14361"
+       inkscape:collect="always" />
+    <linearGradient
+       y2="412.35938"
+       x2="235.34807"
+       y1="428.89398"
+       x1="234.28046"
+       gradientTransform="matrix(1.616759,-8.925547e-2,6.236585e-2,1.129685,44.48813,152.7824)"
+       gradientUnits="userSpaceOnUse"
+       id="linearGradient3126"
+       xlink:href="#linearGradient12007"
+       inkscape:collect="always" />
+    <linearGradient
+       y2="184.97871"
+       x2="495.91205"
+       y1="183.69188"
+       x1="476.78058"
+       gradientTransform="matrix(0.761627,-4.204668e-2,0.132389,2.398063,44.48813,152.7824)"
+       gradientUnits="userSpaceOnUse"
+       id="linearGradient3124"
+       xlink:href="#linearGradient12007"
+       inkscape:collect="always" />
+    <linearGradient
+       y2="265.41870"
+       x2="376.08069"
+       y1="254.70479"
+       x1="367.53497"
+       spreadMethod="pad"
+       gradientTransform="matrix(1.031931,-5.696918e-2,9.771068e-2,1.769915,44.48813,152.7824)"
+       gradientUnits="userSpaceOnUse"
+       id="linearGradient3122"
+       xlink:href="#linearGradient14361"
+       inkscape:collect="always" />
+    <linearGradient
+       y2="412.35938"
+       x2="235.34807"
+       y1="428.89398"
+       x1="234.28046"
+       gradientTransform="matrix(1.550831,-4.041663e-2,2.824048e-2,1.083619,36.70750,135.0155)"
+       gradientUnits="userSpaceOnUse"
+       id="linearGradient3120"
+       xlink:href="#linearGradient12007"
+       inkscape:collect="always" />
+    <linearGradient
+       y2="184.97871"
+       x2="495.91205"
+       y1="183.69188"
+       x1="476.78058"
+       gradientTransform="matrix(0.730570,-1.903956e-2,5.994802e-2,2.300273,36.70750,135.0155)"
+       gradientUnits="userSpaceOnUse"
+       id="linearGradient3118"
+       xlink:href="#linearGradient12007"
+       inkscape:collect="always" />
+    <linearGradient
+       y2="265.41870"
+       x2="376.08069"
+       y1="254.70479"
+       x1="367.53497"
+       spreadMethod="pad"
+       gradientTransform="matrix(0.989848,-2.579676e-2,4.424532e-2,1.697741,36.70750,135.0155)"
+       gradientUnits="userSpaceOnUse"
+       id="linearGradient3116"
+       xlink:href="#linearGradient14361"
+       inkscape:collect="always" />
+    <linearGradient
+       y2="412.35938"
+       x2="235.34807"
+       y1="428.89398"
+       x1="234.28046"
+       gradientTransform="matrix(1.507985,-8.950081e-2,6.253724e-2,1.053680,-2.690666,135.3850)"
+       gradientUnits="userSpaceOnUse"
+       id="linearGradient3114"
+       xlink:href="#linearGradient12007"
+       inkscape:collect="always" />
+    <linearGradient
+       y2="184.97871"
+       x2="495.91205"
+       y1="183.69188"
+       x1="476.78058"
+       gradientTransform="matrix(0.710385,-4.216225e-2,0.132753,2.236720,-2.690666,135.3850)"
+       gradientUnits="userSpaceOnUse"
+       id="linearGradient3112"
+       xlink:href="#linearGradient12007"
+       inkscape:collect="always" />
+    <linearGradient
+       y2="265.41870"
+       x2="376.08069"
+       y1="254.70479"
+       x1="367.53497"
+       spreadMethod="pad"
+       gradientTransform="matrix(0.962502,-5.712573e-2,9.797925e-2,1.650836,-2.690666,135.3850)"
+       gradientUnits="userSpaceOnUse"
+       id="linearGradient3110"
+       xlink:href="#linearGradient14361"
+       inkscape:collect="always" />
+    <linearGradient
+       y2="412.35938"
+       x2="235.34807"
+       y1="428.89398"
+       x1="234.28046"
+       gradientTransform="matrix(1.618321,-5.394730e-2,3.769483e-2,1.130777,56.34194,71.89187)"
+       gradientUnits="userSpaceOnUse"
+       id="linearGradient3108"
+       xlink:href="#linearGradient12007"
+       inkscape:collect="always" />
+    <linearGradient
+       y2="184.97871"
+       x2="495.91205"
+       y1="183.69188"
+       x1="476.78058"
+       gradientTransform="matrix(0.762363,-2.541363e-2,8.001749e-2,2.400380,56.34194,71.89187)"
+       gradientUnits="userSpaceOnUse"
+       id="linearGradient3106"
+       xlink:href="#linearGradient12007"
+       inkscape:collect="always" />
+    <linearGradient
+       y2="265.41870"
+       x2="376.08069"
+       y1="254.70479"
+       x1="367.53497"
+       spreadMethod="pad"
+       gradientTransform="matrix(1.032928,-3.443300e-2,5.905777e-2,1.771626,56.34194,71.89187)"
+       gradientUnits="userSpaceOnUse"
+       id="linearGradient3104"
+       xlink:href="#linearGradient14361"
+       inkscape:collect="always" />
+    <linearGradient
+       y2="412.35938"
+       x2="235.34807"
+       y1="428.89398"
+       x1="234.28046"
+       gradientTransform="matrix(1.550144,-6.132119e-2,4.284719e-2,1.083139,31.87589,68.85415)"
+       gradientUnits="userSpaceOnUse"
+       id="linearGradient3102"
+       xlink:href="#linearGradient12007"
+       inkscape:collect="always" />
+    <linearGradient
+       y2="184.97871"
+       x2="495.91205"
+       y1="183.69188"
+       x1="476.78058"
+       gradientTransform="matrix(0.730245,-2.888733e-2,9.095472e-2,2.299254,31.87589,68.85415)"
+       gradientUnits="userSpaceOnUse"
+       id="linearGradient3100"
+       xlink:href="#linearGradient12007"
+       inkscape:collect="always" />
+    <linearGradient
+       y2="265.41870"
+       x2="376.08069"
+       y1="254.70479"
+       x1="367.53497"
+       spreadMethod="pad"
+       gradientTransform="matrix(0.989412,-3.913949e-2,6.713013e-2,1.696989,31.87589,68.85415)"
+       gradientUnits="userSpaceOnUse"
+       id="linearGradient3098"
+       xlink:href="#linearGradient14361"
+       inkscape:collect="always" />
+    <linearGradient
+       y2="412.35938"
+       x2="235.34807"
+       y1="428.89398"
+       x1="234.28046"
+       gradientTransform="matrix(1.508728,-7.593927e-2,5.306093e-2,1.054199,0.789503,59.90794)"
+       gradientUnits="userSpaceOnUse"
+       id="linearGradient3096"
+       xlink:href="#linearGradient12007"
+       inkscape:collect="always" />
+    <linearGradient
+       y2="184.97871"
+       x2="495.91205"
+       y1="183.69188"
+       x1="476.78058"
+       gradientTransform="matrix(0.710735,-3.577338e-2,0.112636,2.237823,0.789503,59.90794)"
+       gradientUnits="userSpaceOnUse"
+       id="linearGradient3094"
+       xlink:href="#linearGradient12007"
+       inkscape:collect="always" />
+    <linearGradient
+       y2="265.41870"
+       x2="376.08069"
+       y1="254.70479"
+       x1="367.53497"
+       spreadMethod="pad"
+       gradientTransform="matrix(0.962977,-4.846939e-2,8.313217e-2,1.651650,0.789503,59.90794)"
+       gradientUnits="userSpaceOnUse"
+       id="linearGradient3092"
+       xlink:href="#linearGradient14361"
+       inkscape:collect="always" />
+    <linearGradient
+       y2="412.35938"
+       x2="235.34807"
+       y1="428.89398"
+       x1="234.28046"
+       gradientTransform="matrix(1.619220,0.000000,0.000000,1.131405,78.14069,-12.23653)"
+       gradientUnits="userSpaceOnUse"
+       id="linearGradient3090"
+       xlink:href="#linearGradient12007"
+       inkscape:collect="always" />
+    <linearGradient
+       y2="184.97871"
+       x2="495.91205"
+       y1="183.69188"
+       x1="476.78058"
+       gradientTransform="matrix(0.762786,0.000000,0.000000,2.401713,78.14069,-12.23653)"
+       gradientUnits="userSpaceOnUse"
+       id="linearGradient3088"
+       xlink:href="#linearGradient12007"
+       inkscape:collect="always" />
+    <linearGradient
+       y2="412.35938"
+       x2="235.34807"
+       y1="428.89398"
+       x1="234.28046"
+       gradientTransform="matrix(1.551358,0.000000,0.000000,1.083986,54.27672,-17.11976)"
+       gradientUnits="userSpaceOnUse"
+       id="linearGradient3086"
+       xlink:href="#linearGradient12007"
+       inkscape:collect="always" />
+    <linearGradient
+       y2="184.97871"
+       x2="495.91205"
+       y1="183.69188"
+       x1="476.78058"
+       gradientTransform="matrix(0.730817,0.000000,0.000000,2.301053,54.27672,-17.11976)"
+       gradientUnits="userSpaceOnUse"
+       id="linearGradient3084"
+       xlink:href="#linearGradient12007"
+       inkscape:collect="always" />
+    <linearGradient
+       y2="265.41870"
+       x2="376.08069"
+       y1="254.70479"
+       x1="367.53497"
+       spreadMethod="pad"
+       gradientTransform="matrix(0.990186,0.000000,0.000000,1.698318,54.27672,-17.11976)"
+       gradientUnits="userSpaceOnUse"
+       id="linearGradient3082"
+       xlink:href="#linearGradient14361"
+       inkscape:collect="always" />
+    <linearGradient
+       y2="412.35938"
+       x2="235.34807"
+       y1="428.89398"
+       x1="234.28046"
+       gradientTransform="matrix(1.510638,0.000000,0.000000,1.055534,26.43917,-29.74596)"
+       gradientUnits="userSpaceOnUse"
+       id="linearGradient3080"
+       xlink:href="#linearGradient12007"
+       inkscape:collect="always" />
+    <linearGradient
+       y2="184.97871"
+       x2="495.91205"
+       y1="183.69188"
+       x1="476.78058"
+       gradientTransform="matrix(0.711635,0.000000,0.000000,2.240656,26.43917,-29.74596)"
+       gradientUnits="userSpaceOnUse"
+       id="linearGradient3078"
+       xlink:href="#linearGradient12007"
+       inkscape:collect="always" />
+    <linearGradient
+       y2="265.41870"
+       x2="376.08069"
+       y1="254.70479"
+       x1="367.53497"
+       spreadMethod="pad"
+       gradientTransform="matrix(0.964196,0.000000,0.000000,1.653741,26.43917,-29.74596)"
+       gradientUnits="userSpaceOnUse"
+       id="linearGradient3076"
+       xlink:href="#linearGradient14361"
+       inkscape:collect="always" />
+    <linearGradient
+       y2="265.41870"
+       x2="376.08069"
+       y1="254.70479"
+       x1="367.53497"
+       spreadMethod="pad"
+       gradientTransform="matrix(1.033502,0.000000,0.000000,1.772610,78.14069,-12.23653)"
+       gradientUnits="userSpaceOnUse"
+       id="linearGradient3074"
+       xlink:href="#linearGradient14361"
+       inkscape:collect="always" />
+    <linearGradient
+       y2="293.98172"
+       x2="686.46759"
+       y1="215.95918"
+       x1="655.03217"
+       gradientTransform="matrix(0.842533,0.000000,0.000000,1.892543,26.43917,-29.74596)"
+       gradientUnits="userSpaceOnUse"
+       id="linearGradient3072"
+       xlink:href="#linearGradient11991"
+       inkscape:collect="always" />
+    <linearGradient
+       y2="269.62457"
+       x2="454.40619"
+       y1="230.83006"
+       x1="394.27765"
+       gradientTransform="matrix(0.818038,0.000000,0.000000,1.949213,26.43917,-29.74596)"
+       gradientUnits="userSpaceOnUse"
+       id="linearGradient3070"
+       xlink:href="#linearGradient11999"
+       inkscape:collect="always" />
+    <radialGradient
+       r="106.59798"
+       fy="344.21854"
+       fx="248.40041"
+       cy="344.21854"
+       cx="248.40041"
+       gradientTransform="matrix(1.671004,0.000000,0.000000,0.954234,26.43917,-29.74596)"
+       gradientUnits="userSpaceOnUse"
+       id="radialGradient3068"
+       xlink:href="#linearGradient12007"
+       inkscape:collect="always" />
+    <radialGradient
+       r="109.04317"
+       fy="965.82007"
+       fx="202.21599"
+       cy="965.82007"
+       cx="202.21599"
+       gradientTransform="matrix(2.304414,0.000000,0.000000,0.691946,26.43917,-29.74596)"
+       gradientUnits="userSpaceOnUse"
+       id="radialGradient3066"
+       xlink:href="#linearGradient19109"
+       inkscape:collect="always" />
+    <radialGradient
+       inkscape:collect="always"
+       xlink:href="#linearGradient19109"
+       id="radialGradient22165"
+       gradientTransform="matrix(2.443798,0.000000,0.000000,0.652480,326.2565,-254.3486)"
+       cx="165.64397"
+       cy="422.40503"
+       fx="165.64397"
+       fy="422.40503"
+       r="82.461761"
+       gradientUnits="userSpaceOnUse" />
+    <linearGradient
+       id="linearGradient11999">
+      <stop
+         style="stop-color:#e2e2e2;stop-opacity:1.0000000;"
+         offset="0.0000000"
+         id="stop12001" />
+      <stop
+         style="stop-color:#c9c9c9;stop-opacity:1.0000000;"
+         offset="1.0000000"
+         id="stop12003" />
+    </linearGradient>
+    <linearGradient
+       id="linearGradient11991">
+      <stop
+         style="stop-color:#c9c9c9;stop-opacity:1.0000000;"
+         offset="0.0000000"
+         id="stop11993" />
+      <stop
+         style="stop-color:#8b8b8b;stop-opacity:1.0000000;"
+         offset="1.0000000"
+         id="stop11995" />
+    </linearGradient>
+    <linearGradient
+       id="linearGradient12007">
+      <stop
+         style="stop-color:#bababa;stop-opacity:1.0000000;"
+         offset="0.0000000"
+         id="stop12009" />
+      <stop
+         style="stop-color:#888888;stop-opacity:1.0000000;"
+         offset="1.0000000"
+         id="stop12011" />
+    </linearGradient>
+    <linearGradient
+       id="linearGradient14361">
+      <stop
+         style="stop-color:#c3cde9;stop-opacity:1.0000000;"
+         offset="0.0000000"
+         id="stop14363" />
+      <stop
+         style="stop-color:#698ef6;stop-opacity:1.0000000;"
+         offset="1.0000000"
+         id="stop14365" />
+    </linearGradient>
+    <linearGradient
+       id="linearGradient19109">
+      <stop
+         style="stop-color:#000000;stop-opacity:0.67871487;"
+         offset="0.0000000"
+         id="stop19111" />
+      <stop
+         style="stop-color:#000000;stop-opacity:0;"
+         offset="1"
+         id="stop19113" />
+    </linearGradient>
+    <linearGradient
+       id="linearGradient9030">
+      <stop
+         style="stop-color:#00bfff;stop-opacity:1.0000000;"
+         offset="0.0000000"
+         id="stop9032" />
+      <stop
+         style="stop-color:#0021c8;stop-opacity:0.51405621;"
+         offset="1.0000000"
+         id="stop9034" />
+    </linearGradient>
+    <linearGradient
+       id="linearGradient4960">
+      <stop
+         style="stop-color:#ffffff;stop-opacity:0.73092371;"
+         offset="0.0000000"
+         id="stop4962" />
+      <stop
+         style="stop-color:#ffffff;stop-opacity:0.0000000;"
+         offset="1.0000000"
+         id="stop4964" />
+    </linearGradient>
+    <linearGradient
+       inkscape:collect="always"
+       xlink:href="#linearGradient3618"
+       id="linearGradient3617"
+       gradientTransform="matrix(0.162618,0.000000,0.000000,0.154485,-1.360206,385.5420)"
+       x1="192.48090"
+       y1="824.52606"
+       x2="370.32205"
+       y2="1027.3083"
+       gradientUnits="userSpaceOnUse" />
+    <linearGradient
+       inkscape:collect="always"
+       xlink:href="#linearGradient1738"
+       id="linearGradient1742"
+       gradientTransform="matrix(0.179629,0.000000,0.000000,0.139856,648.7695,483.3827)"
+       x1="482.88602"
+       y1="444.14270"
+       x2="197.87488"
+       y2="303.58148"
+       gradientUnits="userSpaceOnUse" />
+    <radialGradient
+       inkscape:collect="always"
+       xlink:href="#linearGradient2304"
+       id="radialGradient4812"
+       gradientUnits="userSpaceOnUse"
+       cx="272.03766"
+       cy="469.37524"
+       fx="272.03766"
+       fy="469.37524"
+       r="469.63513" />
+    <radialGradient
+       inkscape:collect="always"
+       xlink:href="#linearGradient2304"
+       id="radialGradient4811"
+       gradientUnits="userSpaceOnUse"
+       cx="615.29224"
+       cy="668.54333"
+       fx="615.29224"
+       fy="668.54333"
+       r="494.38043" />
+    <radialGradient
+       inkscape:collect="always"
+       xlink:href="#linearGradient2304"
+       id="radialGradient4810"
+       gradientUnits="userSpaceOnUse"
+       cx="272.03766"
+       cy="469.37524"
+       fx="272.03766"
+       fy="469.37524"
+       r="469.63513" />
+    <radialGradient
+       inkscape:collect="always"
+       xlink:href="#linearGradient2304"
+       id="radialGradient3554"
+       gradientUnits="userSpaceOnUse"
+       cx="272.03766"
+       cy="469.37524"
+       fx="272.03766"
+       fy="469.37524"
+       r="469.63513" />
+    <radialGradient
+       inkscape:collect="always"
+       xlink:href="#linearGradient2304"
+       id="radialGradient2931"
+       gradientUnits="userSpaceOnUse"
+       cx="615.29224"
+       cy="668.54333"
+       fx="615.29224"
+       fy="668.54333"
+       r="494.38043" />
+    <radialGradient
+       inkscape:collect="always"
+       xlink:href="#linearGradient2304"
+       id="radialGradient2308"
+       cx="272.03766"
+       cy="469.37524"
+       fx="272.03766"
+       fy="469.37524"
+       r="469.63513"
+       gradientUnits="userSpaceOnUse" />
+    <linearGradient
+       id="linearGradient2304">
+      <stop
+         style="stop-color:#6a57ff;stop-opacity:1.0000000;"
+         offset="0.0000000"
+         id="stop2305" />
+      <stop
+         style="stop-color:#1300a8;stop-opacity:1.0000000;"
+         offset="1.0000000"
+         id="stop2306" />
+    </linearGradient>
+    <linearGradient
+       id="linearGradient4802">
+      <stop
+         style="stop-color:#8879ff;stop-opacity:1.0000000;"
+         offset="0.0000000"
+         id="stop4803" />
+      <stop
+         style="stop-color:#4e42a8;stop-opacity:1.0000000;"
+         offset="1.0000000"
+         id="stop4804" />
+    </linearGradient>
+    <linearGradient
+       id="linearGradient1738">
+      <stop
+         style="stop-color:#60ff45;stop-opacity:1.0000000;"
+         offset="0.0000000"
+         id="stop1739" />
+      <stop
+         style="stop-color:#0bad00;stop-opacity:1.0000000;"
+         offset="1.0000000"
+         id="stop1740" />
+    </linearGradient>
+    <linearGradient
+       id="linearGradient3618">
+      <stop
+         style="stop-color:#ff0000;stop-opacity:1.0000000;"
+         offset="0.0000000"
+         id="stop3619" />
+      <stop
+         style="stop-color:#860000;stop-opacity:1.0000000;"
+         offset="1.0000000"
+         id="stop3620" />
+    </linearGradient>
+    <radialGradient
+       inkscape:collect="always"
+       xlink:href="#linearGradient4960"
+       id="radialGradient5730"
+       gradientTransform="scale(0.823525,1.214293)"
+       cx="82.180733"
+       cy="211.67548"
+       fx="82.180733"
+       fy="211.67548"
+       r="111.52281"
+       gradientUnits="userSpaceOnUse" />
+    <linearGradient
+       inkscape:collect="always"
+       xlink:href="#linearGradient4960"
+       id="linearGradient6500"
+       gradientTransform="scale(1.075954,0.929408)"
+       x1="63.393742"
+       y1="712.42957"
+       x2="72.464546"
+       y2="719.76025"
+       gradientUnits="userSpaceOnUse" />
+    <linearGradient
+       inkscape:collect="always"
+       xlink:href="#linearGradient4960"
+       id="linearGradient6504"
+       gradientUnits="userSpaceOnUse"
+       gradientTransform="matrix(1.075954,0.000000,0.000000,0.929408,-23.99263,0.925278)"
+       x1="63.393742"
+       y1="712.42957"
+       x2="72.464546"
+       y2="719.76025" />
+    <linearGradient
+       inkscape:collect="always"
+       xlink:href="#linearGradient4960"
+       id="linearGradient6508"
+       gradientUnits="userSpaceOnUse"
+       gradientTransform="matrix(1.075954,0.000000,0.000000,0.929408,-6.266319e-2,0.626632)"
+       x1="680.29120"
+       y1="721.96411"
+       x2="681.54474"
+       y2="737.44690" />
+    <linearGradient
+       inkscape:collect="always"
+       xlink:href="#linearGradient4960"
+       id="linearGradient6512"
+       gradientUnits="userSpaceOnUse"
+       gradientTransform="scale(1.075954,0.929408)"
+       x1="651.09534"
+       y1="720.26569"
+       x2="652.25720"
+       y2="728.05103" />
+    <linearGradient
+       inkscape:collect="always"
+       xlink:href="#linearGradient9030"
+       id="linearGradient9036"
+       gradientTransform="scale(1.016773,0.983503)"
+       x1="565.37469"
+       y1="274.94803"
+       x2="583.97906"
+       y2="295.30374"
+       gradientUnits="userSpaceOnUse" />
+    <linearGradient
+       inkscape:collect="always"
+       xlink:href="#linearGradient9030"
+       id="linearGradient9044"
+       gradientTransform="scale(0.971157,1.029700)"
+       x1="597.34943"
+       y1="541.68359"
+       x2="607.99292"
+       y2="565.82843"
+       gradientUnits="userSpaceOnUse" />
+    <linearGradient
+       inkscape:collect="always"
+       xlink:href="#linearGradient4960"
+       id="linearGradient10584"
+       gradientTransform="scale(0.924716,1.081414)"
+       x1="622.09137"
+       y1="247.68852"
+       x2="628.40155"
+       y2="259.02802"
+       gradientUnits="userSpaceOnUse" />
+    <linearGradient
+       inkscape:collect="always"
+       xlink:href="#linearGradient4960"
+       id="linearGradient11352"
+       gradientTransform="matrix(0.959731,0.000000,0.000000,1.041959,0.000000,258.1723)"
+       x1="596.21234"
+       y1="288.35770"
+       x2="600.57306"
+       y2="294.93091"
+       gradientUnits="userSpaceOnUse" />
+    <linearGradient
+       inkscape:collect="always"
+       xlink:href="#linearGradient2304"
+       id="linearGradient12124"
+       gradientTransform="scale(0.206219,4.849215)"
+       x1="3138.8862"
+       y1="100.32681"
+       x2="2594.4343"
+       y2="79.180443"
+       gradientUnits="userSpaceOnUse" />
+    <linearGradient
+       inkscape:collect="always"
+       xlink:href="#linearGradient4960"
+       id="linearGradient13654"
+       gradientUnits="userSpaceOnUse"
+       gradientTransform="matrix(0.206219,0.000000,0.000000,4.849215,0.224287,0.297193)"
+       x1="3138.8862"
+       y1="100.32681"
+       x2="2594.4343"
+       y2="79.180443" />
+    <linearGradient
+       inkscape:collect="always"
+       xlink:href="#linearGradient9030"
+       id="linearGradient15946"
+       gradientTransform="scale(0.964397,1.036917)"
+       x1="591.66382"
+       y1="370.30008"
+       x2="618.34448"
+       y2="390.74063"
+       gradientUnits="userSpaceOnUse" />
+    <linearGradient
+       inkscape:collect="always"
+       xlink:href="#linearGradient4960"
+       id="linearGradient15950"
+       gradientUnits="userSpaceOnUse"
+       gradientTransform="matrix(0.924716,0.000000,0.000000,1.081414,-4.379882,118.1634)"
+       x1="622.09137"
+       y1="247.68852"
+       x2="628.40155"
+       y2="259.02802" />
+    <radialGradient
+       inkscape:collect="always"
+       xlink:href="#linearGradient14361"
+       id="radialGradient23468"
+       gradientUnits="userSpaceOnUse"
+       gradientTransform="matrix(0.876328,0.000000,0.000000,1.141125,741.3971,-280.0799)"
+       cx="333.19595"
+       cy="450.40305"
+       fx="333.19595"
+       fy="450.40305"
+       r="40.587261" />
+    <linearGradient
+       inkscape:collect="always"
+       xlink:href="#linearGradient12007"
+       id="linearGradient23470"
+       gradientUnits="userSpaceOnUse"
+       gradientTransform="matrix(1.280351,-7.068357e-2,4.938903e-2,0.894625,755.6905,-135.5312)"
+       x1="234.28046"
+       y1="428.89398"
+       x2="235.34807"
+       y2="412.35938" />
+    <linearGradient
+       inkscape:collect="always"
+       xlink:href="#linearGradient12007"
+       id="linearGradient23472"
+       gradientUnits="userSpaceOnUse"
+       gradientTransform="matrix(0.603151,-3.329779e-2,0.104842,1.899084,755.6905,-135.5312)"
+       x1="476.78058"
+       y1="183.69188"
+       x2="495.91205"
+       y2="184.97871" />
+    <linearGradient
+       inkscape:collect="always"
+       xlink:href="#linearGradient14361"
+       id="linearGradient23474"
+       gradientUnits="userSpaceOnUse"
+       gradientTransform="matrix(0.817211,-4.511528e-2,7.737946e-2,1.401639,755.6905,-135.5312)"
+       spreadMethod="pad"
+       x1="367.53497"
+       y1="254.70479"
+       x2="376.08069"
+       y2="265.41870" />
+    <linearGradient
+       inkscape:collect="always"
+       xlink:href="#linearGradient12007"
+       id="linearGradient23476"
+       gradientUnits="userSpaceOnUse"
+       gradientTransform="matrix(1.228141,-3.200691e-2,2.236432e-2,0.858144,749.5288,-149.6013)"
+       x1="234.28046"
+       y1="428.89398"
+       x2="235.34807"
+       y2="412.35938" />
+    <linearGradient
+       inkscape:collect="always"
+       xlink:href="#linearGradient12007"
+       id="linearGradient23478"
+       gradientUnits="userSpaceOnUse"
+       gradientTransform="matrix(0.578556,-1.507789e-2,4.747429e-2,1.821642,749.5288,-149.6013)"
+       x1="476.78058"
+       y1="183.69188"
+       x2="495.91205"
+       y2="184.97871" />
+    <linearGradient
+       inkscape:collect="always"
+       xlink:href="#linearGradient14361"
+       id="linearGradient23480"
+       gradientUnits="userSpaceOnUse"
+       gradientTransform="matrix(0.783885,-2.042908e-2,3.503894e-2,1.344482,749.5288,-149.6013)"
+       spreadMethod="pad"
+       x1="367.53497"
+       y1="254.70479"
+       x2="376.08069"
+       y2="265.41870" />
+    <linearGradient
+       inkscape:collect="always"
+       xlink:href="#linearGradient12007"
+       id="linearGradient23482"
+       gradientUnits="userSpaceOnUse"
+       gradientTransform="matrix(1.194210,-7.087786e-2,4.952476e-2,0.834435,718.3285,-149.3086)"
+       x1="234.28046"
+       y1="428.89398"
+       x2="235.34807"
+       y2="412.35938" />
+    <linearGradient
+       inkscape:collect="always"
+       xlink:href="#linearGradient12007"
+       id="linearGradient23484"
+       gradientUnits="userSpaceOnUse"
+       gradientTransform="matrix(0.562571,-3.338931e-2,0.105130,1.771313,718.3285,-149.3086)"
+       x1="476.78058"
+       y1="183.69188"
+       x2="495.91205"
+       y2="184.97871" />
+    <linearGradient
+       inkscape:collect="always"
+       xlink:href="#linearGradient14361"
+       id="linearGradient23486"
+       gradientUnits="userSpaceOnUse"
+       gradientTransform="matrix(0.762229,-4.523925e-2,7.759215e-2,1.307337,718.3285,-149.3086)"
+       spreadMethod="pad"
+       x1="367.53497"
+       y1="254.70479"
+       x2="376.08069"
+       y2="265.41870" />
+    <linearGradient
+       inkscape:collect="always"
+       xlink:href="#linearGradient12007"
+       id="linearGradient23488"
+       gradientUnits="userSpaceOnUse"
+       gradientTransform="matrix(1.281588,-4.272218e-2,2.985145e-2,0.895490,765.0778,-199.5904)"
+       x1="234.28046"
+       y1="428.89398"
+       x2="235.34807"
+       y2="412.35938" />
+    <linearGradient
+       inkscape:collect="always"
+       xlink:href="#linearGradient12007"
+       id="linearGradient23490"
+       gradientUnits="userSpaceOnUse"
+       gradientTransform="matrix(0.603734,-2.012567e-2,6.336779e-2,1.900919,765.0778,-199.5904)"
+       x1="476.78058"
+       y1="183.69188"
+       x2="495.91205"
+       y2="184.97871" />
+    <linearGradient
+       inkscape:collect="always"
+       xlink:href="#linearGradient14361"
+       id="linearGradient23492"
+       gradientUnits="userSpaceOnUse"
+       gradientTransform="matrix(0.818001,-2.726833e-2,4.676928e-2,1.402994,765.0778,-199.5904)"
+       spreadMethod="pad"
+       x1="367.53497"
+       y1="254.70479"
+       x2="376.08069"
+       y2="265.41870" />
+    <linearGradient
+       inkscape:collect="always"
+       xlink:href="#linearGradient12007"
+       id="linearGradient23494"
+       gradientUnits="userSpaceOnUse"
+       gradientTransform="matrix(1.227597,-4.856174e-2,3.393173e-2,0.857764,745.7026,-201.9960)"
+       x1="234.28046"
+       y1="428.89398"
+       x2="235.34807"
+       y2="412.35938" />
+    <linearGradient
+       inkscape:collect="always"
+       xlink:href="#linearGradient12007"
+       id="linearGradient23496"
+       gradientUnits="userSpaceOnUse"
+       gradientTransform="matrix(0.578299,-2.287658e-2,7.202925e-2,1.820835,745.7026,-201.9960)"
+       x1="476.78058"
+       y1="183.69188"
+       x2="495.91205"
+       y2="184.97871" />
+    <linearGradient
+       inkscape:collect="always"
+       xlink:href="#linearGradient14361"
+       id="linearGradient23498"
+       gradientUnits="userSpaceOnUse"
+       gradientTransform="matrix(0.783539,-3.099551e-2,5.316198e-2,1.343887,745.7026,-201.9960)"
+       spreadMethod="pad"
+       x1="367.53497"
+       y1="254.70479"
+       x2="376.08069"
+       y2="265.41870" />
+    <linearGradient
+       inkscape:collect="always"
+       xlink:href="#linearGradient12007"
+       id="linearGradient23500"
+       gradientUnits="userSpaceOnUse"
+       gradientTransform="matrix(1.194798,-6.013815e-2,4.202024e-2,0.834846,721.0845,-209.0808)"
+       x1="234.28046"
+       y1="428.89398"
+       x2="235.34807"
+       y2="412.35938" />
+    <linearGradient
+       inkscape:collect="always"
+       xlink:href="#linearGradient12007"
+       id="linearGradient23502"
+       gradientUnits="userSpaceOnUse"
+       gradientTransform="matrix(0.562848,-2.832981e-2,8.919912e-2,1.772186,721.0845,-209.0808)"
+       x1="476.78058"
+       y1="183.69188"
+       x2="495.91205"
+       y2="184.97871" />
+    <linearGradient
+       inkscape:collect="always"
+       xlink:href="#linearGradient14361"
+       id="linearGradient23504"
+       gradientUnits="userSpaceOnUse"
+       gradientTransform="matrix(0.762605,-3.838409e-2,6.583438e-2,1.307982,721.0845,-209.0808)"
+       spreadMethod="pad"
+       x1="367.53497"
+       y1="254.70479"
+       x2="376.08069"
+       y2="265.41870" />
+    <linearGradient
+       inkscape:collect="always"
+       xlink:href="#linearGradient12007"
+       id="linearGradient23506"
+       gradientUnits="userSpaceOnUse"
+       gradientTransform="matrix(1.282300,0.000000,0.000000,0.895987,782.3408,-266.2137)"
+       x1="234.28046"
+       y1="428.89398"
+       x2="235.34807"
+       y2="412.35938" />
+    <linearGradient
+       inkscape:collect="always"
+       xlink:href="#linearGradient12007"
+       id="linearGradient23508"
+       gradientUnits="userSpaceOnUse"
+       gradientTransform="matrix(0.604069,0.000000,0.000000,1.901975,782.3408,-266.2137)"
+       x1="476.78058"
+       y1="183.69188"
+       x2="495.91205"
+       y2="184.97871" />
+    <linearGradient
+       inkscape:collect="always"
+       xlink:href="#linearGradient14361"
+       id="linearGradient23510"
+       gradientUnits="userSpaceOnUse"
+       gradientTransform="scale(0.763570,1.309637)"
+       spreadMethod="pad"
+       x1="990.44958"
+       y1="122.82517"
+       x2="1026.7732"
+       y2="145.52820" />
+    <linearGradient
+       inkscape:collect="always"
+       xlink:href="#linearGradient12007"
+       id="linearGradient23512"
+       gradientUnits="userSpaceOnUse"
+       gradientTransform="matrix(1.228558,0.000000,0.000000,0.858435,763.4423,-270.0809)"
+       x1="234.28046"
+       y1="428.89398"
+       x2="235.34807"
+       y2="412.35938" />
+    <linearGradient
+       inkscape:collect="always"
+       xlink:href="#linearGradient12007"
+       id="linearGradient23514"
+       gradientUnits="userSpaceOnUse"
+       gradientTransform="matrix(0.578752,0.000000,0.000000,1.822260,763.4423,-270.0809)"
+       x1="476.78058"
+       y1="183.69188"
+       x2="495.91205"
+       y2="184.97871" />
+    <linearGradient
+       inkscape:collect="always"
+       xlink:href="#linearGradient14361"
+       id="linearGradient23516"
+       gradientUnits="userSpaceOnUse"
+       gradientTransform="matrix(0.784152,0.000000,0.000000,1.344939,763.4423,-270.0809)"
+       spreadMethod="pad"
+       x1="367.53497"
+       y1="254.70479"
+       x2="376.08069"
+       y2="265.41870" />
+    <linearGradient
+       inkscape:collect="always"
+       xlink:href="#linearGradient12007"
+       id="linearGradient23518"
+       gradientUnits="userSpaceOnUse"
+       gradientTransform="matrix(1.196311,0.000000,0.000000,0.835903,741.3971,-280.0799)"
+       x1="234.28046"
+       y1="428.89398"
+       x2="235.34807"
+       y2="412.35938" />
+    <linearGradient
+       inkscape:collect="always"
+       xlink:href="#linearGradient12007"
+       id="linearGradient23520"
+       gradientUnits="userSpaceOnUse"
+       gradientTransform="matrix(0.563561,0.000000,0.000000,1.774430,741.3971,-280.0799)"
+       x1="476.78058"
+       y1="183.69188"
+       x2="495.91205"
+       y2="184.97871" />
+    <linearGradient
+       inkscape:collect="always"
+       xlink:href="#linearGradient14361"
+       id="linearGradient23522"
+       gradientUnits="userSpaceOnUse"
+       gradientTransform="matrix(0.763570,0.000000,0.000000,1.309638,741.3971,-280.0799)"
+       spreadMethod="pad"
+       x1="367.53497"
+       y1="254.70479"
+       x2="376.08069"
+       y2="265.41870" />
+    <linearGradient
+       inkscape:collect="always"
+       xlink:href="#linearGradient11991"
+       id="linearGradient23524"
+       gradientUnits="userSpaceOnUse"
+       gradientTransform="matrix(0.667222,0.000000,0.000000,1.498751,741.3971,-280.0799)"
+       x1="655.03217"
+       y1="215.95918"
+       x2="686.46759"
+       y2="293.98172" />
+    <linearGradient
+       inkscape:collect="always"
+       xlink:href="#linearGradient11999"
+       id="linearGradient23526"
+       gradientUnits="userSpaceOnUse"
+       gradientTransform="matrix(0.647824,0.000000,0.000000,1.543629,741.3971,-280.0799)"
+       x1="394.27765"
+       y1="230.83006"
+       x2="454.40619"
+       y2="269.62457" />
+    <radialGradient
+       inkscape:collect="always"
+       xlink:href="#linearGradient12007"
+       id="radialGradient23528"
+       gradientUnits="userSpaceOnUse"
+       gradientTransform="matrix(1.323309,0.000000,0.000000,0.755681,741.3971,-280.0799)"
+       cx="248.40041"
+       cy="344.21854"
+       fx="248.40041"
+       fy="344.21854"
+       r="106.59798" />
+    <radialGradient
+       inkscape:collect="always"
+       xlink:href="#linearGradient19109"
+       id="radialGradient23530"
+       gradientUnits="userSpaceOnUse"
+       gradientTransform="matrix(2.146091,0.000000,0.000000,0.653803,364.2777,-102.2402)"
+       cx="202.21599"
+       cy="965.82007"
+       fx="202.21599"
+       fy="965.82007"
+       r="109.04317" />
+    <radialGradient
+       gradientUnits="userSpaceOnUse"
+       r="247.83467"
+       fy="776.96881"
+       fx="60.051296"
+       cy="776.96881"
+       cx="60.051296"
+       gradientTransform="matrix(1.883522,0.000000,0.000000,0.846568,19.44520,10.81907)"
+       id="radialGradient28433"
+       xlink:href="#linearGradient28427"
+       inkscape:collect="always" />
+    <radialGradient
+       r="279.10022"
+       fy="823.55896"
+       fx="72.217499"
+       cy="823.55896"
+       cx="72.217499"
+       gradientTransform="matrix(2.304414,0.000000,0.000000,0.691946,19.44520,10.81907)"
+       gradientUnits="userSpaceOnUse"
+       id="radialGradient23847"
+       xlink:href="#linearGradient19109"
+       inkscape:collect="always" />
+    <linearGradient
+       spreadMethod="pad"
+       gradientUnits="userSpaceOnUse"
+       y2="864.99774"
+       x2="149.30901"
+       y1="611.94214"
+       x1="33.550251"
+       gradientTransform="matrix(1.709511,0.000000,0.000000,0.932741,19.44520,10.81907)"
+       id="linearGradient23831"
+       xlink:href="#linearGradient23833"
+       inkscape:collect="always" />
+    <linearGradient
+       y2="265.41870"
+       x2="376.08069"
+       y1="254.70479"
+       x1="367.53497"
+       spreadMethod="pad"
+       gradientTransform="matrix(1.099226,-8.979644e-2,0.154015,1.885338,-361.4174,73.44542)"
+       gradientUnits="userSpaceOnUse"
+       id="linearGradient23057"
+       xlink:href="#linearGradient14361"
+       inkscape:collect="always" />
+    <linearGradient
+       y2="184.97871"
+       x2="495.91205"
+       y1="183.69188"
+       x1="476.78058"
+       gradientTransform="matrix(0.811295,-6.627516e-2,0.208675,2.554449,-361.4174,73.44542)"
+       gradientUnits="userSpaceOnUse"
+       id="linearGradient23055"
+       xlink:href="#linearGradient12007"
+       inkscape:collect="always" />
+    <linearGradient
+       y2="412.35938"
+       x2="235.34807"
+       y1="428.89398"
+       x1="234.28046"
+       gradientTransform="matrix(1.722194,-0.140686,9.830286e-2,1.203356,-361.4174,73.44542)"
+       gradientUnits="userSpaceOnUse"
+       id="linearGradient23053"
+       xlink:href="#linearGradient12007"
+       inkscape:collect="always" />
+    <linearGradient
+       y2="265.41870"
+       x2="376.08069"
+       y1="254.70479"
+       x1="367.53497"
+       spreadMethod="pad"
+       gradientTransform="matrix(1.025909,-0.125048,0.214475,1.759586,-393.6883,88.65435)"
+       gradientUnits="userSpaceOnUse"
+       id="linearGradient23051"
+       xlink:href="#linearGradient14361"
+       inkscape:collect="always" />
+    <linearGradient
+       y2="184.97871"
+       x2="495.91205"
+       y1="183.69188"
+       x1="476.78058"
+       gradientTransform="matrix(0.757182,-9.229261e-2,0.290593,2.384068,-393.6883,88.65435)"
+       gradientUnits="userSpaceOnUse"
+       id="linearGradient23049"
+       xlink:href="#linearGradient12007"
+       inkscape:collect="always" />
+    <linearGradient
+       y2="412.35938"
+       x2="235.34807"
+       y1="428.89398"
+       x1="234.28046"
+       gradientTransform="matrix(1.607324,-0.195916,0.136893,1.123092,-393.6883,88.65435)"
+       gradientUnits="userSpaceOnUse"
+       id="linearGradient23047"
+       xlink:href="#linearGradient12007"
+       inkscape:collect="always" />
+    <linearGradient
+       y2="265.41870"
+       x2="376.08069"
+       y1="254.70479"
+       x1="367.53497"
+       spreadMethod="pad"
+       gradientTransform="matrix(1.096066,-0.122485,0.210081,1.879917,-375.0624,7.047793)"
+       gradientUnits="userSpaceOnUse"
+       id="linearGradient23033"
+       xlink:href="#linearGradient14361"
+       inkscape:collect="always" />
+    <linearGradient
+       y2="184.97871"
+       x2="495.91205"
+       y1="183.69188"
+       x1="476.78058"
+       gradientTransform="matrix(0.808962,-9.040137e-2,0.284638,2.547103,-375.0624,7.047793)"
+       gradientUnits="userSpaceOnUse"
+       id="linearGradient23031"
+       xlink:href="#linearGradient12007"
+       inkscape:collect="always" />
+    <linearGradient
+       y2="412.35938"
+       x2="235.34807"
+       y1="428.89398"
+       x1="234.28046"
+       gradientTransform="matrix(1.717241,-0.191901,0.134089,1.199896,-375.0624,7.047793)"
+       gradientUnits="userSpaceOnUse"
+       id="linearGradient23029"
+       xlink:href="#linearGradient12007"
+       inkscape:collect="always" />
+    <linearGradient
+       y2="265.41870"
+       x2="376.08069"
+       y1="254.70479"
+       x1="367.53497"
+       spreadMethod="pad"
+       gradientTransform="matrix(1.025112,-0.131424,0.225413,1.758220,-396.9023,11.47477)"
+       gradientUnits="userSpaceOnUse"
+       id="linearGradient23027"
+       xlink:href="#linearGradient14361"
+       inkscape:collect="always" />
+    <linearGradient
+       y2="184.97871"
+       x2="495.91205"
+       y1="183.69188"
+       x1="476.78058"
+       gradientTransform="matrix(0.756594,-9.699938e-2,0.305413,2.382215,-396.9023,11.47477)"
+       gradientUnits="userSpaceOnUse"
+       id="linearGradient23025"
+       xlink:href="#linearGradient12007"
+       inkscape:collect="always" />
+    <linearGradient
+       y2="412.35938"
+       x2="235.34807"
+       y1="428.89398"
+       x1="234.28046"
+       gradientTransform="matrix(1.606075,-0.205907,0.143875,1.122220,-396.9023,11.47477)"
+       gradientUnits="userSpaceOnUse"
+       id="linearGradient23023"
+       xlink:href="#linearGradient12007"
+       inkscape:collect="always" />
+    <linearGradient
+       y2="265.41870"
+       x2="376.08069"
+       y1="254.70479"
+       x1="367.53497"
+       spreadMethod="pad"
+       gradientTransform="matrix(1.102882,-3.734009e-3,6.404399e-3,1.891608,-321.9816,-116.1682)"
+       gradientUnits="userSpaceOnUse"
+       id="linearGradient23009"
+       xlink:href="#linearGradient14361"
+       inkscape:collect="always" />
+    <linearGradient
+       y2="184.97871"
+       x2="495.91205"
+       y1="183.69188"
+       x1="476.78058"
+       gradientTransform="matrix(0.813993,-2.755912e-3,8.677855e-3,2.562943,-321.9816,-116.1682)"
+       gradientUnits="userSpaceOnUse"
+       id="linearGradient23007"
+       xlink:href="#linearGradient12007"
+       inkscape:collect="always" />
+    <linearGradient
+       y2="412.35938"
+       x2="235.34807"
+       y1="428.89398"
+       x1="234.28046"
+       gradientTransform="matrix(1.727920,-5.850188e-3,4.087732e-3,1.207358,-321.9816,-116.1682)"
+       gradientUnits="userSpaceOnUse"
+       id="linearGradient23005"
+       xlink:href="#linearGradient12007"
+       inkscape:collect="always" />
+    <linearGradient
+       y2="265.41870"
+       x2="376.08069"
+       y1="254.70479"
+       x1="367.53497"
+       spreadMethod="pad"
+       gradientTransform="matrix(1.031931,-5.696918e-2,9.771068e-2,1.769915,-362.8642,-94.58430)"
+       gradientUnits="userSpaceOnUse"
+       id="linearGradient23003"
+       xlink:href="#linearGradient14361"
+       inkscape:collect="always" />
+    <linearGradient
+       y2="184.97871"
+       x2="495.91205"
+       y1="183.69188"
+       x1="476.78058"
+       gradientTransform="matrix(0.761627,-4.204668e-2,0.132389,2.398063,-362.8642,-94.58430)"
+       gradientUnits="userSpaceOnUse"
+       id="linearGradient23001"
+       xlink:href="#linearGradient12007"
+       inkscape:collect="always" />
+    <linearGradient
+       y2="412.35938"
+       x2="235.34807"
+       y1="428.89398"
+       x1="234.28046"
+       gradientTransform="matrix(1.616759,-8.925547e-2,6.236585e-2,1.129685,-362.8642,-94.58430)"
+       gradientUnits="userSpaceOnUse"
+       id="linearGradient22999"
+       xlink:href="#linearGradient12007"
+       inkscape:collect="always" />
+    <linearGradient
+       y2="265.41870"
+       x2="376.08069"
+       y1="254.70479"
+       x1="367.53497"
+       spreadMethod="pad"
+       gradientTransform="matrix(1.031931,-5.696918e-2,9.771068e-2,1.769915,-357.3477,-175.1718)"
+       gradientUnits="userSpaceOnUse"
+       id="linearGradient22985"
+       xlink:href="#linearGradient14361"
+       inkscape:collect="always" />
+    <linearGradient
+       y2="184.97871"
+       x2="495.91205"
+       y1="183.69188"
+       x1="476.78058"
+       gradientTransform="matrix(0.761627,-4.204668e-2,0.132389,2.398063,-357.3477,-175.1718)"
+       gradientUnits="userSpaceOnUse"
+       id="linearGradient22983"
+       xlink:href="#linearGradient12007"
+       inkscape:collect="always" />
+    <linearGradient
+       y2="412.35938"
+       x2="235.34807"
+       y1="428.89398"
+       x1="234.28046"
+       gradientTransform="matrix(1.616759,-8.925547e-2,6.236585e-2,1.129685,-357.3477,-175.1718)"
+       gradientUnits="userSpaceOnUse"
+       id="linearGradient22981"
+       xlink:href="#linearGradient12007"
+       inkscape:collect="always" />
+    <linearGradient
+       y2="265.41870"
+       x2="376.08069"
+       y1="254.70479"
+       x1="367.53497"
+       spreadMethod="pad"
+       gradientTransform="matrix(1.102882,-3.734009e-3,6.404399e-3,1.891608,-317.4543,-194.2829)"
+       gradientUnits="userSpaceOnUse"
+       id="linearGradient22973"
+       xlink:href="#linearGradient14361"
+       inkscape:collect="always" />
+    <linearGradient
+       y2="184.97871"
+       x2="495.91205"
+       y1="183.69188"
+       x1="476.78058"
+       gradientTransform="matrix(0.813993,-2.755912e-3,8.677855e-3,2.562943,-317.4543,-194.2829)"
+       gradientUnits="userSpaceOnUse"
+       id="linearGradient22971"
+       xlink:href="#linearGradient12007"
+       inkscape:collect="always" />
+    <linearGradient
+       y2="412.35938"
+       x2="235.34807"
+       y1="428.89398"
+       x1="234.28046"
+       gradientTransform="matrix(1.727920,-5.850188e-3,4.087732e-3,1.207358,-317.4543,-194.2829)"
+       gradientUnits="userSpaceOnUse"
+       id="linearGradient22969"
+       xlink:href="#linearGradient12007"
+       inkscape:collect="always" />
+    <radialGradient
+       gradientUnits="userSpaceOnUse"
+       r="101.66785"
+       fy="134.69154"
+       fx="33.917580"
+       cy="134.69154"
+       cx="33.917580"
+       gradientTransform="matrix(1.369330,0.000000,0.000000,1.164460,19.44520,10.81907)"
+       id="radialGradient22961"
+       xlink:href="#linearGradient22931"
+       inkscape:collect="always" />
+    <linearGradient
+       gradientUnits="userSpaceOnUse"
+       y2="171.45183"
+       x2="42.257313"
+       y1="104.70185"
+       x1="-45.389553"
+       gradientTransform="matrix(0.652578,0.000000,0.000000,2.443434,19.44520,10.81907)"
+       id="linearGradient22945"
+       xlink:href="#linearGradient22939"
+       inkscape:collect="always" />
+    <linearGradient
+       gradientUnits="userSpaceOnUse"
+       y2="199.91158"
+       x2="247.58649"
+       y1="135.30980"
+       x1="92.894203"
+       gradientTransform="matrix(0.654723,0.000000,0.000000,2.435427,19.44520,10.81907)"
+       id="linearGradient22937"
+       xlink:href="#linearGradient22931"
+       inkscape:collect="always" />
+    <radialGradient
+       r="40.587261"
+       fy="450.40305"
+       fx="333.19595"
+       cy="450.40305"
+       cx="333.19595"
+       gradientTransform="matrix(1.106581,0.000000,0.000000,1.440952,-214.8070,-47.29036)"
+       gradientUnits="userSpaceOnUse"
+       id="radialGradient22171"
+       xlink:href="#linearGradient14361"
+       inkscape:collect="always" />
+    <linearGradient
+       id="linearGradient22931">
+      <stop
+         id="stop22933"
+         offset="0"
+         style="stop-color:#c6bc96;stop-opacity:1;" />
+      <stop
+         id="stop22935"
+         offset="1.0000000"
+         style="stop-color:#9f956f;stop-opacity:1.0000000;" />
+    </linearGradient>
+    <linearGradient
+       id="linearGradient22939">
+      <stop
+         id="stop22941"
+         offset="0.0000000"
+         style="stop-color:#e0d6b3;stop-opacity:1.0000000;" />
+      <stop
+         id="stop22943"
+         offset="1.0000000"
+         style="stop-color:#c6bc96;stop-opacity:1.0000000;" />
+    </linearGradient>
+    <linearGradient
+       id="linearGradient23833">
+      <stop
+         id="stop23835"
+         offset="0.0000000"
+         style="stop-color:#545454;stop-opacity:1.0000000;" />
+      <stop
+         id="stop23837"
+         offset="1.0000000"
+         style="stop-color:#949494;stop-opacity:1.0000000;" />
+    </linearGradient>
+    <linearGradient
+       id="linearGradient26137">
+      <stop
+         id="stop26139"
+         offset="0.0000000"
+         style="stop-color:#000000;stop-opacity:0.40160644;" />
+      <stop
+         id="stop26141"
+         offset="1"
+         style="stop-color:#000000;stop-opacity:0;" />
+    </linearGradient>
+    <linearGradient
+       id="linearGradient28427">
+      <stop
+         id="stop28429"
+         offset="0.0000000"
+         style="stop-color:#0fa900;stop-opacity:1.0000000;" />
+      <stop
+         id="stop28431"
+         offset="1.0000000"
+         style="stop-color:#085400;stop-opacity:0.97991967;" />
+    </linearGradient>
+    <radialGradient
+       inkscape:collect="always"
+       xlink:href="#linearGradient19109"
+       id="radialGradient28579"
+       gradientUnits="userSpaceOnUse"
+       gradientTransform="matrix(1.824921,0.000000,0.000000,0.547969,434.5858,-14.91216)"
+       cx="202.21599"
+       cy="965.82007"
+       fx="202.21599"
+       fy="965.82007"
+       r="109.04317" />
+    <radialGradient
+       inkscape:collect="always"
+       xlink:href="#linearGradient12007"
+       id="radialGradient28581"
+       gradientUnits="userSpaceOnUse"
+       gradientTransform="matrix(1.323309,0.000000,0.000000,0.755681,434.5858,-14.91216)"
+       cx="248.40041"
+       cy="344.21854"
+       fx="248.40041"
+       fy="344.21854"
+       r="106.59798" />
+    <linearGradient
+       inkscape:collect="always"
+       xlink:href="#linearGradient11999"
+       id="linearGradient28583"
+       gradientUnits="userSpaceOnUse"
+       gradientTransform="matrix(0.647824,0.000000,0.000000,1.543629,434.5858,-14.91216)"
+       x1="394.27765"
+       y1="230.83006"
+       x2="454.40619"
+       y2="269.62457" />
+    <linearGradient
+       inkscape:collect="always"
+       xlink:href="#linearGradient11991"
+       id="linearGradient28585"
+       gradientUnits="userSpaceOnUse"
+       gradientTransform="matrix(0.667222,0.000000,0.000000,1.498751,434.5858,-14.91216)"
+       x1="655.03217"
+       y1="215.95918"
+       x2="686.46759"
+       y2="293.98172" />
+    <linearGradient
+       inkscape:collect="always"
+       xlink:href="#linearGradient14361"
+       id="linearGradient28587"
+       gradientUnits="userSpaceOnUse"
+       gradientTransform="matrix(0.763570,0.000000,0.000000,1.309638,434.5858,-14.91216)"
+       spreadMethod="pad"
+       x1="367.53497"
+       y1="254.70479"
+       x2="376.08069"
+       y2="265.41870" />
+    <linearGradient
+       inkscape:collect="always"
+       xlink:href="#linearGradient12007"
+       id="linearGradient28589"
+       gradientUnits="userSpaceOnUse"
+       gradientTransform="matrix(0.563561,0.000000,0.000000,1.774430,434.5858,-14.91216)"
+       x1="476.78058"
+       y1="183.69188"
+       x2="495.91205"
+       y2="184.97871" />
+    <linearGradient
+       inkscape:collect="always"
+       xlink:href="#linearGradient12007"
+       id="linearGradient28591"
+       gradientUnits="userSpaceOnUse"
+       gradientTransform="matrix(1.196311,0.000000,0.000000,0.835903,434.5858,-14.91216)"
+       x1="234.28046"
+       y1="428.89398"
+       x2="235.34807"
+       y2="412.35938" />
+    <linearGradient
+       inkscape:collect="always"
+       xlink:href="#linearGradient14361"
+       id="linearGradient28593"
+       gradientUnits="userSpaceOnUse"
+       gradientTransform="matrix(0.784152,0.000000,0.000000,1.344939,456.6310,-4.913168)"
+       spreadMethod="pad"
+       x1="367.53497"
+       y1="254.70479"
+       x2="376.08069"
+       y2="265.41870" />
+    <linearGradient
+       inkscape:collect="always"
+       xlink:href="#linearGradient12007"
+       id="linearGradient28595"
+       gradientUnits="userSpaceOnUse"
+       gradientTransform="matrix(0.578752,0.000000,0.000000,1.822260,456.6310,-4.913168)"
+       x1="476.78058"
+       y1="183.69188"
+       x2="495.91205"
+       y2="184.97871" />
+    <linearGradient
+       inkscape:collect="always"
+       xlink:href="#linearGradient12007"
+       id="linearGradient28597"
+       gradientUnits="userSpaceOnUse"
+       gradientTransform="matrix(1.228558,0.000000,0.000000,0.858435,456.6310,-4.913168)"
+       x1="234.28046"
+       y1="428.89398"
+       x2="235.34807"
+       y2="412.35938" />
+    <linearGradient
+       inkscape:collect="always"
+       xlink:href="#linearGradient14361"
+       id="linearGradient28599"
+       gradientUnits="userSpaceOnUse"
+       gradientTransform="matrix(0.818455,0.000000,0.000000,1.403773,475.5295,-1.046018)"
+       spreadMethod="pad"
+       x1="367.53497"
+       y1="254.70479"
+       x2="376.08069"
+       y2="265.41870" />
+    <linearGradient
+       inkscape:collect="always"
+       xlink:href="#linearGradient12007"
+       id="linearGradient28601"
+       gradientUnits="userSpaceOnUse"
+       gradientTransform="matrix(0.604069,0.000000,0.000000,1.901975,475.5295,-1.046018)"
+       x1="476.78058"
+       y1="183.69188"
+       x2="495.91205"
+       y2="184.97871" />
+    <linearGradient
+       inkscape:collect="always"
+       xlink:href="#linearGradient12007"
+       id="linearGradient28603"
+       gradientUnits="userSpaceOnUse"
+       gradientTransform="matrix(1.282300,0.000000,0.000000,0.895987,475.5295,-1.046018)"
+       x1="234.28046"
+       y1="428.89398"
+       x2="235.34807"
+       y2="412.35938" />
+    <linearGradient
+       inkscape:collect="always"
+       xlink:href="#linearGradient14361"
+       id="linearGradient28605"
+       gradientUnits="userSpaceOnUse"
+       gradientTransform="matrix(0.762605,-3.838409e-2,6.583438e-2,1.307982,414.2732,56.08694)"
+       spreadMethod="pad"
+       x1="367.53497"
+       y1="254.70479"
+       x2="376.08069"
+       y2="265.41870" />
+    <linearGradient
+       inkscape:collect="always"
+       xlink:href="#linearGradient12007"
+       id="linearGradient28607"
+       gradientUnits="userSpaceOnUse"
+       gradientTransform="matrix(0.562848,-2.832981e-2,8.919912e-2,1.772186,414.2732,56.08694)"
+       x1="476.78058"
+       y1="183.69188"
+       x2="495.91205"
+       y2="184.97871" />
+    <linearGradient
+       inkscape:collect="always"
+       xlink:href="#linearGradient12007"
+       id="linearGradient28609"
+       gradientUnits="userSpaceOnUse"
+       gradientTransform="matrix(1.194798,-6.013815e-2,4.202024e-2,0.834846,414.2732,56.08694)"
+       x1="234.28046"
+       y1="428.89398"
+       x2="235.34807"
+       y2="412.35938" />
+    <linearGradient
+       inkscape:collect="always"
+       xlink:href="#linearGradient14361"
+       id="linearGradient28611"
+       gradientUnits="userSpaceOnUse"
+       gradientTransform="matrix(0.783539,-3.099551e-2,5.316198e-2,1.343887,438.8913,63.17166)"
+       spreadMethod="pad"
+       x1="367.53497"
+       y1="254.70479"
+       x2="376.08069"
+       y2="265.41870" />
+    <linearGradient
+       inkscape:collect="always"
+       xlink:href="#linearGradient12007"
+       id="linearGradient28613"
+       gradientUnits="userSpaceOnUse"
+       gradientTransform="matrix(0.578299,-2.287658e-2,7.202925e-2,1.820835,438.8913,63.17166)"
+       x1="476.78058"
+       y1="183.69188"
+       x2="495.91205"
+       y2="184.97871" />
+    <linearGradient
+       inkscape:collect="always"
+       xlink:href="#linearGradient12007"
+       id="linearGradient28615"
+       gradientUnits="userSpaceOnUse"
+       gradientTransform="matrix(1.227597,-4.856174e-2,3.393173e-2,0.857764,438.8913,63.17166)"
+       x1="234.28046"
+       y1="428.89398"
+       x2="235.34807"
+       y2="412.35938" />
+    <linearGradient
+       inkscape:collect="always"
+       xlink:href="#linearGradient14361"
+       id="linearGradient28617"
+       gradientUnits="userSpaceOnUse"
+       gradientTransform="matrix(0.818001,-2.726833e-2,4.676928e-2,1.402994,458.2665,65.57730)"
+       spreadMethod="pad"
+       x1="367.53497"
+       y1="254.70479"
+       x2="376.08069"
+       y2="265.41870" />
+    <linearGradient
+       inkscape:collect="always"
+       xlink:href="#linearGradient12007"
+       id="linearGradient28619"
+       gradientUnits="userSpaceOnUse"
+       gradientTransform="matrix(0.603734,-2.012567e-2,6.336779e-2,1.900919,458.2665,65.57730)"
+       x1="476.78058"
+       y1="183.69188"
+       x2="495.91205"
+       y2="184.97871" />
+    <linearGradient
+       inkscape:collect="always"
+       xlink:href="#linearGradient12007"
+       id="linearGradient28621"
+       gradientUnits="userSpaceOnUse"
+       gradientTransform="matrix(1.281588,-4.272218e-2,2.985145e-2,0.895490,458.2665,65.57730)"
+       x1="234.28046"
+       y1="428.89398"
+       x2="235.34807"
+       y2="412.35938" />
+    <linearGradient
+       inkscape:collect="always"
+       xlink:href="#linearGradient14361"
+       id="linearGradient28623"
+       gradientUnits="userSpaceOnUse"
+       gradientTransform="matrix(0.762229,-4.523925e-2,7.759215e-2,1.307337,411.5172,115.8591)"
+       spreadMethod="pad"
+       x1="367.53497"
+       y1="254.70479"
+       x2="376.08069"
+       y2="265.41870" />
+    <linearGradient
+       inkscape:collect="always"
+       xlink:href="#linearGradient12007"
+       id="linearGradient28625"
+       gradientUnits="userSpaceOnUse"
+       gradientTransform="matrix(0.562571,-3.338931e-2,0.105130,1.771313,411.5172,115.8591)"
+       x1="476.78058"
+       y1="183.69188"
+       x2="495.91205"
+       y2="184.97871" />
+    <linearGradient
+       inkscape:collect="always"
+       xlink:href="#linearGradient12007"
+       id="linearGradient28627"
+       gradientUnits="userSpaceOnUse"
+       gradientTransform="matrix(1.194210,-7.087786e-2,4.952476e-2,0.834435,411.5172,115.8591)"
+       x1="234.28046"
+       y1="428.89398"
+       x2="235.34807"
+       y2="412.35938" />
+    <linearGradient
+       inkscape:collect="always"
+       xlink:href="#linearGradient14361"
+       id="linearGradient28629"
+       gradientUnits="userSpaceOnUse"
+       gradientTransform="matrix(0.783885,-2.042908e-2,3.503894e-2,1.344482,442.7175,115.5664)"
+       spreadMethod="pad"
+       x1="367.53497"
+       y1="254.70479"
+       x2="376.08069"
+       y2="265.41870" />
+    <linearGradient
+       inkscape:collect="always"
+       xlink:href="#linearGradient12007"
+       id="linearGradient28631"
+       gradientUnits="userSpaceOnUse"
+       gradientTransform="matrix(0.578556,-1.507789e-2,4.747429e-2,1.821642,442.7175,115.5664)"
+       x1="476.78058"
+       y1="183.69188"
+       x2="495.91205"
+       y2="184.97871" />
+    <linearGradient
+       inkscape:collect="always"
+       xlink:href="#linearGradient12007"
+       id="linearGradient28633"
+       gradientUnits="userSpaceOnUse"
+       gradientTransform="matrix(1.228141,-3.200691e-2,2.236432e-2,0.858144,442.7175,115.5664)"
+       x1="234.28046"
+       y1="428.89398"
+       x2="235.34807"
+       y2="412.35938" />
+    <linearGradient
+       inkscape:collect="always"
+       xlink:href="#linearGradient14361"
+       id="linearGradient28635"
+       gradientUnits="userSpaceOnUse"
+       gradientTransform="matrix(0.817211,-4.511528e-2,7.737946e-2,1.401639,448.8792,129.6365)"
+       spreadMethod="pad"
+       x1="367.53497"
+       y1="254.70479"
+       x2="376.08069"
+       y2="265.41870" />
+    <linearGradient
+       inkscape:collect="always"
+       xlink:href="#linearGradient12007"
+       id="linearGradient28637"
+       gradientUnits="userSpaceOnUse"
+       gradientTransform="matrix(0.603151,-3.329779e-2,0.104842,1.899084,448.8792,129.6365)"
+       x1="476.78058"
+       y1="183.69188"
+       x2="495.91205"
+       y2="184.97871" />
+    <linearGradient
+       inkscape:collect="always"
+       xlink:href="#linearGradient12007"
+       id="linearGradient28639"
+       gradientUnits="userSpaceOnUse"
+       gradientTransform="matrix(1.280351,-7.068357e-2,4.938903e-2,0.894625,448.8792,129.6365)"
+       x1="234.28046"
+       y1="428.89398"
+       x2="235.34807"
+       y2="412.35938" />
+    <radialGradient
+       inkscape:collect="always"
+       xlink:href="#linearGradient14361"
+       id="radialGradient28641"
+       gradientUnits="userSpaceOnUse"
+       gradientTransform="matrix(0.876328,0.000000,0.000000,1.141125,434.5858,-14.91216)"
+       cx="333.19595"
+       cy="450.40305"
+       fx="333.19595"
+       fy="450.40305"
+       r="40.587261" />
+    <radialGradient
+       inkscape:collect="always"
+       xlink:href="#linearGradient19109"
+       id="radialGradient28643"
+       gradientUnits="userSpaceOnUse"
+       gradientTransform="matrix(2.443798,0.000000,0.000000,0.652480,326.2565,-254.3486)"
+       cx="165.64397"
+       cy="422.40503"
+       fx="165.64397"
+       fy="422.40503"
+       r="82.461761" />
+    <linearGradient
+       inkscape:collect="always"
+       xlink:href="#linearGradient14361"
+       id="linearGradient28645"
+       gradientUnits="userSpaceOnUse"
+       gradientTransform="matrix(0.763570,0.000000,0.000000,1.309637,309.6471,-268.0035)"
+       spreadMethod="pad"
+       x1="712.84912"
+       y1="357.65839"
+       x2="687.44537"
+       y2="337.93430" />
+    <linearGradient
+       inkscape:collect="always"
+       xlink:href="#linearGradient12007"
+       id="linearGradient28647"
+       gradientUnits="userSpaceOnUse"
+       gradientTransform="matrix(1.196310,0.000000,0.000000,0.835903,309.6471,-268.0035)"
+       x1="444.73392"
+       y1="572.72632"
+       x2="433.36017"
+       y2="561.56354" />
+    <linearGradient
+       inkscape:collect="always"
+       xlink:href="#linearGradient12007"
+       id="linearGradient28649"
+       gradientUnits="userSpaceOnUse"
+       gradientTransform="matrix(0.563561,0.000000,0.000000,1.774431,309.6471,-268.0035)"
+       x1="980.05762"
+       y1="252.73389"
+       x2="951.85889"
+       y2="251.97037" />
+    <linearGradient
+       inkscape:collect="always"
+       xlink:href="#linearGradient14361"
+       id="linearGradient28651"
+       gradientUnits="userSpaceOnUse"
+       gradientTransform="matrix(0.716700,0.000000,0.000000,1.229248,388.1837,-260.9011)"
+       spreadMethod="pad"
+       x1="712.84912"
+       y1="357.65839"
+       x2="687.44537"
+       y2="337.93430" />
+    <linearGradient
+       inkscape:collect="always"
+       xlink:href="#linearGradient12007"
+       id="linearGradient28653"
+       gradientUnits="userSpaceOnUse"
+       gradientTransform="matrix(1.122877,0.000000,0.000000,0.784593,388.1837,-260.9011)"
+       x1="444.73392"
+       y1="572.72632"
+       x2="433.36017"
+       y2="561.56354" />
+    <linearGradient
+       inkscape:collect="always"
+       xlink:href="#linearGradient12007"
+       id="linearGradient28655"
+       gradientUnits="userSpaceOnUse"
+       gradientTransform="matrix(0.528968,0.000000,0.000000,1.665511,388.1837,-260.9011)"
+       x1="980.05762"
+       y1="252.73389"
+       x2="951.85889"
+       y2="251.97037" />
+    <linearGradient
+       inkscape:collect="always"
+       xlink:href="#linearGradient14361"
+       id="linearGradient28657"
+       gradientUnits="userSpaceOnUse"
+       gradientTransform="matrix(0.763570,0.000000,0.000000,1.309637,295.3669,-193.6045)"
+       spreadMethod="pad"
+       x1="712.84912"
+       y1="357.65839"
+       x2="687.44537"
+       y2="337.93430" />
+    <linearGradient
+       inkscape:collect="always"
+       xlink:href="#linearGradient12007"
+       id="linearGradient28659"
+       gradientUnits="userSpaceOnUse"
+       gradientTransform="matrix(1.196310,0.000000,0.000000,0.835903,295.3669,-193.6045)"
+       x1="444.73392"
+       y1="572.72632"
+       x2="433.36017"
+       y2="561.56354" />
+    <linearGradient
+       inkscape:collect="always"
+       xlink:href="#linearGradient12007"
+       id="linearGradient28661"
+       gradientUnits="userSpaceOnUse"
+       gradientTransform="matrix(0.563561,0.000000,0.000000,1.774431,295.3669,-193.6045)"
+       x1="980.05762"
+       y1="252.73389"
+       x2="951.85889"
+       y2="251.97037" />
+    <linearGradient
+       inkscape:collect="always"
+       xlink:href="#linearGradient14361"
+       id="linearGradient28663"
+       gradientUnits="userSpaceOnUse"
+       gradientTransform="matrix(0.716700,0.000000,0.000000,1.229248,373.9035,-186.5021)"
+       spreadMethod="pad"
+       x1="712.84912"
+       y1="357.65839"
+       x2="687.44537"
+       y2="337.93430" />
+    <linearGradient
+       inkscape:collect="always"
+       xlink:href="#linearGradient12007"
+       id="linearGradient28665"
+       gradientUnits="userSpaceOnUse"
+       gradientTransform="matrix(1.122877,0.000000,0.000000,0.784593,373.9035,-186.5021)"
+       x1="444.73392"
+       y1="572.72632"
+       x2="433.36017"
+       y2="561.56354" />
+    <linearGradient
+       inkscape:collect="always"
+       xlink:href="#linearGradient12007"
+       id="linearGradient28667"
+       gradientUnits="userSpaceOnUse"
+       gradientTransform="matrix(0.528968,0.000000,0.000000,1.665511,373.9035,-186.5021)"
+       x1="980.05762"
+       y1="252.73389"
+       x2="951.85889"
+       y2="251.97037" />
+    <linearGradient
+       inkscape:collect="always"
+       xlink:href="#linearGradient14361"
+       id="linearGradient28669"
+       gradientUnits="userSpaceOnUse"
+       gradientTransform="matrix(0.763570,0.000000,0.000000,1.309637,287.5684,-121.2913)"
+       spreadMethod="pad"
+       x1="712.84912"
+       y1="357.65839"
+       x2="687.44537"
+       y2="337.93430" />
+    <linearGradient
+       inkscape:collect="always"
+       xlink:href="#linearGradient12007"
+       id="linearGradient28671"
+       gradientUnits="userSpaceOnUse"
+       gradientTransform="matrix(1.196310,0.000000,0.000000,0.835903,287.5684,-121.2913)"
+       x1="444.73392"
+       y1="572.72632"
+       x2="433.36017"
+       y2="561.56354" />
+    <linearGradient
+       inkscape:collect="always"
+       xlink:href="#linearGradient12007"
+       id="linearGradient28673"
+       gradientUnits="userSpaceOnUse"
+       gradientTransform="matrix(0.563561,0.000000,0.000000,1.774431,287.5684,-121.2913)"
+       x1="980.05762"
+       y1="252.73389"
+       x2="951.85889"
+       y2="251.97037" />
+    <linearGradient
+       inkscape:collect="always"
+       xlink:href="#linearGradient14361"
+       id="linearGradient28675"
+       gradientUnits="userSpaceOnUse"
+       gradientTransform="matrix(0.716700,0.000000,0.000000,1.229248,366.1050,-114.1889)"
+       spreadMethod="pad"
+       x1="712.84912"
+       y1="357.65839"
+       x2="687.44537"
+       y2="337.93430" />
+    <linearGradient
+       inkscape:collect="always"
+       xlink:href="#linearGradient12007"
+       id="linearGradient28677"
+       gradientUnits="userSpaceOnUse"
+       gradientTransform="matrix(1.122877,0.000000,0.000000,0.784593,366.1050,-114.1889)"
+       x1="444.73392"
+       y1="572.72632"
+       x2="433.36017"
+       y2="561.56354" />
+    <linearGradient
+       inkscape:collect="always"
+       xlink:href="#linearGradient12007"
+       id="linearGradient28679"
+       gradientUnits="userSpaceOnUse"
+       gradientTransform="matrix(0.528968,0.000000,0.000000,1.665511,366.1050,-114.1889)"
+       x1="980.05762"
+       y1="252.73389"
+       x2="951.85889"
+       y2="251.97037" />
+    <linearGradient
+       inkscape:collect="always"
+       xlink:href="#linearGradient3618"
+       id="linearGradient28683"
+       gradientUnits="userSpaceOnUse"
+       gradientTransform="matrix(0.162618,0.000000,0.000000,0.154485,0.257046,540.0277)"
+       x1="192.48090"
+       y1="824.52606"
+       x2="370.32205"
+       y2="1027.3083" />
+    <linearGradient
+       inkscape:collect="always"
+       xlink:href="#linearGradient1738"
+       id="linearGradient28687"
+       gradientUnits="userSpaceOnUse"
+       gradientTransform="matrix(0.179629,0.000000,0.000000,0.139856,650.3868,637.8684)"
+       x1="482.88602"
+       y1="444.14270"
+       x2="197.87488"
+       y2="303.58148" />
+    <linearGradient
+       inkscape:collect="always"
+       xlink:href="#linearGradient4960"
+       id="linearGradient28745"
+       gradientUnits="userSpaceOnUse"
+       gradientTransform="matrix(0.206219,0.000000,0.000000,4.849215,0.224287,0.297193)"
+       x1="3138.8862"
+       y1="100.32681"
+       x2="2594.4343"
+       y2="79.180443" />
+    <linearGradient
+       inkscape:collect="always"
+       xlink:href="#linearGradient2304"
+       id="linearGradient28748"
+       gradientUnits="userSpaceOnUse"
+       gradientTransform="scale(0.206219,4.849215)"
+       x1="3138.8862"
+       y1="100.32681"
+       x2="2594.4343"
+       y2="79.180443" />
+  </defs>
+  <sodipodi:namedview
+     id="base"
+     pagecolor="#ffffff"
+     bordercolor="#666666"
+     borderopacity="1.0"
+     inkscape:pageopacity="0.0"
+     inkscape:pageshadow="2"
+     inkscape:zoom="1.1250000"
+     inkscape:cx="311.85628"
+     inkscape:cy="355.71935"
+     inkscape:document-units="px"
+     inkscape:current-layer="layer1"
+     showguides="true"
+     inkscape:guide-bbox="true"
+     inkscape:window-width="1272"
+     inkscape:window-height="600"
+     inkscape:window-x="0"
+     inkscape:window-y="0" />
+  <metadata
+     id="metadata4">
+    <rdf:RDF
+       id="RDF5">
+      <cc:Work
+         rdf:about=""
+         id="Work6">
+        <dc:format
+           id="format7">image/svg+xml</dc:format>
+        <dc:type
+           id="type9"
+           rdf:resource="http://purl.org/dc/dcmitype/StillImage" />
+      </cc:Work>
+    </rdf:RDF>
+  </metadata>
+  <g
+     inkscape:label="Layer 1"
+     inkscape:groupmode="layer"
+     id="layer1">
+    <rect
+       inkscape:export-ydpi="90.000000"
+       inkscape:export-xdpi="90.000000"
+       style="fill:url(#radialGradient2550);fill-opacity:1.0000000;fill-rule:nonzero;stroke:none;stroke-width:1.2557396;stroke-linecap:round;stroke-linejoin:bevel;stroke-miterlimit:4.0000000;stroke-opacity:1.0000000"
+       id="rect16067"
+       width="1024.0049"
+       height="767.99750"
+       x="-0.0086894706"
+       y="-0.00048458576"
+       rx="0.0000000"
+       ry="0.0000000" />
+    <rect
+       style="fill:#000000;fill-opacity:0.55294120;fill-rule:nonzero;stroke:none;stroke-width:3.0000000;stroke-linecap:round;stroke-linejoin:round;stroke-miterlimit:4.0000000;stroke-opacity:0.63667822"
+       id="rect1618"
+       width="538.90332"
+       height="357.43082"
+       x="54.560963"
+       y="239.71436"
+       rx="31.902317"
+       ry="32.925133" />
+    <g
+       transform="translate(-22.68650,-9.925342)"
+       id="scenario-box">
+      <rect
+         style="fill:#0000b9;fill-opacity:1.0000000;fill-rule:nonzero;stroke:#4494e1;stroke-width:3.0000000;stroke-linecap:round;stroke-linejoin:round;stroke-miterlimit:4.0000000;stroke-opacity:0.63667822"
+         id="scenarioselect"
+         width="538.90332"
+         height="357.43082"
+         x="73.691910"
+         y="245.63969"
+         rx="31.902317"
+         ry="32.925133" />
+      <path
+         style="fill:url(#radialGradient5730);fill-opacity:1.0000000;fill-rule:evenodd;stroke:none;stroke-width:0.25000000pt;stroke-linecap:butt;stroke-linejoin:miter;stroke-opacity:1.0000000"
+         d="M 83.216711,384.00000 C 80.601941,382.36497 78.648441,288.17656 86.224543,265.94256 C 92.923081,246.28399 162.00263,251.58891 169.69191,255.66580 C 178.45614,260.31263 119.99616,267.86393 107.14926,292.16024 C 94.302359,316.45655 86.929640,386.32172 83.216711,384.00000 z "
+         id="path4200"
+         sodipodi:nodetypes="cssss" />
+    </g>
+    <g
+       id="slider-up"
+       transform="translate(-22.68650,-9.925342)"
+       style="opacity:0.24830700">
+      <path
+         style="stroke-opacity:1.0000000;stroke-linejoin:miter;stroke-linecap:butt;stroke-width:0.25000000pt;stroke:none;fill-rule:evenodd;fill-opacity:0.58823532;fill:#000000"
+         d="M 568.85640,292.13576 C 572.15666,280.89816 577.83812,270.41253 585.14882,264.18799 C 588.36553,274.33942 593.58747,284.49085 599.18538,293.51435 C 585.71279,290.15142 578.56919,289.98433 568.85640,292.13576 z "
+         id="path9046"
+         sodipodi:nodetypes="cccc" />
+      <path
+         style="stroke-opacity:1.0000000;stroke-linejoin:miter;stroke-linecap:butt;stroke-width:0.25000000pt;stroke:#000000;fill-rule:evenodd;fill-opacity:1.0000000;fill:url(#linearGradient9036)"
+         d="M 567.97912,291.63446 C 571.27938,280.39686 576.96084,269.91123 584.27154,263.68669 C 587.48825,273.83812 592.71019,283.98955 598.30810,293.01305 C 584.83551,289.65012 577.69191,289.48303 567.97912,291.63446 z "
+         id="path8268"
+         sodipodi:nodetypes="cccc" />
+      <path
+         style="stroke-opacity:1.0000000;stroke-linejoin:miter;stroke-linecap:butt;stroke-width:0.25000000pt;stroke:none;fill-rule:evenodd;fill-opacity:1.0000000;fill:url(#linearGradient10584)"
+         d="M 583.14360,266.44386 C 581.65304,267.62019 578.91466,270.90948 576.80585,274.13210 C 574.69703,277.35472 573.57888,280.55566 573.93211,280.29243 C 574.88264,279.58408 577.85275,273.55462 580.39260,271.51593 C 582.60665,269.73875 584.02319,268.57846 584.83551,270.92429 C 585.43212,272.65071 585.57456,270.92556 585.12065,269.53738 C 584.66675,268.14920 583.58515,266.09539 583.14360,266.44386 z "
+         id="path9818"
+         sodipodi:nodetypes="cssssss" />
+    </g>
+    <g
+       id="slider-down"
+       transform="translate(-22.68650,-9.925342)"
+       style="opacity:0.24830700">
+      <path
+         style="stroke-opacity:1.0000000;stroke-linejoin:miter;stroke-linecap:butt;stroke-width:0.25000000pt;stroke:none;fill-rule:evenodd;fill-opacity:0.58823532;fill:#000000"
+         d="M 569.60835,557.82767 C 579.71801,555.36292 588.82506,554.90338 598.43342,557.95299 C 590.12010,566.89294 587.19582,575.45691 583.89555,586.40208 C 576.83551,579.42558 571.15404,567.56135 569.60835,557.82767 z "
+         id="path9048"
+         sodipodi:nodetypes="cccc" />
+      <path
+         style="stroke-opacity:1.0000000;stroke-linejoin:miter;stroke-linecap:butt;stroke-width:0.25000000pt;stroke:#000000;fill-rule:evenodd;fill-opacity:1.0000000;fill:url(#linearGradient9044)"
+         d="M 569.04439,557.32637 C 579.15405,554.86162 588.26110,554.40208 597.86946,557.45169 C 589.55614,566.39164 586.63186,574.95561 583.33159,585.90078 C 576.27155,578.92428 570.59008,567.06005 569.04439,557.32637 z "
+         id="path8270"
+         sodipodi:nodetypes="cccc" />
+      <path
+         style="stroke-opacity:1.0000000;stroke-linejoin:miter;stroke-linecap:butt;stroke-width:0.25000000pt;stroke:none;fill-rule:evenodd;fill-opacity:1.0000000;fill:url(#linearGradient11352)"
+         d="M 571.11228,558.70495 C 569.90658,560.10144 572.51626,567.28211 573.68147,566.78850 C 574.49690,566.44307 571.89798,561.77640 573.36333,559.70174 C 574.82868,557.62709 580.23298,557.95647 580.01045,557.20104 C 579.66177,556.01737 572.72065,556.84206 571.11228,558.70495 z "
+         id="path10586"
+         sodipodi:nodetypes="cssss" />
+    </g>
+    <g
+       id="slider-bar"
+       transform="translate(-22.68650,-9.925342)">
+      <path
+         style="fill:#000000;fill-opacity:0.58823532;fill-rule:nonzero;stroke:none;stroke-width:0.22436385pt;stroke-linecap:butt;stroke-linejoin:miter;stroke-opacity:1.0000000"
+         d="M 579.58094,303.08576 C 579.71412,299.49186 583.01184,299.46746 582.81106,303.08576 C 578.63065,378.41883 593.36898,466.32823 588.66564,547.97349 C 588.44616,551.79516 584.96529,551.78397 585.23364,547.97349 C 591.03691,465.31874 576.68589,381.20465 579.58094,303.08576 z "
+         id="path12126"
+         sodipodi:nodetypes="cssss" />
+      <path
+         style="fill:url(#linearGradient28748);fill-opacity:1.0000000;fill-rule:nonzero;stroke:#000000;stroke-width:0.22436385pt;stroke-linecap:butt;stroke-linejoin:miter;stroke-opacity:1.0000000"
+         d="M 578.91800,302.78851 C 579.05118,299.19461 582.34890,299.17021 582.14812,302.78851 C 577.96771,378.12158 592.70604,466.03098 588.00270,547.67624 C 587.78322,551.49791 584.30235,551.48672 584.57070,547.67624 C 590.37397,465.02149 576.02295,380.90740 578.91800,302.78851 z "
+         id="path11354"
+         sodipodi:nodetypes="cssss" />
+      <path
+         style="fill:url(#linearGradient28745);fill-opacity:1.0000000;fill-rule:nonzero;stroke:none;stroke-width:0.22436385pt;stroke-linecap:butt;stroke-linejoin:miter;stroke-opacity:1.0000000"
+         d="M 579.58094,302.96042 C 579.62153,301.87152 580.41394,301.84951 580.36720,303.02309 C 577.28968,378.71824 590.99943,465.73326 585.97113,547.03353 C 585.88057,548.47968 585.28064,548.27221 585.35897,547.15886 C 591.05922,465.18833 576.65258,381.53304 579.58094,302.96042 z "
+         id="path13652"
+         sodipodi:nodetypes="cssss" />
+    </g>
+    <g
+       id="slider-position"
+       transform="translate(-22.68650,-9.925342)"
+       style="opacity:0.24830700">
+      <path
+         style="stroke-opacity:1.0000000;stroke-linejoin:miter;stroke-linecap:butt;stroke-width:0.25000000pt;stroke:#000000;fill-rule:evenodd;fill-opacity:1.0000000;fill:url(#linearGradient15946)"
+         d="M 599.31071,393.77546 C 587.53943,367.78055 559.78816,384.76696 567.72846,406.80940 C 576.30299,430.61248 605.32638,407.06005 599.31071,393.77546 z "
+         id="path15180"
+         sodipodi:nodetypes="css" />
+      <path
+         style="stroke-opacity:1.0000000;stroke-linejoin:miter;stroke-linecap:butt;stroke-width:0.25000000pt;stroke:none;fill-rule:evenodd;fill-opacity:1.0000000;fill:url(#linearGradient15950)"
+         d="M 579.39035,382.53939 C 573.71982,383.56639 569.49387,391.05676 568.42429,394.32008 C 567.68663,396.57070 571.90629,390.52744 574.44614,388.48875 C 575.55317,387.60016 579.01433,386.45849 581.67366,387.02278 C 584.33298,387.58708 585.31318,391.48660 585.71934,392.65951 C 586.31595,394.38593 590.59416,386.51979 590.14025,385.13161 C 589.68635,383.74343 584.54967,381.60498 579.39035,382.53939 z "
+         id="path15948"
+         sodipodi:nodetypes="cssssss" />
+    </g>
+    <g
+       id="author">
+      <path
+         style="fill:#000000;fill-opacity:0.75000000;fill-rule:nonzero;stroke:none;stroke-width:1.0000000pt;stroke-linecap:butt;stroke-linejoin:miter;stroke-opacity:1.0000000"
+         id="path11198"
+         d="M 980.42466,753.53931 C 980.37165,753.48462 980.61184,753.56660 980.65365,753.57454 C 981.92987,753.75043 983.23382,753.61758 984.49357,753.38307 C 985.05016,753.26703 985.60766,753.12814 986.12767,752.89333 C 986.37610,752.78116 986.58578,752.64843 986.46480,752.71688 C 984.69118,753.72043 985.83495,753.24740 985.84932,752.93053 C 985.18755,752.42479 983.72740,752.62382 982.96097,752.70202 C 982.12073,752.80795 981.27503,752.96659 980.49083,753.29718 C 980.15244,753.43983 979.94188,753.57157 980.00351,753.53472 C 980.19081,753.42268 980.37906,753.31178 980.57295,753.21160 C 980.64174,753.17603 980.44254,753.29530 980.37957,753.34040 C 980.21733,753.45665 980.18589,753.49162 980.03844,753.62306 C 979.28795,754.33190 979.15044,755.32011 979.47115,756.26928 C 979.92941,757.46858 981.11699,757.85839 982.30676,757.85551 C 983.08868,757.81924 983.86162,757.62874 984.56782,757.28949 C 984.66360,757.24350 984.94040,757.08567 984.85093,757.14301 C 983.84426,757.78833 98!
 4.62833,757.25251 984.81259,757.10078 C 984.98290,756.96048 985.12774,756.80493 985.26895,756.63644 C 985.37056,756.51376 985.44195,756.37453 985.50727,756.23077 L 986.46047,755.79883 C 986.37503,755.96137 986.28395,756.11961 986.16204,756.25864 C 985.04206,757.53044 983.30448,758.22279 981.64031,758.34054 C 980.38908,758.35734 979.12410,758.00264 978.62944,756.73382 C 978.28845,755.75481 978.38125,754.73172 979.15640,753.98321 C 980.38581,752.85774 981.99798,752.39731 983.61410,752.21694 C 984.42210,752.12920 986.17082,751.87175 986.86692,752.36816 C 986.93589,752.54441 986.83102,752.68107 986.67483,752.77476 C 985.75930,753.32389 984.92267,753.74527 983.85252,753.86598 C 982.49842,754.08597 981.12751,754.20761 979.75531,754.21511 C 979.61577,754.21343 979.39147,754.25560 979.32101,754.10166 L 980.42466,753.53931 z " />
+      <path
+         style="fill:#000000;fill-opacity:0.75000000;fill-rule:nonzero;stroke:none;stroke-width:1.0000000pt;stroke-linecap:butt;stroke-linejoin:miter;stroke-opacity:1.0000000"
+         id="path11202"
+         d="M 990.52877,753.26033 C 990.53523,753.27150 990.54130,753.28289 990.54814,753.29381 C 990.55635,753.30688 990.53267,753.26691 990.52261,753.25524 C 990.46146,753.18432 990.38947,753.12772 990.30924,753.07931 C 990.01682,752.90293 989.70188,752.81351 989.36938,752.74806 C 988.19488,752.60465 986.97083,752.86353 985.94880,753.46297 C 985.87637,753.50546 986.22402,753.28467 986.17562,753.35331 C 986.09699,753.46480 985.95455,753.51372 985.85065,753.60217 C 985.55251,753.85597 985.34079,754.13841 985.13385,754.46669 C 984.26273,756.32174 985.72602,757.41573 987.44257,757.60038 C 989.50654,757.56153 990.83964,757.10980 991.64925,755.27914 C 991.84950,754.68928 991.91432,754.00721 991.63496,753.42814 C 991.57178,753.29714 991.47260,753.13151 991.32922,753.07273 C 991.27830,753.05185 991.11839,753.12920 991.16698,753.10334 C 992.10272,752.60506 992.28192,752.34080 991.98964,752.72216 C 991.51808,754.36724 992.20982,756.67351 992.57848,758.31210 C 992.74225,759.37013 99!
 3.66286,761.62286 992.51857,762.39266 C 992.17263,762.57736 991.83549,762.77956 991.48076,762.94675 C 991.03383,763.15737 990.23866,762.90415 989.80456,762.78488 C 988.67839,762.47547 987.61118,762.00136 986.55685,761.50607 C 984.95835,760.72403 983.39362,759.85622 981.93854,758.82806 C 981.20017,758.30632 980.34602,757.71623 980.07051,756.81457 C 980.07243,756.44910 980.25204,756.22404 980.56672,756.04271 C 980.90233,755.84936 981.24147,755.65878 981.59773,755.50682 C 982.32114,755.19826 984.11537,755.28120 984.90494,755.28818 C 986.64249,755.30355 988.37945,755.33513 990.11671,755.36926 C 992.65488,755.44519 995.19596,755.43576 997.72346,755.17250 L 997.25764,755.51458 C 994.87043,755.48596 992.48425,755.39354 990.09665,755.38378 C 987.74799,755.33765 985.37198,755.19189 983.03357,755.48745 C 982.57512,755.54539 982.05219,755.63274 981.60286,755.75566 C 981.41718,755.80646 981.24709,755.94184 981.05466,755.93731 C 980.94980,755.93483 981.27777,755.84956 981.30649,755.7486!
 8 C 981.33527,755.64754 980.62958,756.43256 980.81634,756.4176!
 2 C 980.
87395,757.35588 981.58168,758.04818 982.28043,758.61066 C 983.67675,759.73469 985.31218,760.52894 986.94132,761.25029 C 987.94034,761.65706 988.95319,762.03326 990.00845,762.26799 C 990.57956,762.39502 991.18419,762.49642 991.77127,762.44161 C 992.14793,762.40646 992.28360,762.31668 992.25067,762.34283 C 992.04864,762.50334 991.81193,762.61455 991.59254,762.75039 C 992.87227,762.05886 992.20124,759.70442 992.04339,758.59900 C 991.68314,756.79719 991.11845,755.00570 991.01314,753.16846 C 991.10197,752.69923 991.90265,752.11317 992.24588,752.51097 C 992.62844,752.95437 992.64815,753.77697 992.55654,754.31488 C 992.50706,754.60537 992.47400,754.66484 992.37820,754.94614 C 991.43294,756.96686 989.01133,758.01893 986.86837,758.00899 C 985.00533,757.84126 983.47298,756.79568 984.43429,754.77444 C 985.60833,752.95456 987.99554,752.17027 990.07860,752.24777 C 990.54454,752.29109 991.27179,752.34857 991.63216,752.69812 L 990.52877,753.26033 z " />
+      <path
+         style="fill:#000000;fill-opacity:0.75000000;fill-rule:nonzero;stroke:none;stroke-width:1.0000000pt;stroke-linecap:butt;stroke-linejoin:miter;stroke-opacity:1.0000000"
+         id="path11204"
+         d="M 996.24929,754.08555 C 995.94918,753.71415 995.44354,753.52930 995.00861,753.37437 C 994.25293,753.13098 993.43241,753.06749 992.67136,753.32648 C 992.32552,753.44416 992.10498,753.58591 992.15038,753.55708 C 992.30968,753.45589 992.47056,753.35442 992.64365,753.27925 C 992.82262,753.20153 992.32855,753.50991 992.17902,753.63523 C 991.03059,754.73993 991.00598,756.07740 992.23952,757.11392 C 994.03807,758.30460 996.50626,758.42720 998.44187,757.50504 C 998.35410,757.55081 998.15022,757.73712 998.17858,757.64230 C 998.21418,757.52330 998.37866,757.49432 998.47019,757.41034 C 998.55842,757.32940 998.64140,757.24217 998.71641,757.14885 C 998.93865,756.87242 999.09150,756.54435 999.15989,756.19631 C 999.47094,754.61401 996.85621,753.58689 995.75156,753.14362 C 993.09520,752.29441 989.29999,751.46899 986.56805,752.45865 C 985.73525,752.93499 987.37513,751.84676 986.91674,752.28974 L 985.94807,752.68953 C 986.31139,752.33309 986.77499,752.08349 987.25780,751.92553 C !
 988.05008,751.73751 988.87199,751.75578 989.67998,751.81248 C 991.78452,751.96012 993.85971,752.42861 995.86633,753.06638 C 997.02395,753.47279 998.95165,754.05166 999.70364,755.09944 C 999.92074,755.40189 999.91454,755.51921 999.86134,755.86134 C 999.69534,756.92894 998.78085,757.47827 997.89734,757.93757 C 995.92178,758.80471 993.44726,758.55944 991.57789,757.53087 C 990.19652,756.53701 990.21620,755.13816 991.37904,753.95954 C 992.65268,752.83730 994.15781,752.35780 995.78962,752.84323 C 996.30796,752.99330 996.81368,753.17830 997.29390,753.42486 L 996.24929,754.08555 z " />
+      <path
+         style="fill:#000000;fill-opacity:0.75000000;fill-rule:nonzero;stroke:none;stroke-width:1.0000000pt;stroke-linecap:butt;stroke-linejoin:miter;stroke-opacity:1.0000000"
+         id="path11212"
+         d="M 998.04285,759.83236 C 998.12338,759.36467 998.12776,758.88106 998.14374,758.40689 C 998.18020,756.93597 998.10954,755.44149 997.73091,754.01316 C 997.48496,753.21467 997.28404,753.48371 998.61205,752.90548 C 998.61299,752.90506 998.81612,753.18683 998.82117,753.19303 C 999.05934,753.48547 999.34012,753.72091 999.64384,753.94208 C 1000.5716,754.56711 1001.7222,754.78408 1002.7663,754.33449 L 1001.9793,754.95228 C 1000.9199,755.32025 999.81264,754.99835 998.88755,754.42502 C 998.55641,754.21140 998.24630,753.97579 997.92914,753.74278 C 997.88359,753.70933 997.76137,753.61956 997.70081,753.59365 C 997.67958,753.58456 997.61336,753.59293 997.63277,753.58040 C 999.04071,752.67136 998.47821,752.78334 998.55731,753.57380 C 998.69585,755.04380 998.86707,756.51083 998.96719,757.98442 C 999.00732,758.41218 999.03186,758.85524 999.14650,759.27004 L 998.04285,759.83236 z " />
+      <path
+         style="fill:#000000;fill-opacity:0.75000000;fill-rule:nonzero;stroke:none;stroke-width:1.0000000pt;stroke-linecap:butt;stroke-linejoin:miter;stroke-opacity:1.0000000"
+         id="path11219"
+         d="M 1001.9270,755.16131 C 1002.4402,755.46052 1003.1012,755.51451 1003.6807,755.56740 C 1004.3003,755.59835 1004.9456,755.58956 1005.5336,755.36540 C 1005.6209,755.33213 1005.8676,755.19931 1005.7887,755.24927 C 1005.6076,755.36385 1005.4230,755.47599 1005.2259,755.56011 C 1005.1580,755.58907 1005.3437,755.47042 1005.3949,755.41736 C 1005.6697,755.13247 1005.6718,754.80086 1005.5725,754.44269 C 1004.6862,752.72346 1002.3158,752.81667 1000.8397,753.61878 C 1000.9143,753.59174 1001.0932,753.46410 1001.0634,753.53763 C 1001.0106,753.66817 1000.8504,753.72292 1000.7555,753.82689 C 1000.4801,754.12824 1000.2777,754.49165 1000.1838,754.89016 C 999.82214,756.42643 1001.0796,757.54528 1002.2772,758.21981 C 1002.7584,758.43167 1002.8589,758.49489 1003.3676,758.64215 C 1004.4483,758.95513 1005.6157,759.01563 1006.7186,758.78471 C 1007.1658,758.69104 1007.6047,758.54648 1008.0135,758.34115 C 1008.1298,758.28271 1008.4824,758.13004 1008.3537,758.14921 C 1008.2066,758.17111 10!
 08.0881,758.28293 1007.9554,758.34981 L 1008.7098,758.05406 C 1008.4829,758.19111 1007.8292,758.61639 1007.4471,758.78840 C 1005.6773,759.58505 1003.5749,759.22296 1001.8539,758.49646 C 1000.9468,758.02725 999.99994,757.44508 999.62244,756.43650 C 999.07493,754.97401 1000.1649,753.83698 1001.3636,753.19766 C 1002.9234,752.39025 1005.3137,752.38116 1006.3928,753.99081 C 1006.5678,754.43936 1006.5354,754.94442 1006.0810,755.22957 C 1004.9997,755.90817 1004.2554,756.15192 1002.9957,756.05758 C 1002.2923,756.01917 1001.5868,755.96073 1000.8925,755.84194 L 1001.9270,755.16131 z " />
+      <path
+         style="fill:#000000;fill-opacity:0.75000000;fill-rule:nonzero;stroke:none;stroke-width:1.0000000pt;stroke-linecap:butt;stroke-linejoin:miter;stroke-opacity:1.0000000"
+         id="path11227"
+         d="M 1011.6830,751.23561 C 1011.7519,751.02469 1011.7193,750.82641 1011.6123,750.62849 C 1010.6233,749.43325 1008.6457,749.88419 1007.4477,750.46123 C 1007.5286,750.41766 1007.7470,750.25803 1007.6905,750.33052 C 1007.6076,750.43684 1007.4681,750.48360 1007.3637,750.56894 C 1007.1592,750.73615 1006.9803,750.91816 1006.8211,751.12917 C 1006.0176,752.19425 1006.1581,753.45914 1007.0233,754.41922 C 1008.1277,755.40078 1009.7265,755.64086 1011.1261,755.22475 C 1011.4207,755.19056 1011.6490,754.98815 1011.9213,754.89956 C 1012.0148,754.86911 1011.6121,755.12444 1011.6616,755.03948 C 1011.7269,754.92751 1011.8701,754.88553 1011.9744,754.80854 C 1013.0622,753.86732 1013.5596,752.15486 1012.7659,750.86906 C 1012.8446,750.67038 1012.3349,750.67111 1012.3408,750.66777 C 1012.6275,750.50542 1012.9142,750.34239 1013.2099,750.19706 C 1013.3110,750.14735 1013.1450,750.16650 1012.9966,750.45445 C 1012.9195,750.60407 1012.8658,750.77974 1012.8290,750.94236 C 1012.6811,751.59622 10!
 12.7106,752.27220 1012.7468,752.93583 C 1012.8996,754.74963 1013.3675,756.52409 1014.0232,758.21804 L 1013.3950,758.56364 C 1012.9162,756.80547 1012.4657,755.03509 1012.1731,753.23518 C 1012.1519,753.08461 1012.1284,752.93434 1012.1093,752.78349 C 1012.0536,752.34418 1011.6582,749.22349 1013.3450,750.03521 C 1013.4831,750.10163 1013.5479,750.26127 1013.6150,750.38601 C 1014.1804,751.83316 1013.8344,753.50580 1012.6540,754.53846 C 1010.7493,755.97246 1008.3546,756.36291 1006.3877,754.80577 C 1005.1778,753.55627 1005.3798,751.93360 1006.7000,750.83230 C 1007.1107,750.48964 1007.4991,750.31347 1007.9938,750.02639 C 1009.3353,749.40628 1011.3002,749.05420 1012.5385,750.08229 C 1012.6791,750.24295 1012.7972,750.47928 1012.7867,750.67328 L 1011.6830,751.23561 z " />
+      <path
+         style="fill:#000000;fill-opacity:0.75000000;fill-rule:nonzero;stroke:none;stroke-width:1.0000000pt;stroke-linecap:butt;stroke-linejoin:miter;stroke-opacity:1.0000000"
+         id="path11229"
+         d="M 1014.6971,749.34919 C 1014.5756,749.93164 1014.6354,750.54346 1014.6866,751.13058 C 1014.9423,753.36470 1015.6072,755.55327 1016.7036,757.51882 C 1016.7745,757.63502 1016.8454,757.75125 1016.9162,757.86745 L 1016.2961,758.22340 C 1016.2366,758.09992 1016.1770,757.97647 1016.1174,757.85299 C 1015.1875,755.81842 1014.5079,753.67968 1013.9701,751.51047 C 1013.8391,750.97903 1013.7284,750.44120 1013.5934,749.91154 L 1014.6971,749.34919 z " />
+      <path
+         style="fill:#000000;fill-opacity:0.75000000;fill-rule:nonzero;stroke:none;stroke-width:1.0000000pt;stroke-linecap:butt;stroke-linejoin:miter;stroke-opacity:1.0000000"
+         id="path11231"
+         d="M 1016.4801,748.90961 C 1016.3438,749.40948 1016.3545,749.94539 1016.3600,750.46182 C 1016.4205,752.57947 1016.9087,754.66561 1017.7539,756.60476 C 1018.0278,757.22562 1018.3743,757.80791 1018.7596,758.36496 L 1018.0720,758.76389 C 1017.7552,758.15983 1017.4601,757.54451 1017.2090,756.90987 C 1016.4422,754.96171 1015.8984,752.93429 1015.5889,750.86276 C 1015.5168,750.41108 1015.4441,749.90422 1015.3765,749.47194 L 1016.4801,748.90961 z " />
+    </g>
+    <g
+       transform="translate(301.9329,-92.74310)"
+       id="g2954">
+      <path
+         sodipodi:nodetypes="cccccc"
+         id="path2956"
+         d="M 473.35393,694.33118 C 528.37317,687.81720 588.33790,691.19419 638.41165,698.52757 C 676.22194,679.99011 704.14125,658.48537 725.13690,636.98062 C 711.66492,613.61768 688.30197,595.20021 669.88451,581.72824 C 614.57557,578.01185 557.28844,583.19733 506.92499,594.31740 L 473.35393,694.33118 z "
+         style="fill:url(#radialGradient3066);fill-opacity:1.0000000;fill-rule:evenodd;stroke:none;stroke-width:0.31000000;stroke-linecap:butt;stroke-linejoin:miter;stroke-miterlimit:4.0000000;stroke-opacity:1.0000000" />
+      <g
+         id="g2958">
+        <path
+           sodipodi:nodetypes="ccccc"
+           id="path2960"
+           d="M 368.04206,345.09016 C 408.13466,317.59810 447.24539,299.43370 486.84706,284.70580 C 537.08553,306.79764 579.22367,333.55331 617.18890,362.02725 L 501.08401,425.35719 L 368.04206,345.09016 z "
+           style="fill:url(#radialGradient3068);fill-opacity:1.0000000;fill-rule:evenodd;stroke:#000000;stroke-width:3.7882409;stroke-linecap:round;stroke-linejoin:bevel;stroke-miterlimit:4.0000000;stroke-opacity:1.0000000" />
+        <path
+           sodipodi:nodetypes="ccccc"
+           id="path2962"
+           d="M 502.06588,422.65707 C 464.10065,390.25570 416.80774,362.76363 367.55113,344.59923 C 351.67773,437.54860 358.38711,530.49796 361.16904,624.92012 C 399.13427,641.28445 438.57229,662.55808 472.11916,694.63216 L 502.06588,422.65707 z "
+           style="fill:url(#linearGradient3070);fill-opacity:1.0000000;fill-rule:evenodd;stroke:#000000;stroke-width:3.7882409;stroke-linecap:round;stroke-linejoin:bevel;stroke-miterlimit:4.0000000;stroke-opacity:1.0000000" />
+        <path
+           sodipodi:nodetypes="ccccc"
+           id="path2964"
+           d="M 471.62823,694.63216 C 476.37388,604.13744 480.62862,516.09737 502.06588,423.14800 C 541.17662,389.76477 578.81456,373.07315 617.92530,361.29084 C 594.03338,461.93145 576.52356,558.64461 578.65092,654.37591 C 543.46762,657.97606 507.79339,673.35853 471.62823,694.63216 z "
+           style="fill:url(#linearGradient3072);fill-opacity:1.0000000;fill-rule:evenodd;stroke:#000000;stroke-width:3.7882409;stroke-linecap:round;stroke-linejoin:bevel;stroke-miterlimit:4.0000000;stroke-opacity:1.0000000" />
+      </g>
+      <g
+         id="g2966">
+        <path
+           sodipodi:nodetypes="ccccc"
+           id="path2968"
+           d="M 454.48525,414.71441 C 450.32404,427.56521 448.36583,438.94733 447.50910,455.46977 C 458.40167,458.28471 465.98976,464.77129 474.67933,472.35938 C 474.06740,458.52949 475.65843,446.16825 480.55398,430.13535 C 473.70023,422.05772 465.01065,417.28456 454.48525,414.71441 z "
+           style="fill:url(#linearGradient3074);fill-opacity:1.0000000;fill-rule:nonzero;stroke:#000000;stroke-width:1.3535123;stroke-linecap:butt;stroke-linejoin:bevel;stroke-miterlimit:4.0000000;stroke-opacity:1.0000000" />
+        <path
+           sodipodi:nodetypes="ccccc"
+           id="path2970"
+           d="M 377.54636,368.57401 C 373.66421,380.56305 371.83731,391.18189 371.03804,406.59635 C 381.20016,409.22252 388.27940,415.27412 396.38626,422.35336 C 395.81536,409.45089 397.29970,397.91858 401.86696,382.96084 C 395.47281,375.42489 387.36595,370.97181 377.54636,368.57401 z "
+           style="fill:url(#linearGradient3076);fill-opacity:1.0000000;fill-rule:nonzero;stroke:#000000;stroke-width:1.2627470;stroke-linecap:butt;stroke-linejoin:bevel;stroke-miterlimit:4.0000000;stroke-opacity:1.0000000" />
+        <path
+           sodipodi:nodetypes="ccccc"
+           id="path2972"
+           d="M 371.03804,406.33944 C 372.75075,405.22618 374.46348,404.79799 376.17620,404.79799 C 376.83274,393.46551 378.94508,380.76285 382.17070,369.94418 C 380.51507,369.43037 379.20199,369.08783 377.54636,368.57402 C 373.66421,380.93413 371.49476,393.37988 371.03804,406.33944 z "
+           style="fill:url(#linearGradient3078);fill-opacity:1.0000000;fill-rule:evenodd;stroke:#000000;stroke-width:1.2627470;stroke-linecap:butt;stroke-linejoin:bevel;stroke-miterlimit:4.0000000;stroke-opacity:1.0000000" />
+        <path
+           sodipodi:nodetypes="ccccc"
+           id="path2974"
+           d="M 376.26182,404.96927 C 382.85579,407.16726 391.24810,411.50615 396.21498,417.21520 C 396.32917,419.21338 396.27208,420.52646 396.38626,422.26773 C 388.36504,415.70230 382.05652,409.65070 371.03804,406.42508 C 372.57949,405.51163 374.20656,404.76945 376.26182,404.96927 z "
+           style="fill:url(#linearGradient3080);fill-opacity:1.0000000;fill-rule:evenodd;stroke:#000000;stroke-width:1.2627470;stroke-linecap:butt;stroke-linejoin:bevel;stroke-miterlimit:4.0000000;stroke-opacity:1.0000000" />
+        <path
+           sodipodi:nodetypes="ccccc"
+           id="path2976"
+           d="M 414.84789,391.93681 C 410.86110,404.24901 408.98495,415.15408 408.16414,430.98403 C 418.60018,433.68099 425.87023,439.89572 434.19561,447.16577 C 433.60933,433.91552 435.13368,422.07237 439.82404,406.71144 C 433.25754,398.97236 424.93216,394.39926 414.84789,391.93681 z "
+           style="fill:url(#linearGradient3082);fill-opacity:1.0000000;fill-rule:nonzero;stroke:#000000;stroke-width:1.2967840;stroke-linecap:butt;stroke-linejoin:bevel;stroke-miterlimit:4.0000000;stroke-opacity:1.0000000" />
+        <path
+           sodipodi:nodetypes="ccccc"
+           id="path2978"
+           d="M 408.16414,430.72020 C 409.92302,429.57693 411.68191,429.13720 413.44079,429.13720 C 414.11502,417.49926 416.28431,404.45421 419.59687,393.34392 C 417.89662,392.81625 416.54815,392.46449 414.84789,391.93682 C 410.86110,404.63010 408.63317,417.41132 408.16414,430.72020 z "
+           style="fill:url(#linearGradient3084);fill-opacity:1.0000000;fill-rule:evenodd;stroke:#000000;stroke-width:1.2967840;stroke-linecap:butt;stroke-linejoin:bevel;stroke-miterlimit:4.0000000;stroke-opacity:1.0000000" />
+        <path
+           sodipodi:nodetypes="ccccc"
+           id="path2980"
+           d="M 413.52872,429.31310 C 420.30043,431.57034 428.91895,436.02618 434.01972,441.88911 C 434.13698,443.94117 434.07836,445.28964 434.19561,447.07783 C 425.95818,440.33544 419.47962,434.12072 408.16414,430.80816 C 409.74713,429.87009 411.41806,429.10789 413.52872,429.31310 z "
+           style="fill:url(#linearGradient3086);fill-opacity:1.0000000;fill-rule:evenodd;stroke:#000000;stroke-width:1.2967840;stroke-linecap:butt;stroke-linejoin:bevel;stroke-miterlimit:4.0000000;stroke-opacity:1.0000000" />
+        <path
+           sodipodi:nodetypes="ccccc"
+           id="path2982"
+           d="M 447.50910,455.19439 C 449.34493,454.00111 451.18077,453.54215 453.01659,453.54215 C 453.72031,441.39509 455.98450,427.77937 459.44196,416.18307 C 457.66733,415.63231 456.25988,415.26517 454.48525,414.71442 C 450.32404,427.96296 447.99866,441.30331 447.50910,455.19439 z "
+           style="fill:url(#linearGradient3088);fill-opacity:1.0000000;fill-rule:evenodd;stroke:#000000;stroke-width:1.3535123;stroke-linecap:butt;stroke-linejoin:bevel;stroke-miterlimit:4.0000000;stroke-opacity:1.0000000" />
+        <path
+           sodipodi:nodetypes="ccccc"
+           id="path2984"
+           d="M 453.10837,453.72574 C 460.17630,456.08172 469.17186,460.73248 474.49574,466.85189 C 474.61815,468.99370 474.55695,470.40117 474.67933,472.26759 C 466.08155,465.23025 459.31959,458.74367 447.50910,455.28618 C 449.16134,454.30708 450.90537,453.51155 453.10837,453.72574 z "
+           style="fill:url(#linearGradient3090);fill-opacity:1.0000000;fill-rule:evenodd;stroke:#000000;stroke-width:1.3535123;stroke-linecap:butt;stroke-linejoin:bevel;stroke-miterlimit:4.0000000;stroke-opacity:1.0000000" />
+        <path
+           sodipodi:nodetypes="ccccc"
+           id="path2986"
+           d="M 371.47604,440.07442 C 368.20148,452.24345 366.91069,462.94071 366.88730,478.37585 C 377.16859,480.48787 384.54308,486.17594 392.99557,492.83871 C 391.77679,479.98125 392.67953,468.38891 396.48911,453.22047 C 389.72421,446.01549 381.40375,441.97557 371.47604,440.07442 z "
+           style="fill:url(#linearGradient3092);fill-opacity:1.0000000;fill-rule:nonzero;stroke:#000000;stroke-width:1.2627470;stroke-linecap:butt;stroke-linejoin:bevel;stroke-miterlimit:4.0000000;stroke-opacity:1.0000000" />
+        <path
+           sodipodi:nodetypes="ccccc"
+           id="path2988"
+           d="M 366.87438,478.11927 C 368.52897,476.92131 370.21801,476.40758 371.92855,476.32148 C 372.01460,464.97032 373.48571,452.17753 376.16340,441.21040 C 374.48404,440.78046 373.15540,440.50437 371.47604,440.07443 C 368.22013,452.61407 366.67906,465.15314 366.87438,478.11927 z "
+           style="fill:url(#linearGradient3094);fill-opacity:1.0000000;fill-rule:evenodd;stroke:#000000;stroke-width:1.2627470;stroke-linecap:butt;stroke-linejoin:bevel;stroke-miterlimit:4.0000000;stroke-opacity:1.0000000" />
+        <path
+           sodipodi:nodetypes="ccccc"
+           id="path2990"
+           d="M 372.02269,476.48823 C 378.71880,478.35198 387.31862,482.26349 392.56621,487.71565 C 392.78071,489.70557 392.78969,491.01986 392.99126,492.75318 C 384.65014,486.59927 378.04539,480.87245 366.87869,478.20480 C 368.37227,477.21503 369.95998,476.39200 372.02269,476.48823 z "
+           style="fill:url(#linearGradient3096);fill-opacity:1.0000000;fill-rule:evenodd;stroke:#000000;stroke-width:1.2627470;stroke-linecap:butt;stroke-linejoin:bevel;stroke-miterlimit:4.0000000;stroke-opacity:1.0000000" />
+        <path
+           sodipodi:nodetypes="ccccc"
+           id="path3235"
+           d="M 408.33424,463.33863 C 404.83724,475.79880 403.39361,486.76950 403.19916,502.61952 C 413.73365,504.90187 421.24366,510.82437 429.84990,517.75965 C 428.74034,504.54295 429.79536,492.64879 433.87488,477.11448 C 427.00761,469.64100 418.50797,465.40054 408.33424,463.33863 z "
+           style="fill:url(#linearGradient3098);fill-opacity:1.0000000;fill-rule:nonzero;stroke:#000000;stroke-width:1.2967840;stroke-linecap:butt;stroke-linejoin:bevel;stroke-miterlimit:4.0000000;stroke-opacity:1.0000000" />
+        <path
+           sodipodi:nodetypes="ccccc"
+           id="path2994"
+           d="M 403.18873,502.35591 C 404.90105,501.14400 406.64119,500.63508 408.39870,500.56556 C 408.61238,488.91006 410.26433,475.78946 413.13515,464.55691 C 411.41536,464.09687 410.05404,463.79868 408.33424,463.33864 C 404.85231,476.17958 403.13134,489.03887 403.18873,502.35591 z "
+           style="fill:url(#linearGradient3100);fill-opacity:1.0000000;fill-rule:evenodd;stroke:#000000;stroke-width:1.2967840;stroke-linecap:butt;stroke-linejoin:bevel;stroke-miterlimit:4.0000000;stroke-opacity:1.0000000" />
+        <path
+           sodipodi:nodetypes="ccccc"
+           id="path2996"
+           d="M 408.49350,500.73785 C 415.34913,502.72565 424.13706,506.83734 429.46558,512.49408 C 429.66386,514.53990 429.65859,515.88964 429.84643,517.67179 C 421.34894,511.26028 414.62978,505.30649 403.19221,502.44378 C 404.73688,501.44387 406.37638,500.61623 408.49350,500.73785 z "
+           style="fill:url(#linearGradient3102);fill-opacity:1.0000000;fill-rule:evenodd;stroke:#000000;stroke-width:1.2967840;stroke-linecap:butt;stroke-linejoin:bevel;stroke-miterlimit:4.0000000;stroke-opacity:1.0000000" />
+        <path
+           sodipodi:nodetypes="ccccc"
+           id="path2998"
+           d="M 446.70222,486.06716 C 442.97147,499.04948 441.39355,510.49052 441.08779,527.03233 C 452.06810,529.48280 459.86809,535.71297 468.80563,543.00733 C 467.73328,529.20552 468.91160,516.79812 473.27025,500.61103 C 466.15119,492.76623 457.30741,488.28523 446.70222,486.06716 z "
+           style="fill:url(#linearGradient3104);fill-opacity:1.0000000;fill-rule:nonzero;stroke:#000000;stroke-width:1.3535123;stroke-linecap:butt;stroke-linejoin:bevel;stroke-miterlimit:4.0000000;stroke-opacity:1.0000000" />
+        <path
+           sodipodi:nodetypes="ccccc"
+           id="path3000"
+           d="M 441.07861,526.75710 C 442.87367,525.50332 444.69319,524.98345 446.52800,524.92228 C 446.82662,512.75853 448.63591,499.07492 451.70511,487.36988 C 449.91312,486.87854 448.49421,486.55850 446.70222,486.06718 C 442.98473,499.44700 441.10509,512.85743 441.07861,526.75710 z "
+           style="fill:url(#linearGradient3106);fill-opacity:1.0000000;fill-rule:evenodd;stroke:#000000;stroke-width:1.3535123;stroke-linecap:butt;stroke-linejoin:bevel;stroke-miterlimit:4.0000000;stroke-opacity:1.0000000" />
+        <path
+           sodipodi:nodetypes="ccccc"
+           id="path3002"
+           d="M 446.62585,525.10271 C 453.76834,527.22191 462.91386,531.57039 468.43865,537.50903 C 468.63236,539.64557 468.61809,541.05429 468.80258,542.91559 C 459.97512,536.16861 453.00079,529.91093 441.08167,526.84884 C 442.70037,525.81524 444.41694,524.96204 446.62585,525.10271 z "
+           style="fill:url(#linearGradient3108);fill-opacity:1.0000000;fill-rule:evenodd;stroke:#000000;stroke-width:1.3535123;stroke-linecap:butt;stroke-linejoin:bevel;stroke-miterlimit:4.0000000;stroke-opacity:1.0000000" />
+        <path
+           sodipodi:nodetypes="ccccc"
+           id="path3004"
+           d="M 371.39903,512.20344 C 368.23401,524.40141 367.03945,535.10985 367.15485,550.54458 C 377.45471,552.56405 384.88006,558.18560 393.39210,564.77210 C 392.05776,551.92611 392.85625,540.32613 396.52928,525.12407 C 389.69989,517.98019 381.34343,514.01524 371.39903,512.20344 z "
+           style="fill:url(#linearGradient3110);fill-opacity:1.0000000;fill-rule:nonzero;stroke:#000000;stroke-width:1.2627470;stroke-linecap:butt;stroke-linejoin:bevel;stroke-miterlimit:4.0000000;stroke-opacity:1.0000000" />
+        <path
+           sodipodi:nodetypes="ccccc"
+           id="path3006"
+           d="M 367.13962,550.28811 C 368.78338,549.07533 370.46773,548.54643 372.17743,548.44496 C 372.16140,537.09348 373.51744,524.28799 376.09641,513.29722 C 374.41326,512.88239 373.08219,512.61826 371.39903,512.20345 C 368.25601,524.77185 366.82774,537.32426 367.13962,550.28811 z "
+           style="fill:url(#linearGradient3112);fill-opacity:1.0000000;fill-rule:evenodd;stroke:#000000;stroke-width:1.2627470;stroke-linecap:butt;stroke-linejoin:bevel;stroke-miterlimit:4.0000000;stroke-opacity:1.0000000" />
+        <path
+           sodipodi:nodetypes="ccccc"
+           id="path3008"
+           d="M 372.27306,548.61086 C 378.98567,550.41431 387.62031,554.24837 392.91670,559.65311 C 393.14908,561.64103 393.16988,562.95518 393.38702,564.68663 C 384.99091,558.60796 378.33494,552.94075 367.14470,550.37360 C 368.62932,549.37044 370.20956,548.53316 372.27306,548.61086 z "
+           style="fill:url(#linearGradient3114);fill-opacity:1.0000000;fill-rule:evenodd;stroke:#000000;stroke-width:1.2627470;stroke-linecap:butt;stroke-linejoin:bevel;stroke-miterlimit:4.0000000;stroke-opacity:1.0000000" />
+        <path
+           sodipodi:nodetypes="ccccc"
+           id="path3010"
+           d="M 407.81322,534.53959 C 404.14855,546.95148 402.55714,557.90172 402.14902,573.74768 C 412.65178,576.17185 420.08126,582.19505 428.59321,589.24575 C 427.66194,576.01528 428.87723,564.13642 433.16581,548.65853 C 426.39991,541.09313 417.95822,536.73849 407.81322,534.53959 z "
+           style="fill:url(#linearGradient3116);fill-opacity:1.0000000;fill-rule:nonzero;stroke:#000000;stroke-width:1.2967840;stroke-linecap:butt;stroke-linejoin:bevel;stroke-miterlimit:4.0000000;stroke-opacity:1.0000000" />
+        <path
+           sodipodi:nodetypes="ccccc"
+           id="path3012"
+           d="M 402.14214,573.48394 C 403.87065,572.29523 405.61748,571.80983 407.37577,571.76402 C 407.74658,560.11245 409.57526,547.01533 412.59725,535.82249 C 410.88383,535.33931 409.52666,535.02279 407.81322,534.53960 C 404.15848,547.33244 402.26428,560.16737 402.14214,573.48394 z "
+           style="fill:url(#linearGradient3118);fill-opacity:1.0000000;fill-rule:evenodd;stroke:#000000;stroke-width:1.2967840;stroke-linecap:butt;stroke-linejoin:bevel;stroke-miterlimit:4.0000000;stroke-opacity:1.0000000" />
+        <path
+           sodipodi:nodetypes="ccccc"
+           id="path3014"
+           d="M 407.46824,571.93756 C 414.29646,574.01762 423.02814,578.24740 428.27993,583.97546 C 428.45060,586.02377 428.42714,587.37330 428.59093,589.15784 C 420.18064,582.63234 413.54238,576.58852 402.14444,573.57187 C 403.70245,572.59287 405.35296,571.78741 407.46824,571.93756 z "
+           style="fill:url(#linearGradient3120);fill-opacity:1.0000000;fill-rule:evenodd;stroke:#000000;stroke-width:1.2967840;stroke-linecap:butt;stroke-linejoin:bevel;stroke-miterlimit:4.0000000;stroke-opacity:1.0000000" />
+        <path
+           sodipodi:nodetypes="ccccc"
+           id="path3016"
+           d="M 443.79507,558.33897 C 440.34856,571.39960 439.02073,582.87237 439.07607,599.41690 C 450.10724,601.62714 458.04135,607.68559 467.13598,614.78315 C 465.76265,601.00802 466.66989,588.57786 470.67421,572.29949 C 463.38562,564.61195 454.44614,560.32503 443.79507,558.33897 z "
+           style="fill:url(#linearGradient3122);fill-opacity:1.0000000;fill-rule:nonzero;stroke:#000000;stroke-width:1.3535123;stroke-linecap:butt;stroke-linejoin:bevel;stroke-miterlimit:4.0000000;stroke-opacity:1.0000000" />
+        <path
+           sodipodi:nodetypes="ccccc"
+           id="path3018"
+           d="M 439.06090,599.14195 C 440.82816,597.84928 442.63590,597.28983 444.46892,597.18863 C 444.50201,585.02125 446.01222,571.30142 448.82520,559.53217 C 447.02292,559.08007 445.59737,558.79107 443.79507,558.33899 C 440.37049,571.79675 438.78399,585.24501 439.06090,599.14195 z "
+           style="fill:url(#linearGradient3124);fill-opacity:1.0000000;fill-rule:evenodd;stroke:#000000;stroke-width:1.3535123;stroke-linecap:butt;stroke-linejoin:bevel;stroke-miterlimit:4.0000000;stroke-opacity:1.0000000" />
+        <path
+           sodipodi:nodetypes="ccccc"
+           id="path3020"
+           d="M 444.57069,597.36688 C 451.75774,599.32969 460.99598,603.47752 466.64909,609.29416 C 466.88938,611.42596 466.90586,612.83466 467.13093,614.69150 C 458.15830,608.13879 451.04906,602.03481 439.06595,599.23359 C 440.66170,598.16491 442.35924,597.27445 444.57069,597.36688 z "
+           style="fill:url(#linearGradient3126);fill-opacity:1.0000000;fill-rule:evenodd;stroke:#000000;stroke-width:1.3535123;stroke-linecap:butt;stroke-linejoin:bevel;stroke-miterlimit:4.0000000;stroke-opacity:1.0000000" />
+      </g>
+      <g
+         id="g3022">
+        <path
+           sodipodi:nodetypes="ccccc"
+           id="path3024"
+           d="M 385.77538,591.50123 C 382.11071,603.91313 381.50841,617.83066 382.33666,633.92389 C 393.58123,638.32626 420.79266,653.25133 432.02463,661.04384 C 431.09335,647.81337 430.82499,633.95632 435.11357,618.47842 C 428.34767,610.91303 395.92038,594.68923 385.77538,591.50123 z "
+           style="fill:url(#radialGradient3128);fill-opacity:1.0000000;fill-rule:nonzero;stroke:#000000;stroke-width:1.2967840;stroke-linecap:butt;stroke-linejoin:bevel;stroke-miterlimit:4.0000000;stroke-opacity:1.0000000" />
+        <path
+           sodipodi:nodetypes="cc"
+           id="path3026"
+           d="M 409.78664,602.56421 C 405.50055,616.41157 404.85116,631.46531 406.00511,645.80721"
+           style="fill:none;fill-opacity:0.75000000;fill-rule:evenodd;stroke:#000000;stroke-width:1.2627470;stroke-linecap:round;stroke-linejoin:miter;stroke-miterlimit:4.0000000;stroke-opacity:0.59169549" />
+      </g>
+      <g
+         id="g3028">
+        <path
+           sodipodi:nodetypes="ccccc"
+           id="path3030"
+           d="M 518.90832,432.04928 C 514.74711,444.90008 513.29020,456.53285 512.43347,473.05529 C 523.82735,466.59608 528.90891,462.55525 539.35305,460.11723 C 539.74373,446.53799 542.08672,434.92871 545.72901,418.14385 C 533.36090,421.34559 528.93241,424.59332 518.90832,432.04928 z "
+           style="fill:url(#linearGradient3130);fill-opacity:1.0000000;fill-rule:nonzero;stroke:#000000;stroke-width:1.3535123;stroke-linecap:butt;stroke-linejoin:bevel;stroke-miterlimit:4.0000000;stroke-opacity:1.0000000" />
+        <path
+           sodipodi:nodetypes="ccccc"
+           id="path3032"
+           d="M 512.94918,468.85078 C 518.45053,464.94044 526.13016,461.19433 534.96318,457.85160 C 536.58951,458.36417 537.59358,458.83169 539.47053,460.07148 C 527.42628,463.68688 520.78964,468.35435 512.61362,472.66709 L 512.94918,468.85078 z "
+           style="fill:url(#linearGradient3132);fill-opacity:1.0000000;fill-rule:evenodd;stroke:#000000;stroke-width:1.3535123;stroke-linecap:butt;stroke-linejoin:bevel;stroke-miterlimit:4.0000000;stroke-opacity:1.0000000" />
+        <path
+           sodipodi:nodetypes="ccccc"
+           id="path3034"
+           d="M 535.05333,457.77926 C 536.47561,458.46918 537.89788,459.15910 539.32016,459.84903 C 540.13266,446.30303 542.18583,434.17494 545.47967,418.41347 C 543.65019,418.57379 542.61829,418.73411 541.05467,419.69201 C 537.90218,432.12190 535.99035,445.17213 535.05333,457.77926 z "
+           style="fill:url(#linearGradient3134);fill-opacity:1.0000000;fill-rule:evenodd;stroke:#000000;stroke-width:1.3535123;stroke-linecap:butt;stroke-linejoin:bevel;stroke-miterlimit:4.0000000;stroke-opacity:1.0000000" />
+        <path
+           sodipodi:nodetypes="ccccc"
+           id="path3036"
+           d="M 565.76688,412.45716 C 561.86110,424.51914 560.49362,435.43786 559.68948,450.94610 C 570.38397,444.88338 575.15361,441.09058 584.95666,438.80222 C 585.32336,426.05651 587.52253,415.15984 590.94124,399.40528 C 579.33232,402.41049 575.17567,405.45887 565.76688,412.45716 z "
+           style="fill:url(#linearGradient3136);fill-opacity:1.0000000;fill-rule:nonzero;stroke:#000000;stroke-width:1.2704297;stroke-linecap:butt;stroke-linejoin:bevel;stroke-miterlimit:4.0000000;stroke-opacity:1.0000000" />
+        <path
+           sodipodi:nodetypes="ccccc"
+           id="path3038"
+           d="M 560.17353,446.99968 C 565.33719,443.32936 572.54543,439.81320 580.83625,436.67566 C 582.36275,437.15676 583.30519,437.59559 585.06693,438.75928 C 573.76199,442.15275 567.53272,446.53372 559.85857,450.58173 L 560.17353,446.99968 z "
+           style="fill:url(#linearGradient3138);fill-opacity:1.0000000;fill-rule:evenodd;stroke:#000000;stroke-width:1.2704297;stroke-linecap:butt;stroke-linejoin:bevel;stroke-miterlimit:4.0000000;stroke-opacity:1.0000000" />
+        <path
+           sodipodi:nodetypes="ccccc"
+           id="path3040"
+           d="M 580.92087,436.60776 C 582.25584,437.25533 583.59081,437.90290 584.92579,438.55048 C 585.68841,425.83597 587.61555,414.45234 590.70721,399.65835 C 588.99003,399.80883 588.02147,399.95931 586.55383,400.85841 C 583.59485,412.52532 581.80037,424.77449 580.92087,436.60776 z "
+           style="fill:url(#linearGradient3140);fill-opacity:1.0000000;fill-rule:evenodd;stroke:#000000;stroke-width:1.2704297;stroke-linecap:butt;stroke-linejoin:bevel;stroke-miterlimit:4.0000000;stroke-opacity:1.0000000" />
+        <path
+           sodipodi:nodetypes="ccccc"
+           id="path3042"
+           d="M 504.62812,506.44829 C 500.46691,519.29909 499.01000,530.93186 498.15327,547.45430 C 509.54715,540.99509 514.62871,536.95426 525.07285,534.51624 C 525.46353,520.93700 527.80652,509.32772 531.44881,492.54286 C 519.08070,495.74460 514.65221,498.99233 504.62812,506.44829 z "
+           style="fill:url(#linearGradient3142);fill-opacity:1.0000000;fill-rule:nonzero;stroke:#000000;stroke-width:1.3535123;stroke-linecap:butt;stroke-linejoin:bevel;stroke-miterlimit:4.0000000;stroke-opacity:1.0000000" />
+        <path
+           sodipodi:nodetypes="ccccc"
+           id="path3044"
+           d="M 498.66898,543.24979 C 504.17033,539.33945 511.84996,535.59334 520.68298,532.25061 C 522.30931,532.76318 523.31338,533.23070 525.19033,534.47049 C 513.14608,538.08589 506.50944,542.75336 498.33342,547.06610 L 498.66898,543.24979 z "
+           style="fill:url(#linearGradient3144);fill-opacity:1.0000000;fill-rule:evenodd;stroke:#000000;stroke-width:1.3535123;stroke-linecap:butt;stroke-linejoin:bevel;stroke-miterlimit:4.0000000;stroke-opacity:1.0000000" />
+        <path
+           sodipodi:nodetypes="ccccc"
+           id="path3046"
+           d="M 520.77313,532.17827 C 522.19541,532.86819 523.61768,533.55811 525.03996,534.24804 C 525.85246,520.70204 527.90563,508.57395 531.19947,492.81248 C 529.36999,492.97280 528.33809,493.13312 526.77447,494.09102 C 523.62198,506.52091 521.71015,519.57114 520.77313,532.17827 z "
+           style="fill:url(#linearGradient3146);fill-opacity:1.0000000;fill-rule:evenodd;stroke:#000000;stroke-width:1.3535123;stroke-linecap:butt;stroke-linejoin:bevel;stroke-miterlimit:4.0000000;stroke-opacity:1.0000000" />
+        <path
+           sodipodi:nodetypes="ccccc"
+           id="path3048"
+           d="M 551.48668,486.85617 C 547.58090,498.91815 546.21342,509.83687 545.40928,525.34511 C 556.10377,519.28239 560.87341,515.48959 570.67646,513.20123 C 571.04316,500.45552 573.24233,489.55885 576.66104,473.80429 C 565.05212,476.80950 560.89547,479.85788 551.48668,486.85617 z "
+           style="fill:url(#linearGradient3148);fill-opacity:1.0000000;fill-rule:nonzero;stroke:#000000;stroke-width:1.2704297;stroke-linecap:butt;stroke-linejoin:bevel;stroke-miterlimit:4.0000000;stroke-opacity:1.0000000" />
+        <path
+           sodipodi:nodetypes="ccccc"
+           id="path3050"
+           d="M 545.89333,521.39869 C 551.05699,517.72837 558.26523,514.21221 566.55605,511.07467 C 568.08255,511.55577 569.02499,511.99460 570.78673,513.15829 C 559.48179,516.55176 553.25252,520.93273 545.57837,524.98074 L 545.89333,521.39869 z "
+           style="fill:url(#linearGradient3150);fill-opacity:1.0000000;fill-rule:evenodd;stroke:#000000;stroke-width:1.2704297;stroke-linecap:butt;stroke-linejoin:bevel;stroke-miterlimit:4.0000000;stroke-opacity:1.0000000" />
+        <path
+           sodipodi:nodetypes="ccccc"
+           id="path3052"
+           d="M 566.64067,511.00677 C 567.97564,511.65434 569.31061,512.30191 570.64559,512.94949 C 571.40821,500.23498 573.33535,488.85135 576.42701,474.05736 C 574.70983,474.20784 573.74127,474.35832 572.27363,475.25742 C 569.31465,486.92433 567.52017,499.17350 566.64067,511.00677 z "
+           style="fill:url(#linearGradient3152);fill-opacity:1.0000000;fill-rule:evenodd;stroke:#000000;stroke-width:1.2704297;stroke-linecap:butt;stroke-linejoin:bevel;stroke-miterlimit:4.0000000;stroke-opacity:1.0000000" />
+        <path
+           sodipodi:nodetypes="ccccc"
+           id="path3054"
+           d="M 496.82964,578.76149 C 492.66843,591.61229 491.21152,603.24506 490.35479,619.76750 C 501.74867,613.30829 506.83023,609.26746 517.27437,606.82944 C 517.66505,593.25020 520.00804,581.64092 523.65033,564.85606 C 511.28222,568.05780 506.85373,571.30553 496.82964,578.76149 z "
+           style="fill:url(#linearGradient3154);fill-opacity:1.0000000;fill-rule:nonzero;stroke:#000000;stroke-width:1.3535123;stroke-linecap:butt;stroke-linejoin:bevel;stroke-miterlimit:4.0000000;stroke-opacity:1.0000000" />
+        <path
+           sodipodi:nodetypes="ccccc"
+           id="path3056"
+           d="M 490.87050,615.56299 C 496.37185,611.65265 504.05148,607.90654 512.88450,604.56381 C 514.51083,605.07638 515.51490,605.54390 517.39185,606.78369 C 505.34760,610.39909 498.71096,615.06656 490.53494,619.37930 L 490.87050,615.56299 z "
+           style="fill:url(#linearGradient3156);fill-opacity:1.0000000;fill-rule:evenodd;stroke:#000000;stroke-width:1.3535123;stroke-linecap:butt;stroke-linejoin:bevel;stroke-miterlimit:4.0000000;stroke-opacity:1.0000000" />
+        <path
+           sodipodi:nodetypes="ccccc"
+           id="path3058"
+           d="M 512.97465,604.49147 C 514.39693,605.18139 515.81920,605.87131 517.24148,606.56124 C 518.05398,593.01524 520.10715,580.88715 523.40099,565.12568 C 521.57151,565.28600 520.53961,565.44632 518.97599,566.40422 C 515.82350,578.83411 513.91167,591.88434 512.97465,604.49147 z "
+           style="fill:url(#linearGradient3158);fill-opacity:1.0000000;fill-rule:evenodd;stroke:#000000;stroke-width:1.3535123;stroke-linecap:butt;stroke-linejoin:bevel;stroke-miterlimit:4.0000000;stroke-opacity:1.0000000" />
+        <path
+           sodipodi:nodetypes="ccccc"
+           id="path3060"
+           d="M 543.68820,559.16937 C 539.78242,571.23135 538.41494,582.15007 537.61080,597.65831 C 548.30529,591.59559 553.07493,587.80279 562.87798,585.51443 C 563.24468,572.76872 565.44385,561.87205 568.86256,546.11749 C 557.25364,549.12270 553.09699,552.17108 543.68820,559.16937 z "
+           style="fill:url(#linearGradient3160);fill-opacity:1.0000000;fill-rule:nonzero;stroke:#000000;stroke-width:1.2704297;stroke-linecap:butt;stroke-linejoin:bevel;stroke-miterlimit:4.0000000;stroke-opacity:1.0000000" />
+        <path
+           sodipodi:nodetypes="ccccc"
+           id="path3062"
+           d="M 538.09485,593.71189 C 543.25851,590.04157 550.46675,586.52541 558.75757,583.38787 C 560.28407,583.86897 561.22651,584.30780 562.98825,585.47149 C 551.68331,588.86496 545.45404,593.24593 537.77989,597.29394 L 538.09485,593.71189 z "
+           style="fill:url(#linearGradient3162);fill-opacity:1.0000000;fill-rule:evenodd;stroke:#000000;stroke-width:1.2704297;stroke-linecap:butt;stroke-linejoin:bevel;stroke-miterlimit:4.0000000;stroke-opacity:1.0000000" />
+        <path
+           sodipodi:nodetypes="ccccc"
+           id="path3064"
+           d="M 558.84219,583.31997 C 560.17716,583.96754 561.51213,584.61511 562.84711,585.26269 C 563.60973,572.54818 565.53687,561.16455 568.62853,546.37056 C 566.91135,546.52104 565.94279,546.67152 564.47515,547.57062 C 561.51617,559.23753 559.72169,571.48670 558.84219,583.31997 z "
+           style="fill:url(#linearGradient3164);fill-opacity:1.0000000;fill-rule:evenodd;stroke:#000000;stroke-width:1.2704297;stroke-linecap:butt;stroke-linejoin:bevel;stroke-miterlimit:4.0000000;stroke-opacity:1.0000000" />
+      </g>
+    </g>
+  </g>
+</svg>

Modified: trunk/data/images/mainmenu/newgame_back.png
===================================================================
(Binary files differ)

Modified: trunk/data/images/mainmenu/newgame_back.svg
===================================================================
--- trunk/data/images/mainmenu/newgame_back.svg	2010-01-26 17:05:36 UTC (rev 1566)
+++ trunk/data/images/mainmenu/newgame_back.svg	2010-01-30 17:37:48 UTC (rev 1567)
@@ -1,26 +1,34 @@
 <?xml version="1.0" encoding="UTF-8" standalone="no"?>
 <!-- Created with Inkscape (http://www.inkscape.org/) -->
+
 <svg
    xmlns:dc="http://purl.org/dc/elements/1.1/"
-   xmlns:cc="http://web.resource.org/cc/"
+   xmlns:cc="http://creativecommons.org/ns#"
    xmlns:rdf="http://www.w3.org/1999/02/22-rdf-syntax-ns#"
    xmlns:svg="http://www.w3.org/2000/svg"
    xmlns="http://www.w3.org/2000/svg"
    xmlns:xlink="http://www.w3.org/1999/xlink"
-   xmlns:sodipodi="http://inkscape.sourceforge.net/DTD/sodipodi-0.dtd"
+   xmlns:sodipodi="http://sodipodi.sourceforge.net/DTD/sodipodi-0.dtd"
    xmlns:inkscape="http://www.inkscape.org/namespaces/inkscape"
    width="1024.0000px"
    height="768.00000px"
    id="svg2"
    sodipodi:version="0.32"
-   inkscape:version="0.41"
-   sodipodi:docbase="/home/egore/source/lincity-ng/data/images/mainmenu"
+   inkscape:version="0.47pre4 r22446"
    sodipodi:docname="newgame_back.svg"
    inkscape:export-filename="/home/egore/source/lincity-ng/data/images/mainmenu/newgame_back.png"
    inkscape:export-xdpi="90.000000"
-   inkscape:export-ydpi="90.000000">
+   inkscape:export-ydpi="90.000000"
+   version="1.1">
   <defs
      id="defs3">
+    <inkscape:perspective
+       sodipodi:type="inkscape:persp3d"
+       inkscape:vp_x="0 : 384 : 1"
+       inkscape:vp_y="0 : 1000 : 0"
+       inkscape:vp_z="1024 : 384 : 1"
+       inkscape:persp3d-origin="512 : 256 : 1"
+       id="perspective334" />
     <linearGradient
        id="linearGradient2542">
       <stop
@@ -838,7 +846,7 @@
        inkscape:collect="always"
        xlink:href="#linearGradient9030"
        id="linearGradient9044"
-       gradientTransform="scale(0.971157,1.029700)"
+       gradientTransform="scale(0.971157,1.0297)"
        x1="597.34943"
        y1="541.68359"
        x2="607.99292"
@@ -858,7 +866,7 @@
        inkscape:collect="always"
        xlink:href="#linearGradient4960"
        id="linearGradient11352"
-       gradientTransform="matrix(0.959731,0.000000,0.000000,1.041959,0.000000,258.1723)"
+       gradientTransform="matrix(0.959731,0,0,1.041959,0,258.1723)"
        x1="596.21234"
        y1="288.35770"
        x2="600.57306"
@@ -899,7 +907,7 @@
        xlink:href="#linearGradient4960"
        id="linearGradient15950"
        gradientUnits="userSpaceOnUse"
-       gradientTransform="matrix(0.924716,0.000000,0.000000,1.081414,-4.379882,118.1634)"
+       gradientTransform="matrix(0.924716,0,0,1.081414,-4.379882,118.1634)"
        x1="622.09137"
        y1="247.68852"
        x2="628.40155"
@@ -2168,7 +2176,7 @@
        xlink:href="#linearGradient4960"
        id="linearGradient28745"
        gradientUnits="userSpaceOnUse"
-       gradientTransform="matrix(0.206219,0.000000,0.000000,4.849215,0.224287,0.297193)"
+       gradientTransform="matrix(0.206219,0,0,4.849215,0.224287,0.297193)"
        x1="3138.8862"
        y1="100.32681"
        x2="2594.4343"
@@ -2191,28 +2199,26 @@
      borderopacity="1.0"
      inkscape:pageopacity="0.0"
      inkscape:pageshadow="2"
-     inkscape:zoom="1.1250000"
-     inkscape:cx="311.85628"
-     inkscape:cy="355.71935"
+     inkscape:zoom="1.125"
+     inkscape:cx="761.01652"
+     inkscape:cy="316.45173"
      inkscape:document-units="px"
      inkscape:current-layer="layer1"
      showguides="true"
      inkscape:guide-bbox="true"
-     inkscape:window-width="1272"
-     inkscape:window-height="600"
-     inkscape:window-x="0"
-     inkscape:window-y="0" />
+     inkscape:window-width="1307"
+     inkscape:window-height="919"
+     inkscape:window-x="1936"
+     inkscape:window-y="42"
+     showgrid="false"
+     inkscape:window-maximized="0" />
   <metadata
      id="metadata4">
-    <rdf:RDF
-       id="RDF5">
+    <rdf:RDF>
       <cc:Work
-         rdf:about=""
-         id="Work6">
-        <dc:format
-           id="format7">image/svg+xml</dc:format>
+         rdf:about="">
+        <dc:format>image/svg+xml</dc:format>
         <dc:type
-           id="type9"
            rdf:resource="http://purl.org/dc/dcmitype/StillImage" />
       </cc:Work>
     </rdf:RDF>
@@ -2232,108 +2238,7 @@
        y="-0.00048458576"
        rx="0.0000000"
        ry="0.0000000" />
-    <rect
-       style="fill:#000000;fill-opacity:0.55294120;fill-rule:nonzero;stroke:none;stroke-width:3.0000000;stroke-linecap:round;stroke-linejoin:round;stroke-miterlimit:4.0000000;stroke-opacity:0.63667822"
-       id="rect1618"
-       width="538.90332"
-       height="357.43082"
-       x="54.560963"
-       y="239.71436"
-       rx="31.902317"
-       ry="32.925133" />
     <g
-       transform="translate(-22.68650,-9.925342)"
-       id="scenario-box">
-      <rect
-         style="fill:#0000b9;fill-opacity:1.0000000;fill-rule:nonzero;stroke:#4494e1;stroke-width:3.0000000;stroke-linecap:round;stroke-linejoin:round;stroke-miterlimit:4.0000000;stroke-opacity:0.63667822"
-         id="scenarioselect"
-         width="538.90332"
-         height="357.43082"
-         x="73.691910"
-         y="245.63969"
-         rx="31.902317"
-         ry="32.925133" />
-      <path
-         style="fill:url(#radialGradient5730);fill-opacity:1.0000000;fill-rule:evenodd;stroke:none;stroke-width:0.25000000pt;stroke-linecap:butt;stroke-linejoin:miter;stroke-opacity:1.0000000"
-         d="M 83.216711,384.00000 C 80.601941,382.36497 78.648441,288.17656 86.224543,265.94256 C 92.923081,246.28399 162.00263,251.58891 169.69191,255.66580 C 178.45614,260.31263 119.99616,267.86393 107.14926,292.16024 C 94.302359,316.45655 86.929640,386.32172 83.216711,384.00000 z "
-         id="path4200"
-         sodipodi:nodetypes="cssss" />
-    </g>
-    <g
-       id="slider-up"
-       transform="translate(-22.68650,-9.925342)"
-       style="opacity:0.24830700">
-      <path
-         style="stroke-opacity:1.0000000;stroke-linejoin:miter;stroke-linecap:butt;stroke-width:0.25000000pt;stroke:none;fill-rule:evenodd;fill-opacity:0.58823532;fill:#000000"
-         d="M 568.85640,292.13576 C 572.15666,280.89816 577.83812,270.41253 585.14882,264.18799 C 588.36553,274.33942 593.58747,284.49085 599.18538,293.51435 C 585.71279,290.15142 578.56919,289.98433 568.85640,292.13576 z "
-         id="path9046"
-         sodipodi:nodetypes="cccc" />
-      <path
-         style="stroke-opacity:1.0000000;stroke-linejoin:miter;stroke-linecap:butt;stroke-width:0.25000000pt;stroke:#000000;fill-rule:evenodd;fill-opacity:1.0000000;fill:url(#linearGradient9036)"
-         d="M 567.97912,291.63446 C 571.27938,280.39686 576.96084,269.91123 584.27154,263.68669 C 587.48825,273.83812 592.71019,283.98955 598.30810,293.01305 C 584.83551,289.65012 577.69191,289.48303 567.97912,291.63446 z "
-         id="path8268"
-         sodipodi:nodetypes="cccc" />
-      <path
-         style="stroke-opacity:1.0000000;stroke-linejoin:miter;stroke-linecap:butt;stroke-width:0.25000000pt;stroke:none;fill-rule:evenodd;fill-opacity:1.0000000;fill:url(#linearGradient10584)"
-         d="M 583.14360,266.44386 C 581.65304,267.62019 578.91466,270.90948 576.80585,274.13210 C 574.69703,277.35472 573.57888,280.55566 573.93211,280.29243 C 574.88264,279.58408 577.85275,273.55462 580.39260,271.51593 C 582.60665,269.73875 584.02319,268.57846 584.83551,270.92429 C 585.43212,272.65071 585.57456,270.92556 585.12065,269.53738 C 584.66675,268.14920 583.58515,266.09539 583.14360,266.44386 z "
-         id="path9818"
-         sodipodi:nodetypes="cssssss" />
-    </g>
-    <g
-       id="slider-down"
-       transform="translate(-22.68650,-9.925342)"
-       style="opacity:0.24830700">
-      <path
-         style="stroke-opacity:1.0000000;stroke-linejoin:miter;stroke-linecap:butt;stroke-width:0.25000000pt;stroke:none;fill-rule:evenodd;fill-opacity:0.58823532;fill:#000000"
-         d="M 569.60835,557.82767 C 579.71801,555.36292 588.82506,554.90338 598.43342,557.95299 C 590.12010,566.89294 587.19582,575.45691 583.89555,586.40208 C 576.83551,579.42558 571.15404,567.56135 569.60835,557.82767 z "
-         id="path9048"
-         sodipodi:nodetypes="cccc" />
-      <path
-         style="stroke-opacity:1.0000000;stroke-linejoin:miter;stroke-linecap:butt;stroke-width:0.25000000pt;stroke:#000000;fill-rule:evenodd;fill-opacity:1.0000000;fill:url(#linearGradient9044)"
-         d="M 569.04439,557.32637 C 579.15405,554.86162 588.26110,554.40208 597.86946,557.45169 C 589.55614,566.39164 586.63186,574.95561 583.33159,585.90078 C 576.27155,578.92428 570.59008,567.06005 569.04439,557.32637 z "
-         id="path8270"
-         sodipodi:nodetypes="cccc" />
-      <path
-         style="stroke-opacity:1.0000000;stroke-linejoin:miter;stroke-linecap:butt;stroke-width:0.25000000pt;stroke:none;fill-rule:evenodd;fill-opacity:1.0000000;fill:url(#linearGradient11352)"
-         d="M 571.11228,558.70495 C 569.90658,560.10144 572.51626,567.28211 573.68147,566.78850 C 574.49690,566.44307 571.89798,561.77640 573.36333,559.70174 C 574.82868,557.62709 580.23298,557.95647 580.01045,557.20104 C 579.66177,556.01737 572.72065,556.84206 571.11228,558.70495 z "
-         id="path10586"
-         sodipodi:nodetypes="cssss" />
-    </g>
-    <g
-       id="slider-bar"
-       transform="translate(-22.68650,-9.925342)">
-      <path
-         style="fill:#000000;fill-opacity:0.58823532;fill-rule:nonzero;stroke:none;stroke-width:0.22436385pt;stroke-linecap:butt;stroke-linejoin:miter;stroke-opacity:1.0000000"
-         d="M 579.58094,303.08576 C 579.71412,299.49186 583.01184,299.46746 582.81106,303.08576 C 578.63065,378.41883 593.36898,466.32823 588.66564,547.97349 C 588.44616,551.79516 584.96529,551.78397 585.23364,547.97349 C 591.03691,465.31874 576.68589,381.20465 579.58094,303.08576 z "
-         id="path12126"
-         sodipodi:nodetypes="cssss" />
-      <path
-         style="fill:url(#linearGradient28748);fill-opacity:1.0000000;fill-rule:nonzero;stroke:#000000;stroke-width:0.22436385pt;stroke-linecap:butt;stroke-linejoin:miter;stroke-opacity:1.0000000"
-         d="M 578.91800,302.78851 C 579.05118,299.19461 582.34890,299.17021 582.14812,302.78851 C 577.96771,378.12158 592.70604,466.03098 588.00270,547.67624 C 587.78322,551.49791 584.30235,551.48672 584.57070,547.67624 C 590.37397,465.02149 576.02295,380.90740 578.91800,302.78851 z "
-         id="path11354"
-         sodipodi:nodetypes="cssss" />
-      <path
-         style="fill:url(#linearGradient28745);fill-opacity:1.0000000;fill-rule:nonzero;stroke:none;stroke-width:0.22436385pt;stroke-linecap:butt;stroke-linejoin:miter;stroke-opacity:1.0000000"
-         d="M 579.58094,302.96042 C 579.62153,301.87152 580.41394,301.84951 580.36720,303.02309 C 577.28968,378.71824 590.99943,465.73326 585.97113,547.03353 C 585.88057,548.47968 585.28064,548.27221 585.35897,547.15886 C 591.05922,465.18833 576.65258,381.53304 579.58094,302.96042 z "
-         id="path13652"
-         sodipodi:nodetypes="cssss" />
-    </g>
-    <g
-       id="slider-position"
-       transform="translate(-22.68650,-9.925342)"
-       style="opacity:0.24830700">
-      <path
-         style="stroke-opacity:1.0000000;stroke-linejoin:miter;stroke-linecap:butt;stroke-width:0.25000000pt;stroke:#000000;fill-rule:evenodd;fill-opacity:1.0000000;fill:url(#linearGradient15946)"
-         d="M 599.31071,393.77546 C 587.53943,367.78055 559.78816,384.76696 567.72846,406.80940 C 576.30299,430.61248 605.32638,407.06005 599.31071,393.77546 z "
-         id="path15180"
-         sodipodi:nodetypes="css" />
-      <path
-         style="stroke-opacity:1.0000000;stroke-linejoin:miter;stroke-linecap:butt;stroke-width:0.25000000pt;stroke:none;fill-rule:evenodd;fill-opacity:1.0000000;fill:url(#linearGradient15950)"
-         d="M 579.39035,382.53939 C 573.71982,383.56639 569.49387,391.05676 568.42429,394.32008 C 567.68663,396.57070 571.90629,390.52744 574.44614,388.48875 C 575.55317,387.60016 579.01433,386.45849 581.67366,387.02278 C 584.33298,387.58708 585.31318,391.48660 585.71934,392.65951 C 586.31595,394.38593 590.59416,386.51979 590.14025,385.13161 C 589.68635,383.74343 584.54967,381.60498 579.39035,382.53939 z "
-         id="path15948"
-         sodipodi:nodetypes="cssssss" />
-    </g>
-    <g
        id="author">
       <path
          style="fill:#000000;fill-opacity:0.75000000;fill-rule:nonzero;stroke:none;stroke-width:1.0000000pt;stroke-linecap:butt;stroke-linejoin:miter;stroke-opacity:1.0000000"

Modified: trunk/src/lincity/init_game.cpp
===================================================================
--- trunk/src/lincity/init_game.cpp	2010-01-26 17:05:36 UTC (rev 1566)
+++ trunk/src/lincity/init_game.cpp	2010-01-30 17:37:48 UTC (rev 1567)
@@ -57,13 +57,14 @@
 static void setup_ground(void);
 static void new_setup_river_ground(void);
 static void new_setup_river(void);
-//static void sort_by_altitude(int n, int *tabx, int *taby);
+static void sort_by_altitude(int n, int *tabx, int *taby);
 static int new_setup_one_river(int x, int y, int lake_id, Shoreline *shore);
 static void set_river_tile( int i, int j);
 static void do_rand_ecology(int x, int y);
-Shoreline * init_shore(void);
-void free_shore(Shoreline *shore);
-void overfill_lake(int xl, int yl, Shoreline *shore, int lake_id);
+static Shoreline * init_shore(void);
+static void free_shore(Shoreline *shore);
+static void overfill_lake(int xl, int yl, Shoreline *shore, int lake_id);
+static void create_new_city(int *originx, int *originy, int random_village, int old_setup_ground, int climate);
 
 
 /* ---------------------------------------------------------------------- *
@@ -171,52 +172,33 @@
     update_pbars_monthly();
 }
 
+
 void new_city(int *originx, int *originy, int random_village)
 {
-    int old_setup_ground = true;
-#ifdef EXPERIMENTAL
-    old_setup_ground = false;
-#endif
-    clear_game();
-    coal_reserve_setup();
+    create_new_city( originx, originy, random_village, true, 0);
+}
 
-    global_mountainity= 100 + rand () % 300; // roughly water slope = 25m / 1km (=from N to S)
-    //global_mountainity = 200; //  nearly useless to have a random one (only impacts do_rand_ecology through ALT(x,y))
-    if (old_setup_ground) {
-        setup_river();
-        setup_ground();
-    } else {
-        new_setup_river_ground();
-    }
-    setup_land();
-    ore_reserve_setup();
-    init_pbars();
+void new_desert_city(int *originx, int *originy, int random_village)
+{
+    create_new_city( originx, originy, random_village, false, 1);
+}
 
-    /* Initial population is 100 for empty board or 200
-       for random village (100 are housed). */
-    people_pool = 100;
+void new_temperate_city(int *originx, int *originy, int random_village)
+{
+    create_new_city( originx, originy, random_village, false, 2);
+}
 
-    if (random_village != 0) {
-        random_start(originx, originy);
-        update_pbar(PPOP, 200, 1);      /* So pbars don't flash */
-    } else {
-        *originx = *originy = WORLD_SIDE_LEN / 2;
-        update_pbar(PPOP, 100, 1);
-    }
-    connect_transport(1, 1, WORLD_SIDE_LEN - 2, WORLD_SIDE_LEN - 2);
-    /* Fix desert frontier for old saved games and scenarios */
-    desert_frontier(0, 0, WORLD_SIDE_LEN, WORLD_SIDE_LEN);
-
-    refresh_pbars(); // AL1: does nothing in NG !
+void new_swamp_city(int *originx, int *originy, int random_village)
+{
+    create_new_city( originx, originy, random_village, false, 3);
 }
 
-void setup_land(void)
+
+void setup_land()
 {
     int x, y, xw, yw;
-    int aridity = rand() % 450 - 150;
+    int aridity = global_aridity;
 
-    global_aridity = aridity;
-
     if( alt_step == 0 ){
         printf("alt_step = 0\n");
         alt_step = 400; // TODO: Why can alt_step be zero here? Quick hack to prevent crash WolfgangB 2008-09-13
@@ -287,6 +269,64 @@
 /* ---------------------------------------------------------------------- *
  * Private Functions
  * ---------------------------------------------------------------------- */
+
+static void create_new_city(int *originx, int *originy, int random_village, int old_setup_ground, int climate)
+{
+    clear_game();
+    coal_reserve_setup();
+
+    global_mountainity= 100 + rand () % 300; // roughly water slope = 25m / 1km (=from N to S)
+    //global_mountainity = 200; //  nearly useless to have a random one (only impacts do_rand_ecology through ALT(x,y))
+
+    switch (climate) {
+        case 0:
+            //old style map, with Y river: lets be very random on climate
+            global_aridity = rand() % 450 - 150;
+            break;
+        case 1:
+            // asked for desert
+            global_aridity = rand()%200 + 200;
+            break;
+        case 2:
+            // temperate
+            global_aridity = rand()%200;
+            break;
+        case 3:
+            //swamp
+            global_aridity = rand()%200 - 200;
+            global_mountainity = global_mountainity / 5; // swamps are flat lands
+            break;
+
+    }
+
+
+    if (old_setup_ground) {
+        setup_river();
+        setup_ground();
+    } else {
+        new_setup_river_ground();
+    }
+    setup_land();
+    ore_reserve_setup();
+    init_pbars();
+
+    /* Initial population is 100 for empty board or 200
+       for random village (100 are housed). */
+    people_pool = 100;
+
+    if (random_village != 0) {
+        random_start(originx, originy);
+        update_pbar(PPOP, 200, 1);      /* So pbars don't flash */
+    } else {
+        *originx = *originy = WORLD_SIDE_LEN / 2;
+        update_pbar(PPOP, 100, 1);
+    }
+    connect_transport(1, 1, WORLD_SIDE_LEN - 2, WORLD_SIDE_LEN - 2);
+    /* Fix desert frontier for old saved games and scenarios */
+    desert_frontier(0, 0, WORLD_SIDE_LEN, WORLD_SIDE_LEN);
+
+    refresh_pbars(); // AL1: does nothing in NG !
+}
 static void initialize_tax_rates(void)
 {
     income_tax_rate = INCOME_TAX_RATE;
@@ -505,7 +545,7 @@
 
 }
 
-void new_setup_river(void)
+static void new_setup_river(void)
 {
     // brute search of local minimum
 
@@ -538,8 +578,19 @@
             }
         }
     }
+
     // fill lake until it overfills and creates a river
-    for (i = l-1 ; i >= 0; i--) {
+    // for dry climate reduce the number of lake
+    m = round(((400 - global_aridity)*l) / 600); // ugly hardcoded values correpsonding to "climate" switch in create_new_city
+    if (m==0)
+        m=1;
+
+    if (m>l)
+        m = l;
+
+    sort_by_altitude(l, lakx, laky);
+    for (i = 0; i <m; i++) {
+        // start by the lowest lake (the only with water in very dry desert)
         fprintf(stdout, "\nLAKE %i\n", i);
         shore = init_shore();
         set_river_tile(lakx[i], laky[i]);
@@ -548,7 +599,7 @@
     }
 }
 
-void free_shore(Shoreline *shore)
+static void free_shore(Shoreline *shore)
 {
     Shoreline * tmp;
     while (shore->next != NULL) {
@@ -559,14 +610,11 @@
     free(shore);
 }
 
-Shoreline * init_shore(void)
+static Shoreline * init_shore(void)
 {
     Shoreline *shore;
 
     shore = (Shoreline *) malloc(sizeof(struct Shoreline));
-    //shore->x = (int) malloc(sizeof(int));
-    //shore->y = (int) malloc(sizeof(int));
-    //shore->altitude = (int) malloc(sizeof(int));
     shore->next = (Shoreline *) malloc(sizeof(struct Shoreline));
 
 	shore->x = -1;
@@ -577,22 +625,19 @@
     return shore;
 }
 
-void add_shore_point(Shoreline * current, int x, int y, int altitude)
+static void add_shore_point(Shoreline * current, int x, int y, int altitude)
 {
-  Shoreline *newp;
-  newp = (Shoreline *) malloc(sizeof(struct Shoreline));
-            newp->x = (int) malloc(sizeof(int));
-            newp->y = (int) malloc(sizeof(int));
-            newp->altitude = (int) malloc(sizeof(int));
-            newp->next = (Shoreline *) malloc(sizeof(struct Shoreline));
-            newp->x = x;
-            newp->y = y;
-            newp->altitude = altitude;
-            newp->next = current->next;
-            current->next = newp;
+    Shoreline *newp;
+    newp = (Shoreline *) malloc(sizeof(struct Shoreline));
+    newp->next = (Shoreline *) malloc(sizeof(struct Shoreline));
+    newp->x = x;
+    newp->y = y;
+    newp->altitude = altitude;
+    newp->next = current->next;
+    current->next = newp;
 }
 
-void try_shore_point(int x, int y, Shoreline *shore)
+static void try_shore_point(int x, int y, Shoreline *shore)
 {
     Shoreline *current;
     int a;
@@ -602,7 +647,7 @@
     while (current->next != NULL) {
         if (a < current->next->altitude) {
             // insert in beginning of the list
-            fprintf(stderr, " beginning point shore = %i, x %i, y %i, a %i\n", (int) shore, x, y, a);
+            //fprintf(stderr, " beginning point shore = %i, x %i, y %i, a %i\n", (int) shore, x, y, a);
             add_shore_point(current, x, y, a);
             return;
         } else if (a == current->next->altitude) {
@@ -614,7 +659,7 @@
                 current = current->next;
             };
             //insert the shore point in the list
-            fprintf(stderr, " same alt point shore = %i, x %i, y %i, a %i\n", (int) shore, x, y, a);
+            //fprintf(stderr, " same alt point shore = %i, x %i, y %i, a %i\n", (int) shore, x, y, a);
             add_shore_point(current, x, y, a);
             return;
         };
@@ -622,7 +667,7 @@
     };
     // we reached end of list
     // altitude of the point is strict maximum of the list
-    fprintf(stderr, " append point shore = %i, x %i, y %i, a %i\n", (int) shore, x, y, a);
+    //fprintf(stderr, " append point shore = %i, x %i, y %i, a %i\n", (int) shore, x, y, a);
     if ((current->x != x) && (current->y != y))
         add_shore_point(current, x, y, a);
 }
@@ -639,7 +684,7 @@
         return 0;
 }
 
-void overfill_lake(int x, int y, Shoreline *shore, int lake_id)
+static void overfill_lake(int x, int y, Shoreline *shore, int lake_id)
 {
     // Starting point is a local minimum
     // Lake growth is done iteratively by flooding the lowest shore point and rising water level
@@ -654,7 +699,7 @@
 
     set_river_tile(x,y);
     level = ALT(x,y);
-    fprintf(stdout,"    x = %i, y = %i; level = %i\n", x, y, level);
+    //fprintf(stdout,"    x = %i, y = %i; level = %i\n", x, y, level);
 
     // find neighbours
     for (i = 0; i < 8; i++) {
@@ -671,7 +716,7 @@
             set_river_tile(x,y);
             // create river and continue to build shoreline
             // we will continue to overfill (from a lower point) until we reach border of the map
-            fprintf(stdout, "We found a pass x %i, y %i, alt %i \n", x, y, ALT(x,y));
+            //fprintf(stdout, "We found a pass x %i, y %i, alt %i \n", x, y, ALT(x,y));
             new_setup_one_river(x, y, lake_id, shore);
         }
         overfill_lake(x, y, shore, lake_id);
@@ -679,8 +724,7 @@
         // Q: ? Should this happen ?
         // A: yes if we are in a lake that was previously filled by a higher one which overfilled here
         //    else ? it should not happen ?
-        fprintf(stderr,"we have a problem the shoreline list is empty, x = %i, y = %i\n", x, y);
-        //exit(0);
+        //fprintf(stderr,"the shoreline list is empty, x = %i, y = %i\n", x, y);
     }
 }
 
@@ -691,7 +735,6 @@
     MP_INFO(i, j).flags |= FLAG_IS_RIVER;
 }
 
-/*  AL1: commented out, because unused currently
 
 static void sort_by_altitude(int n, int *tabx, int *taby)
 {
@@ -714,7 +757,6 @@
             }
     }
 }
-*/
 
 static int new_setup_one_river( int xx, int yy, int lake_id, Shoreline *shore)
 {
@@ -726,7 +768,7 @@
     x0=xx;
     y0 = yy;
     /* follow most important slope and go downward */
-    do {
+    while ( ((xx != x) || (yy != y)) && (xx != 0) && (xx != (WORLD_SIDE_LEN - 1)) && (yy != 0) && (yy != WORLD_SIDE_LEN - 1) ) {
         int m = 0;
         x = xx;
         y = yy;
@@ -754,7 +796,7 @@
             else
                 set_river_tile(x + di[m], y);
         }
-    } while ( ((xx != x) || (yy != y)) && (xx != 0) && (xx != (WORLD_SIDE_LEN - 1)) && (yy != 0) && (yy != WORLD_SIDE_LEN - 1) );
+    };
     // We are in a local minimum or at the borders of the map (strictly the lowest points)
 
     // Check if we are lower than the bottom of the lake we are trying to overfill
@@ -1095,7 +1137,7 @@
     set_mappoint(xx + 16, yy + 17, CST_COMMUNE_1);
 }
 
-void do_rand_ecology(int x, int y)
+static void do_rand_ecology(int x, int y)
 {
     int r = ground[x][y].ecotable;
     if ( (MP_INFO(x, y).flags | FLAG_HAS_UNDERGROUND_WATER) == 0 ) {

Modified: trunk/src/lincity-ng/GameView.hpp
===================================================================
--- trunk/src/lincity-ng/GameView.hpp	2010-01-26 17:05:36 UTC (rev 1566)
+++ trunk/src/lincity-ng/GameView.hpp	2010-01-30 17:37:48 UTC (rev 1567)
@@ -23,7 +23,7 @@
 #include "gui/Vector2.hpp"
 #include "gui/Texture.hpp"
 #include <time.h>
-#include <SDL.h> 
+#include <SDL.h>
 #include <SDL_thread.h>
 #include <SDL_image.h>
 
@@ -31,8 +31,6 @@
 #include "MapPoint.hpp"
 #include "MiniMap.hpp"
 
-#undef DEBUG_FPS
-
 class GameView : public Component
 {
 public:
@@ -40,29 +38,29 @@
     ~GameView();
 
     void parse(XmlReader& reader);
-    
+
     void draw(Painter& painter);
     void resize(float width, float height );
     void event(const Event& event);
 
     void requestRedraw();
 
-    //Show City Tile(x/y) by centering the screen 
+    //Show City Tile(x/y) by centering the screen
     void show(MapPoint point, bool redraw = true );
     MapPoint getCenter();
-        
+
     //Set Zoomlevel to default
     void resetZoom();
-    //increase Zoomlevel 
+    //increase Zoomlevel
     void zoomIn();
-    //decrease Zoomlevel 
+    //decrease Zoomlevel
     void zoomOut();
 
     //scroll the map
     void scroll( void );
 
     //size in Tiles of marking under Cursor
-    void setCursorSize( int size ); 
+    void setCursorSize( int size );
 
     //inform GameView about change in Mini Map Mode
     void setMapMode( MiniMap::DisplayMode mMode );
@@ -73,7 +71,7 @@
     //evaluate main_screen_originx and main_screen_originy
     void readOrigin( bool redraw = true );
     //set main_screen_originx and main_screen_originy
-    void writeOrigin();    
+    void writeOrigin();
 
     void printStatusMessage( std::string message );
 
@@ -91,13 +89,13 @@
     void drawDiamond( Painter& painter, const Rect2D& rect );
     void loadTextures();
     static int gameViewThread(void* data);
-    
+
     void setZoom(float newzoom);
     Texture* readTexture(const std::string& filename);
     SDL_Surface* readImage(const std::string& filename);
     void preReadCityTexture(int textureType, const std::string& filename);
 
-    float tileWidth, tileHeight, zoom; 
+    float tileWidth, tileHeight, zoom;
     //a virtual screen containing the whole city
     float virtualScreenWidth, virtualScreenHeight;
 
@@ -121,7 +119,7 @@
 
     int bulldozeCost( MapPoint tile );
     int buildCost( MapPoint tile );
-    
+
     Texture* cityTextures[ NUM_OF_TYPES ];
     SDL_Surface* cityImages[ NUM_OF_TYPES ];
     Texture* blankTexture;
@@ -131,17 +129,17 @@
     SDL_mutex* mThreadRunning;
     SDL_Thread* loaderThread;
     volatile bool stopThread;
-        
+
     MapPoint tileUnderMouse;
     Vector2 dragStart;
     bool mouseInGameView;
     bool dragging, rightButtonDown;
     Uint32 dragStartTime;
-    
+
     bool roadDragging, leftButtonDown;
     MapPoint startRoad;
     bool areaBulldoze;
-    
+
     static const float defaultTileWidth;
     static const float defaultTileHeight;
     static const float defaultZoom;
@@ -166,7 +164,7 @@
 };
 
 GameView* getGameView();
-  
+
 Uint32 autoScroll( Uint32 interval, void *param );
 static const int scrollBorder = 5;
 

Modified: trunk/src/lincity-ng/MainMenu.cpp
===================================================================
--- trunk/src/lincity-ng/MainMenu.cpp	2010-01-26 17:05:36 UTC (rev 1566)
+++ trunk/src/lincity-ng/MainMenu.cpp	2010-01-30 17:37:48 UTC (rev 1567)
@@ -51,6 +51,9 @@
 #include "tinygettext/gettext.hpp"
 
 extern void new_city(int *originx, int *originy, int random_village);
+extern void new_desert_city(int *originx, int *originy, int random_village);
+extern void new_temperate_city(int *originx, int *originy, int random_village);
+extern void new_swamp_city(int *originx, int *originy, int random_village);
 
 MainMenu::MainMenu()
 {
@@ -214,17 +217,27 @@
 
         // connect signals
         Button* startButton = getButton(*newGameMenu, "StartButton");
-        startButton->clicked.connect(
-                makeCallback(*this, &MainMenu::newGameStartButtonClicked));
+        startButton->clicked.connect(makeCallback(*this, &MainMenu::newGameStartButtonClicked));
+
         Button* backButton = getButton(*newGameMenu, "BackButton");
-        backButton->clicked.connect(
-                makeCallback(*this, &MainMenu::newGameBackButtonClicked));
+        backButton->clicked.connect(makeCallback(*this, &MainMenu::newGameBackButtonClicked));
+
         Button* startBareButton = getButton(*newGameMenu, "StartBareButton");
-        startBareButton->clicked.connect(
-                makeCallback(*this, &MainMenu::newGameStartBareButtonClicked));
+        startBareButton->clicked.connect(makeCallback(*this, &MainMenu::newGameStartBareButtonClicked));
+
         Button* startVillageButton = getButton(*newGameMenu, "StartVillageButton");
-        startVillageButton->clicked.connect(
-                makeCallback(*this, &MainMenu::newGameStartVillageClicked));
+        startVillageButton->clicked.connect(makeCallback(*this, &MainMenu::newGameStartVillageClicked));
+
+        Button* startRandomDesertButton = getButton(*newGameMenu, "StartRandomDesertButton");
+        startRandomDesertButton->clicked.connect(makeCallback(*this, &MainMenu::newGameStartDesertClicked));
+
+        Button* startRandomTemperateButton = getButton(*newGameMenu, "StartRandomTemperateButton");
+        startRandomTemperateButton->clicked.connect(makeCallback(*this, &MainMenu::newGameStartTemperateClicked));
+
+        Button* startRandomSwampButton = getButton(*newGameMenu, "StartRandomSwampButton");
+        startRandomSwampButton->clicked.connect(makeCallback(*this, &MainMenu::newGameStartSwampClicked));
+
+
         fillNewGameMenu();
     }
 
@@ -729,6 +742,39 @@
 }
 
 void
+MainMenu::newGameStartDesertClicked(Button* )
+{
+    getSound()->playSound( "Click" );
+    new_desert_city( &main_screen_originx, &main_screen_originy, 1 );
+    GameView* gv = getGameView();
+    if( gv ){ gv->readOrigin(); }
+    quitState = INGAME;
+    running = false;
+}
+
+void
+MainMenu::newGameStartTemperateClicked(Button* )
+{
+    getSound()->playSound( "Click" );
+    new_temperate_city( &main_screen_originx, &main_screen_originy, 1 );
+    GameView* gv = getGameView();
+    if( gv ){ gv->readOrigin(); }
+    quitState = INGAME;
+    running = false;
+}
+
+void
+MainMenu::newGameStartSwampClicked(Button* )
+{
+    getSound()->playSound( "Click" );
+    new_swamp_city( &main_screen_originx, &main_screen_originy, 1 );
+    GameView* gv = getGameView();
+    if( gv ){ gv->readOrigin(); }
+    quitState = INGAME;
+    running = false;
+}
+
+void
 MainMenu::newGameBackButtonClicked(Button* )
 {
     getSound()->playSound( "Click" );

Modified: trunk/src/lincity-ng/MainMenu.hpp
===================================================================
--- trunk/src/lincity-ng/MainMenu.hpp	2010-01-26 17:05:36 UTC (rev 1566)
+++ trunk/src/lincity-ng/MainMenu.hpp	2010-01-30 17:37:48 UTC (rev 1567)
@@ -40,20 +40,20 @@
 
 private:
     void switchMenu(Component* component);
-    
+
     void loadMainMenu();
     void loadNewGameMenu();
     void loadLoadGameMenu();
     void loadSaveGameMenu();
     void loadCreditsMenu();
     void loadOptionsMenu();
-    
+
     void fillLoadMenu( bool save = false );
     void fillNewGameMenu();
 
     void creditsBackButtonClicked(Button* );
     void optionsBackButtonClicked(Button* );
-    
+
     void quitButtonClicked(Button* );
     void continueButtonClicked(Button* );
     void creditsButtonClicked(Button* );
@@ -66,7 +66,10 @@
     void newGameStartButtonClicked(Button* );
     void newGameStartBareButtonClicked(Button* );
     void newGameStartVillageClicked(Button* );
-        
+    void newGameStartDesertClicked(Button* );
+    void newGameStartTemperateClicked(Button* );
+    void newGameStartSwampClicked(Button* );
+
     void loadGameBackButtonClicked(Button* );
     void loadGameLoadButtonClicked(Button* );
     void loadGameSaveButtonClicked(Button* );
@@ -83,17 +86,17 @@
     std::auto_ptr<Component> creditsMenu;
     std::auto_ptr<Component> optionsMenu;
     Desktop* currentMenu;
-    
+
     bool running;
-    MainState quitState;           
+    MainState quitState;
     int slotNr;
-    
-    std::string mFilename;    
+
+    std::string mFilename;
     std::string baseName;
     static const Uint32 doubleClickTime = 1000;
     Uint32 lastClickTick;
     std::string doubleClickButtonName;
-    
+
     Paragraph* musicParagraph;
     void changeTrack( bool next);
 



From alainb at mail.berlios.de  Sat Jan 30 21:29:23 2010
From: alainb at mail.berlios.de (alainb at BerliOS)
Date: Sat, 30 Jan 2010 21:29:23 +0100
Subject: [Lincity-ng-commit] r1568 - trunk/src/lincity-ng
Message-ID: <201001302029.o0UKTNAC004208@sheep.berlios.de>

Author: alainb
Date: 2010-01-30 21:29:22 +0100 (Sat, 30 Jan 2010)
New Revision: 1568

Modified:
   trunk/src/lincity-ng/GameView.cpp
Log:
experimental 3d : better cursor and overlay
  Known bug: funny pb with mouse pointer not in the same place as red/blue cursor in 3d

Modified: trunk/src/lincity-ng/GameView.cpp
===================================================================
--- trunk/src/lincity-ng/GameView.cpp	2010-01-30 17:37:48 UTC (rev 1567)
+++ trunk/src/lincity-ng/GameView.cpp	2010-01-30 20:29:22 UTC (rev 1568)
@@ -53,6 +53,8 @@
 #include "gui/Button.hpp"
 #include "CheckButton.hpp"
 
+const int scale3d = 128; // guestimate value for good looking 3d view;
+
 extern int is_allowed_here(int x, int y, short cst_type, short msg);
 
 const float GameView::defaultTileWidth = 128;
@@ -1292,11 +1294,17 @@
     Color black;
     black.parse("black");
     Color miniMapColor;
+    int h = 0;
 
-    Vector2 tileOnScreenPoint = getScreenPoint(tile);
+#ifdef EXPERIMENTAL
+    if (inCity(tile))
+         h = (int) ( (float)( ALT(tile.x, tile.y) * scale3d) * zoom  / (float) alt_step ) ;
+#endif
+
+   Vector2 tileOnScreenPoint = getScreenPoint(tile);
     Rect2D tilerect( 0, 0, tileWidth, tileHeight );
     tileOnScreenPoint.x = tileOnScreenPoint.x - ( tileWidth / 2);
-    tileOnScreenPoint.y -= tileHeight;
+    tileOnScreenPoint.y -= tileHeight + h;
     tilerect.move( tileOnScreenPoint );
     //Outside of the Map gets Black overlay
     if( !inCity( tile ) ) {
@@ -1404,7 +1412,6 @@
         // shift the tile upward to show altitude
         //
         // AL1 : why are this coordinates (double) ? Does not (float) be enought ? or is it an SDL/GL requirement ?
-        int scale3d = 128; // guestimate value for good looking;
         double h = (double) ( ALT(tile.x, tile.y) * scale3d) * zoom  / (double) alt_step ;
         //printf(" tx = %lf, ty = %lf, h = %f \n",  tileOnScreenPoint.x,  tileOnScreenPoint.y, h);
         tileOnScreenPoint.y -=  h ;
@@ -1437,12 +1444,19 @@
 void GameView::markTile( Painter& painter, MapPoint tile )
 {
     Vector2 tileOnScreenPoint = getScreenPoint(tile);
+    int x = (int) tile.x;
+    int y = (int) tile.y;
+    int h = 0;
+#ifdef EXPERIMENTAL
+    if (inCity(tile))
+        h = (int) ( (float)( ALT(tile.x, tile.y) * scale3d) * zoom  / (float) alt_step ) ;
+#endif
     if( cursorSize == 0 ) {
         Color alphawhite( 255, 255, 255, 128 );
         painter.setLineColor( alphawhite );
         Rect2D tilerect( 0, 0, tileWidth, tileHeight );
         tileOnScreenPoint.x = tileOnScreenPoint.x - ( tileWidth / 2);
-        tileOnScreenPoint.y -= tileHeight;
+        tileOnScreenPoint.y -= tileHeight + h;
         tilerect.move( tileOnScreenPoint );
         drawDiamond( painter, tilerect );
     } else {
@@ -1450,8 +1464,6 @@
         Color alphared( 255, 0, 0, 128 );
         painter.setFillColor( alphablue );
         //check if building is inside the map, if not use Red Cursor
-        int x = (int) tile.x;
-        int y = (int) tile.y;
         MapPoint seCorner( x + cursorSize -1, y + cursorSize -1 );
         if( !inCity( seCorner ) || !inCity( tile ) ) {
             painter.setFillColor( alphared );
@@ -1478,7 +1490,7 @@
 
         Rect2D tilerect( 0, 0, tileWidth * cursorSize, tileHeight * cursorSize );
         tileOnScreenPoint.x = tileOnScreenPoint.x - (tileWidth * cursorSize / 2);
-        tileOnScreenPoint.y -= tileHeight;
+        tileOnScreenPoint.y -= tileHeight + h;
         tilerect.move( tileOnScreenPoint );
         fillDiamond( painter, tilerect );
 
@@ -1533,7 +1545,7 @@
         	                  tileHeight * ( 2 * range - reduceNW ) );
         	Vector2 screenPoint = getScreenPoint(tile);
         	screenPoint.x -= tileWidth  * ( range - 0.5 * reduceNW );
-        	screenPoint.y -= tileHeight * ( range + 1 - reduceNW );
+        	screenPoint.y -= tileHeight * ( range + 1 - reduceNW ) + h;
         	rangerect.move( screenPoint );
         	fillDiamond( painter, rangerect );
         }
@@ -1582,7 +1594,7 @@
     Vector2 lowerLeft( 0, getHeight() );
 #else
     // printf("h = %f,     z = %f \n ", getHeight(), zoom);
-    Vector2 lowerLeft( 0, getHeight() * ( 1 + getHeight() * zoom / 128. )); // ? 128 = scale3d ; getHeight = size in pixel of the screen (1024x768)
+    Vector2 lowerLeft( 0, getHeight() * ( 1 + getHeight() * zoom / (float)scale3d )); // getHeight = size in pixel of the screen (eg 1024x768)
 #endif
 
     //Find visible Tiles
@@ -1624,7 +1636,7 @@
             {
                 currentTile.x = upperLeftTile.x + i + k / 2 + k % 2;
                 currentTile.y = upperLeftTile.y - i + k / 2;
-                drawOverlay( painter, currentTile );
+              drawOverlay( painter, currentTile );
             }
         }
     }



From alainb at mail.berlios.de  Sat Jan 30 22:36:25 2010
From: alainb at mail.berlios.de (alainb at BerliOS)
Date: Sat, 30 Jan 2010 22:36:25 +0100
Subject: [Lincity-ng-commit] r1569 - trunk/src/lincity-ng
Message-ID: <201001302136.o0ULaPrg008676@sheep.berlios.de>

Author: alainb
Date: 2010-01-30 22:36:25 +0100 (Sat, 30 Jan 2010)
New Revision: 1569

Modified:
   trunk/src/lincity-ng/GameView.cpp
   trunk/src/lincity-ng/GameView.hpp
Log:
Overlay Button is used to display 3d view

Modified: trunk/src/lincity-ng/GameView.cpp
===================================================================
--- trunk/src/lincity-ng/GameView.cpp	2010-01-30 20:29:22 UTC (rev 1568)
+++ trunk/src/lincity-ng/GameView.cpp	2010-01-30 21:36:25 UTC (rev 1569)
@@ -1296,10 +1296,8 @@
     Color miniMapColor;
     int h = 0;
 
-#ifdef EXPERIMENTAL
-    if (inCity(tile))
-         h = (int) ( (float)( ALT(tile.x, tile.y) * scale3d) * zoom  / (float) alt_step ) ;
-#endif
+    if ((mapOverlay >2) && (inCity(tile)))
+            h = (int) ( (float)( ALT(tile.x, tile.y) * scale3d) * zoom  / (float) alt_step ) ;
 
    Vector2 tileOnScreenPoint = getScreenPoint(tile);
     Rect2D tilerect( 0, 0, tileWidth, tileHeight );
@@ -1339,6 +1337,7 @@
 {
     Rect2D tilerect( 0, 0, tileWidth, tileHeight );
     Vector2 tileOnScreenPoint = getScreenPoint( tile );
+    double h = 0.;
 
     //is Tile in City? If not draw Blank
     if( ! inCity( tile ) )
@@ -1408,14 +1407,15 @@
          * especially power lines :) */
         tileOnScreenPoint.x -= cityTextureX[textureType] * zoom;
         tileOnScreenPoint.y -= cityTextureY[textureType] * zoom;
-#ifdef EXPERIMENTAL
+
+        if (mapOverlay > 2) {
         // shift the tile upward to show altitude
         //
         // AL1 : why are this coordinates (double) ? Does not (float) be enought ? or is it an SDL/GL requirement ?
-        double h = (double) ( ALT(tile.x, tile.y) * scale3d) * zoom  / (double) alt_step ;
+        h = (double) ( ALT(tile.x, tile.y) * scale3d) * zoom  / (double) alt_step ;
         //printf(" tx = %lf, ty = %lf, h = %f \n",  tileOnScreenPoint.x,  tileOnScreenPoint.y, h);
         tileOnScreenPoint.y -=  h ;
-#endif
+        }
 
         tilerect.move( tileOnScreenPoint );
         tilerect.setSize(texture->getWidth() * zoom, texture->getHeight() * zoom);
@@ -1447,10 +1447,9 @@
     int x = (int) tile.x;
     int y = (int) tile.y;
     int h = 0;
-#ifdef EXPERIMENTAL
-    if (inCity(tile))
+    if ((mapOverlay > 2) && (inCity(tile)))
         h = (int) ( (float)( ALT(tile.x, tile.y) * scale3d) * zoom  / (float) alt_step ) ;
-#endif
+
     if( cursorSize == 0 ) {
         Color alphawhite( 255, 255, 255, 128 );
         painter.setLineColor( alphawhite );
@@ -1590,13 +1589,14 @@
     //      and adjust these Vectors:
     Vector2 upperLeft( 0, 0);
     Vector2 upperRight( getWidth(), 0 );
-#ifndef EXPERIMENTAL
     Vector2 lowerLeft( 0, getHeight() );
-#else
-    // printf("h = %f,     z = %f \n ", getHeight(), zoom);
-    Vector2 lowerLeft( 0, getHeight() * ( 1 + getHeight() * zoom / (float)scale3d )); // getHeight = size in pixel of the screen (eg 1024x768)
-#endif
 
+    if (mapOverlay > 2) {
+        // printf("h = %f,     z = %f \n ", getHeight(), zoom);
+        // getHeight = size in pixel of the screen (eg 1024x768)
+        Vector2 lowerLeft( 0, getHeight() * ( 1 + getHeight() * zoom / (float)scale3d ));
+    }
+
     //Find visible Tiles
     MapPoint upperLeftTile  = getTile( upperLeft );
     MapPoint upperRightTile = getTile( upperRight );
@@ -1618,7 +1618,7 @@
     upperRightTile.x += extratiles;
     lowerLeftTile.y +=  extratiles;
 
-    if( mapOverlay != overlayOnly ){
+    if (mapOverlay != overlayOnly) {
         for(int k = 0; k <= 2 * ( lowerLeftTile.y - upperLeftTile.y ); k++ )
         {
             for(int i = 0; i <= upperRightTile.x - upperLeftTile.x; i++ )
@@ -1629,7 +1629,7 @@
             }
         }
     }
-    if( mapOverlay != overlayNone ){
+    if( (mapOverlay != overlayNone ) && (mapOverlay != overlay3dOnly) ){
         for(int k = 0; k <= 2 * ( lowerLeftTile.y - upperLeftTile.y ); k++ )
         {
             for(int i = 0; i <= upperRightTile.x - upperLeftTile.x; i++ )

Modified: trunk/src/lincity-ng/GameView.hpp
===================================================================
--- trunk/src/lincity-ng/GameView.hpp	2010-01-30 20:29:22 UTC (rev 1568)
+++ trunk/src/lincity-ng/GameView.hpp	2010-01-30 21:36:25 UTC (rev 1569)
@@ -150,7 +150,9 @@
     static const int overlayNone = 0;
     static const int overlayOn = 1;
     static const int overlayOnly = 2;
-    static const int overlayMAX = 2;
+    static const int overlay3dOnly = 3;
+    static const int overlayWith3d = 4;
+    static const int overlayMAX = 4;
 
     static const int gameAreaMin = 1;
     static const int gameAreaMax = WORLD_SIDE_LEN -2;



